// Code generated by ent, DO NOT EDIT.

package sku

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sku type in the database.
	Label = "sku"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldSpuID holds the string denoting the spu_id field in the database.
	FieldSpuID = "spu_id"
	// FieldProperties holds the string denoting the properties field in the database.
	FieldProperties = "properties"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldMarketPrice holds the string denoting the market_price field in the database.
	FieldMarketPrice = "market_price"
	// FieldCostPrice holds the string denoting the cost_price field in the database.
	FieldCostPrice = "cost_price"
	// FieldBarCode holds the string denoting the bar_code field in the database.
	FieldBarCode = "bar_code"
	// FieldPicURL holds the string denoting the pic_url field in the database.
	FieldPicURL = "pic_url"
	// FieldStock holds the string denoting the stock field in the database.
	FieldStock = "stock"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldVolume holds the string denoting the volume field in the database.
	FieldVolume = "volume"
	// FieldFirstBrokeragePrice holds the string denoting the first_brokerage_price field in the database.
	FieldFirstBrokeragePrice = "first_brokerage_price"
	// FieldSecondBrokeragePrice holds the string denoting the second_brokerage_price field in the database.
	FieldSecondBrokeragePrice = "second_brokerage_price"
	// FieldSalesCount holds the string denoting the sales_count field in the database.
	FieldSalesCount = "sales_count"
	// EdgeSpus holds the string denoting the spus edge name in mutations.
	EdgeSpus = "spus"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// Table holds the table name of the sku in the database.
	Table = "product_sku"
	// SpusTable is the table that holds the spus relation/edge.
	SpusTable = "product_sku"
	// SpusInverseTable is the table name for the Spu entity.
	// It exists in this package in order to avoid circular dependency with the "spu" package.
	SpusInverseTable = "product_spu"
	// SpusColumn is the table column denoting the spus relation/edge.
	SpusColumn = "spu_id"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "product_comment"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "product_comment"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "sku_id"
)

// Columns holds all SQL columns for sku fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldSpuID,
	FieldProperties,
	FieldPrice,
	FieldMarketPrice,
	FieldCostPrice,
	FieldBarCode,
	FieldPicURL,
	FieldStock,
	FieldWeight,
	FieldVolume,
	FieldFirstBrokeragePrice,
	FieldSecondBrokeragePrice,
	FieldSalesCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/agui-coder/simple-admin-product-rpc/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Sku queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// BySpuID orders the results by the spu_id field.
func BySpuID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpuID, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByMarketPrice orders the results by the market_price field.
func ByMarketPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMarketPrice, opts...).ToFunc()
}

// ByCostPrice orders the results by the cost_price field.
func ByCostPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCostPrice, opts...).ToFunc()
}

// ByBarCode orders the results by the bar_code field.
func ByBarCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBarCode, opts...).ToFunc()
}

// ByPicURL orders the results by the pic_url field.
func ByPicURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPicURL, opts...).ToFunc()
}

// ByStock orders the results by the stock field.
func ByStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStock, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByVolume orders the results by the volume field.
func ByVolume(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVolume, opts...).ToFunc()
}

// ByFirstBrokeragePrice orders the results by the first_brokerage_price field.
func ByFirstBrokeragePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstBrokeragePrice, opts...).ToFunc()
}

// BySecondBrokeragePrice orders the results by the second_brokerage_price field.
func BySecondBrokeragePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecondBrokeragePrice, opts...).ToFunc()
}

// BySalesCount orders the results by the sales_count field.
func BySalesCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalesCount, opts...).ToFunc()
}

// BySpusField orders the results by spus field.
func BySpusField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSpusStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSpusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SpusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SpusTable, SpusColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
	)
}
