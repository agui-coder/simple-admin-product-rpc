// Code generated by ent, DO NOT EDIT.

package sku

import (
	"github.com/agui-coder/simple-admin-product-rpc/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldDeletedAt, v))
}

// SpuID applies equality check predicate on the "spu_id" field. It's identical to SpuIDEQ.
func SpuID(v uint64) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldSpuID, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldPrice, v))
}

// MarketPrice applies equality check predicate on the "market_price" field. It's identical to MarketPriceEQ.
func MarketPrice(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldMarketPrice, v))
}

// CostPrice applies equality check predicate on the "cost_price" field. It's identical to CostPriceEQ.
func CostPrice(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldCostPrice, v))
}

// BarCode applies equality check predicate on the "bar_code" field. It's identical to BarCodeEQ.
func BarCode(v string) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldBarCode, v))
}

// PicURL applies equality check predicate on the "pic_url" field. It's identical to PicURLEQ.
func PicURL(v string) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldPicURL, v))
}

// Stock applies equality check predicate on the "stock" field. It's identical to StockEQ.
func Stock(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldStock, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldWeight, v))
}

// Volume applies equality check predicate on the "volume" field. It's identical to VolumeEQ.
func Volume(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldVolume, v))
}

// FirstBrokeragePrice applies equality check predicate on the "first_brokerage_price" field. It's identical to FirstBrokeragePriceEQ.
func FirstBrokeragePrice(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldFirstBrokeragePrice, v))
}

// SecondBrokeragePrice applies equality check predicate on the "second_brokerage_price" field. It's identical to SecondBrokeragePriceEQ.
func SecondBrokeragePrice(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldSecondBrokeragePrice, v))
}

// SalesCount applies equality check predicate on the "sales_count" field. It's identical to SalesCountEQ.
func SalesCount(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldSalesCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Sku {
	return predicate.Sku(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Sku {
	return predicate.Sku(sql.FieldNotNull(FieldDeletedAt))
}

// SpuIDEQ applies the EQ predicate on the "spu_id" field.
func SpuIDEQ(v uint64) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldSpuID, v))
}

// SpuIDNEQ applies the NEQ predicate on the "spu_id" field.
func SpuIDNEQ(v uint64) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldSpuID, v))
}

// SpuIDIn applies the In predicate on the "spu_id" field.
func SpuIDIn(vs ...uint64) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldSpuID, vs...))
}

// SpuIDNotIn applies the NotIn predicate on the "spu_id" field.
func SpuIDNotIn(vs ...uint64) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldSpuID, vs...))
}

// SpuIDIsNil applies the IsNil predicate on the "spu_id" field.
func SpuIDIsNil() predicate.Sku {
	return predicate.Sku(sql.FieldIsNull(FieldSpuID))
}

// SpuIDNotNil applies the NotNil predicate on the "spu_id" field.
func SpuIDNotNil() predicate.Sku {
	return predicate.Sku(sql.FieldNotNull(FieldSpuID))
}

// PropertiesIsNil applies the IsNil predicate on the "properties" field.
func PropertiesIsNil() predicate.Sku {
	return predicate.Sku(sql.FieldIsNull(FieldProperties))
}

// PropertiesNotNil applies the NotNil predicate on the "properties" field.
func PropertiesNotNil() predicate.Sku {
	return predicate.Sku(sql.FieldNotNull(FieldProperties))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int32) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int32) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldPrice, v))
}

// MarketPriceEQ applies the EQ predicate on the "market_price" field.
func MarketPriceEQ(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldMarketPrice, v))
}

// MarketPriceNEQ applies the NEQ predicate on the "market_price" field.
func MarketPriceNEQ(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldMarketPrice, v))
}

// MarketPriceIn applies the In predicate on the "market_price" field.
func MarketPriceIn(vs ...int32) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldMarketPrice, vs...))
}

// MarketPriceNotIn applies the NotIn predicate on the "market_price" field.
func MarketPriceNotIn(vs ...int32) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldMarketPrice, vs...))
}

// MarketPriceGT applies the GT predicate on the "market_price" field.
func MarketPriceGT(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldMarketPrice, v))
}

// MarketPriceGTE applies the GTE predicate on the "market_price" field.
func MarketPriceGTE(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldMarketPrice, v))
}

// MarketPriceLT applies the LT predicate on the "market_price" field.
func MarketPriceLT(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldMarketPrice, v))
}

// MarketPriceLTE applies the LTE predicate on the "market_price" field.
func MarketPriceLTE(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldMarketPrice, v))
}

// MarketPriceIsNil applies the IsNil predicate on the "market_price" field.
func MarketPriceIsNil() predicate.Sku {
	return predicate.Sku(sql.FieldIsNull(FieldMarketPrice))
}

// MarketPriceNotNil applies the NotNil predicate on the "market_price" field.
func MarketPriceNotNil() predicate.Sku {
	return predicate.Sku(sql.FieldNotNull(FieldMarketPrice))
}

// CostPriceEQ applies the EQ predicate on the "cost_price" field.
func CostPriceEQ(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldCostPrice, v))
}

// CostPriceNEQ applies the NEQ predicate on the "cost_price" field.
func CostPriceNEQ(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldCostPrice, v))
}

// CostPriceIn applies the In predicate on the "cost_price" field.
func CostPriceIn(vs ...int32) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldCostPrice, vs...))
}

// CostPriceNotIn applies the NotIn predicate on the "cost_price" field.
func CostPriceNotIn(vs ...int32) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldCostPrice, vs...))
}

// CostPriceGT applies the GT predicate on the "cost_price" field.
func CostPriceGT(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldCostPrice, v))
}

// CostPriceGTE applies the GTE predicate on the "cost_price" field.
func CostPriceGTE(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldCostPrice, v))
}

// CostPriceLT applies the LT predicate on the "cost_price" field.
func CostPriceLT(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldCostPrice, v))
}

// CostPriceLTE applies the LTE predicate on the "cost_price" field.
func CostPriceLTE(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldCostPrice, v))
}

// BarCodeEQ applies the EQ predicate on the "bar_code" field.
func BarCodeEQ(v string) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldBarCode, v))
}

// BarCodeNEQ applies the NEQ predicate on the "bar_code" field.
func BarCodeNEQ(v string) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldBarCode, v))
}

// BarCodeIn applies the In predicate on the "bar_code" field.
func BarCodeIn(vs ...string) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldBarCode, vs...))
}

// BarCodeNotIn applies the NotIn predicate on the "bar_code" field.
func BarCodeNotIn(vs ...string) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldBarCode, vs...))
}

// BarCodeGT applies the GT predicate on the "bar_code" field.
func BarCodeGT(v string) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldBarCode, v))
}

// BarCodeGTE applies the GTE predicate on the "bar_code" field.
func BarCodeGTE(v string) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldBarCode, v))
}

// BarCodeLT applies the LT predicate on the "bar_code" field.
func BarCodeLT(v string) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldBarCode, v))
}

// BarCodeLTE applies the LTE predicate on the "bar_code" field.
func BarCodeLTE(v string) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldBarCode, v))
}

// BarCodeContains applies the Contains predicate on the "bar_code" field.
func BarCodeContains(v string) predicate.Sku {
	return predicate.Sku(sql.FieldContains(FieldBarCode, v))
}

// BarCodeHasPrefix applies the HasPrefix predicate on the "bar_code" field.
func BarCodeHasPrefix(v string) predicate.Sku {
	return predicate.Sku(sql.FieldHasPrefix(FieldBarCode, v))
}

// BarCodeHasSuffix applies the HasSuffix predicate on the "bar_code" field.
func BarCodeHasSuffix(v string) predicate.Sku {
	return predicate.Sku(sql.FieldHasSuffix(FieldBarCode, v))
}

// BarCodeIsNil applies the IsNil predicate on the "bar_code" field.
func BarCodeIsNil() predicate.Sku {
	return predicate.Sku(sql.FieldIsNull(FieldBarCode))
}

// BarCodeNotNil applies the NotNil predicate on the "bar_code" field.
func BarCodeNotNil() predicate.Sku {
	return predicate.Sku(sql.FieldNotNull(FieldBarCode))
}

// BarCodeEqualFold applies the EqualFold predicate on the "bar_code" field.
func BarCodeEqualFold(v string) predicate.Sku {
	return predicate.Sku(sql.FieldEqualFold(FieldBarCode, v))
}

// BarCodeContainsFold applies the ContainsFold predicate on the "bar_code" field.
func BarCodeContainsFold(v string) predicate.Sku {
	return predicate.Sku(sql.FieldContainsFold(FieldBarCode, v))
}

// PicURLEQ applies the EQ predicate on the "pic_url" field.
func PicURLEQ(v string) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldPicURL, v))
}

// PicURLNEQ applies the NEQ predicate on the "pic_url" field.
func PicURLNEQ(v string) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldPicURL, v))
}

// PicURLIn applies the In predicate on the "pic_url" field.
func PicURLIn(vs ...string) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldPicURL, vs...))
}

// PicURLNotIn applies the NotIn predicate on the "pic_url" field.
func PicURLNotIn(vs ...string) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldPicURL, vs...))
}

// PicURLGT applies the GT predicate on the "pic_url" field.
func PicURLGT(v string) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldPicURL, v))
}

// PicURLGTE applies the GTE predicate on the "pic_url" field.
func PicURLGTE(v string) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldPicURL, v))
}

// PicURLLT applies the LT predicate on the "pic_url" field.
func PicURLLT(v string) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldPicURL, v))
}

// PicURLLTE applies the LTE predicate on the "pic_url" field.
func PicURLLTE(v string) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldPicURL, v))
}

// PicURLContains applies the Contains predicate on the "pic_url" field.
func PicURLContains(v string) predicate.Sku {
	return predicate.Sku(sql.FieldContains(FieldPicURL, v))
}

// PicURLHasPrefix applies the HasPrefix predicate on the "pic_url" field.
func PicURLHasPrefix(v string) predicate.Sku {
	return predicate.Sku(sql.FieldHasPrefix(FieldPicURL, v))
}

// PicURLHasSuffix applies the HasSuffix predicate on the "pic_url" field.
func PicURLHasSuffix(v string) predicate.Sku {
	return predicate.Sku(sql.FieldHasSuffix(FieldPicURL, v))
}

// PicURLEqualFold applies the EqualFold predicate on the "pic_url" field.
func PicURLEqualFold(v string) predicate.Sku {
	return predicate.Sku(sql.FieldEqualFold(FieldPicURL, v))
}

// PicURLContainsFold applies the ContainsFold predicate on the "pic_url" field.
func PicURLContainsFold(v string) predicate.Sku {
	return predicate.Sku(sql.FieldContainsFold(FieldPicURL, v))
}

// StockEQ applies the EQ predicate on the "stock" field.
func StockEQ(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldStock, v))
}

// StockNEQ applies the NEQ predicate on the "stock" field.
func StockNEQ(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldStock, v))
}

// StockIn applies the In predicate on the "stock" field.
func StockIn(vs ...int32) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldStock, vs...))
}

// StockNotIn applies the NotIn predicate on the "stock" field.
func StockNotIn(vs ...int32) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldStock, vs...))
}

// StockGT applies the GT predicate on the "stock" field.
func StockGT(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldStock, v))
}

// StockGTE applies the GTE predicate on the "stock" field.
func StockGTE(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldStock, v))
}

// StockLT applies the LT predicate on the "stock" field.
func StockLT(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldStock, v))
}

// StockLTE applies the LTE predicate on the "stock" field.
func StockLTE(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldStock, v))
}

// StockIsNil applies the IsNil predicate on the "stock" field.
func StockIsNil() predicate.Sku {
	return predicate.Sku(sql.FieldIsNull(FieldStock))
}

// StockNotNil applies the NotNil predicate on the "stock" field.
func StockNotNil() predicate.Sku {
	return predicate.Sku(sql.FieldNotNull(FieldStock))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldWeight, v))
}

// WeightIsNil applies the IsNil predicate on the "weight" field.
func WeightIsNil() predicate.Sku {
	return predicate.Sku(sql.FieldIsNull(FieldWeight))
}

// WeightNotNil applies the NotNil predicate on the "weight" field.
func WeightNotNil() predicate.Sku {
	return predicate.Sku(sql.FieldNotNull(FieldWeight))
}

// VolumeEQ applies the EQ predicate on the "volume" field.
func VolumeEQ(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldVolume, v))
}

// VolumeNEQ applies the NEQ predicate on the "volume" field.
func VolumeNEQ(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldVolume, v))
}

// VolumeIn applies the In predicate on the "volume" field.
func VolumeIn(vs ...float64) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldVolume, vs...))
}

// VolumeNotIn applies the NotIn predicate on the "volume" field.
func VolumeNotIn(vs ...float64) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldVolume, vs...))
}

// VolumeGT applies the GT predicate on the "volume" field.
func VolumeGT(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldVolume, v))
}

// VolumeGTE applies the GTE predicate on the "volume" field.
func VolumeGTE(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldVolume, v))
}

// VolumeLT applies the LT predicate on the "volume" field.
func VolumeLT(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldVolume, v))
}

// VolumeLTE applies the LTE predicate on the "volume" field.
func VolumeLTE(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldVolume, v))
}

// VolumeIsNil applies the IsNil predicate on the "volume" field.
func VolumeIsNil() predicate.Sku {
	return predicate.Sku(sql.FieldIsNull(FieldVolume))
}

// VolumeNotNil applies the NotNil predicate on the "volume" field.
func VolumeNotNil() predicate.Sku {
	return predicate.Sku(sql.FieldNotNull(FieldVolume))
}

// FirstBrokeragePriceEQ applies the EQ predicate on the "first_brokerage_price" field.
func FirstBrokeragePriceEQ(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldFirstBrokeragePrice, v))
}

// FirstBrokeragePriceNEQ applies the NEQ predicate on the "first_brokerage_price" field.
func FirstBrokeragePriceNEQ(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldFirstBrokeragePrice, v))
}

// FirstBrokeragePriceIn applies the In predicate on the "first_brokerage_price" field.
func FirstBrokeragePriceIn(vs ...int32) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldFirstBrokeragePrice, vs...))
}

// FirstBrokeragePriceNotIn applies the NotIn predicate on the "first_brokerage_price" field.
func FirstBrokeragePriceNotIn(vs ...int32) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldFirstBrokeragePrice, vs...))
}

// FirstBrokeragePriceGT applies the GT predicate on the "first_brokerage_price" field.
func FirstBrokeragePriceGT(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldFirstBrokeragePrice, v))
}

// FirstBrokeragePriceGTE applies the GTE predicate on the "first_brokerage_price" field.
func FirstBrokeragePriceGTE(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldFirstBrokeragePrice, v))
}

// FirstBrokeragePriceLT applies the LT predicate on the "first_brokerage_price" field.
func FirstBrokeragePriceLT(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldFirstBrokeragePrice, v))
}

// FirstBrokeragePriceLTE applies the LTE predicate on the "first_brokerage_price" field.
func FirstBrokeragePriceLTE(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldFirstBrokeragePrice, v))
}

// FirstBrokeragePriceIsNil applies the IsNil predicate on the "first_brokerage_price" field.
func FirstBrokeragePriceIsNil() predicate.Sku {
	return predicate.Sku(sql.FieldIsNull(FieldFirstBrokeragePrice))
}

// FirstBrokeragePriceNotNil applies the NotNil predicate on the "first_brokerage_price" field.
func FirstBrokeragePriceNotNil() predicate.Sku {
	return predicate.Sku(sql.FieldNotNull(FieldFirstBrokeragePrice))
}

// SecondBrokeragePriceEQ applies the EQ predicate on the "second_brokerage_price" field.
func SecondBrokeragePriceEQ(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldSecondBrokeragePrice, v))
}

// SecondBrokeragePriceNEQ applies the NEQ predicate on the "second_brokerage_price" field.
func SecondBrokeragePriceNEQ(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldSecondBrokeragePrice, v))
}

// SecondBrokeragePriceIn applies the In predicate on the "second_brokerage_price" field.
func SecondBrokeragePriceIn(vs ...float64) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldSecondBrokeragePrice, vs...))
}

// SecondBrokeragePriceNotIn applies the NotIn predicate on the "second_brokerage_price" field.
func SecondBrokeragePriceNotIn(vs ...float64) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldSecondBrokeragePrice, vs...))
}

// SecondBrokeragePriceGT applies the GT predicate on the "second_brokerage_price" field.
func SecondBrokeragePriceGT(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldSecondBrokeragePrice, v))
}

// SecondBrokeragePriceGTE applies the GTE predicate on the "second_brokerage_price" field.
func SecondBrokeragePriceGTE(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldSecondBrokeragePrice, v))
}

// SecondBrokeragePriceLT applies the LT predicate on the "second_brokerage_price" field.
func SecondBrokeragePriceLT(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldSecondBrokeragePrice, v))
}

// SecondBrokeragePriceLTE applies the LTE predicate on the "second_brokerage_price" field.
func SecondBrokeragePriceLTE(v float64) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldSecondBrokeragePrice, v))
}

// SecondBrokeragePriceIsNil applies the IsNil predicate on the "second_brokerage_price" field.
func SecondBrokeragePriceIsNil() predicate.Sku {
	return predicate.Sku(sql.FieldIsNull(FieldSecondBrokeragePrice))
}

// SecondBrokeragePriceNotNil applies the NotNil predicate on the "second_brokerage_price" field.
func SecondBrokeragePriceNotNil() predicate.Sku {
	return predicate.Sku(sql.FieldNotNull(FieldSecondBrokeragePrice))
}

// SalesCountEQ applies the EQ predicate on the "sales_count" field.
func SalesCountEQ(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldEQ(FieldSalesCount, v))
}

// SalesCountNEQ applies the NEQ predicate on the "sales_count" field.
func SalesCountNEQ(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldNEQ(FieldSalesCount, v))
}

// SalesCountIn applies the In predicate on the "sales_count" field.
func SalesCountIn(vs ...int32) predicate.Sku {
	return predicate.Sku(sql.FieldIn(FieldSalesCount, vs...))
}

// SalesCountNotIn applies the NotIn predicate on the "sales_count" field.
func SalesCountNotIn(vs ...int32) predicate.Sku {
	return predicate.Sku(sql.FieldNotIn(FieldSalesCount, vs...))
}

// SalesCountGT applies the GT predicate on the "sales_count" field.
func SalesCountGT(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldGT(FieldSalesCount, v))
}

// SalesCountGTE applies the GTE predicate on the "sales_count" field.
func SalesCountGTE(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldGTE(FieldSalesCount, v))
}

// SalesCountLT applies the LT predicate on the "sales_count" field.
func SalesCountLT(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldLT(FieldSalesCount, v))
}

// SalesCountLTE applies the LTE predicate on the "sales_count" field.
func SalesCountLTE(v int32) predicate.Sku {
	return predicate.Sku(sql.FieldLTE(FieldSalesCount, v))
}

// SalesCountIsNil applies the IsNil predicate on the "sales_count" field.
func SalesCountIsNil() predicate.Sku {
	return predicate.Sku(sql.FieldIsNull(FieldSalesCount))
}

// SalesCountNotNil applies the NotNil predicate on the "sales_count" field.
func SalesCountNotNil() predicate.Sku {
	return predicate.Sku(sql.FieldNotNull(FieldSalesCount))
}

// HasSpus applies the HasEdge predicate on the "spus" edge.
func HasSpus() predicate.Sku {
	return predicate.Sku(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SpusTable, SpusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSpusWith applies the HasEdge predicate on the "spus" edge with a given conditions (other predicates).
func HasSpusWith(preds ...predicate.Spu) predicate.Sku {
	return predicate.Sku(func(s *sql.Selector) {
		step := newSpusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.Sku {
	return predicate.Sku(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.Comment) predicate.Sku {
	return predicate.Sku(func(s *sql.Selector) {
		step := newCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Sku) predicate.Sku {
	return predicate.Sku(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Sku) predicate.Sku {
	return predicate.Sku(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Sku) predicate.Sku {
	return predicate.Sku(sql.NotPredicates(p))
}
