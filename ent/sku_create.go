// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/agui-coder/simple-admin-product-rpc/ent/comment"
	entType "github.com/agui-coder/simple-admin-product-rpc/ent/schema/enttype"
	"github.com/agui-coder/simple-admin-product-rpc/ent/sku"
	"github.com/agui-coder/simple-admin-product-rpc/ent/spu"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SkuCreate is the builder for creating a Sku entity.
type SkuCreate struct {
	config
	mutation *SkuMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SkuCreate) SetCreatedAt(t time.Time) *SkuCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SkuCreate) SetNillableCreatedAt(t *time.Time) *SkuCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SkuCreate) SetUpdatedAt(t time.Time) *SkuCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SkuCreate) SetNillableUpdatedAt(t *time.Time) *SkuCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SkuCreate) SetDeletedAt(t time.Time) *SkuCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SkuCreate) SetNillableDeletedAt(t *time.Time) *SkuCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetSpuID sets the "spu_id" field.
func (sc *SkuCreate) SetSpuID(u uint64) *SkuCreate {
	sc.mutation.SetSpuID(u)
	return sc
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (sc *SkuCreate) SetNillableSpuID(u *uint64) *SkuCreate {
	if u != nil {
		sc.SetSpuID(*u)
	}
	return sc
}

// SetProperties sets the "properties" field.
func (sc *SkuCreate) SetProperties(etp []entType.SkuProperty) *SkuCreate {
	sc.mutation.SetProperties(etp)
	return sc
}

// SetPrice sets the "price" field.
func (sc *SkuCreate) SetPrice(i int32) *SkuCreate {
	sc.mutation.SetPrice(i)
	return sc
}

// SetMarketPrice sets the "market_price" field.
func (sc *SkuCreate) SetMarketPrice(i int32) *SkuCreate {
	sc.mutation.SetMarketPrice(i)
	return sc
}

// SetNillableMarketPrice sets the "market_price" field if the given value is not nil.
func (sc *SkuCreate) SetNillableMarketPrice(i *int32) *SkuCreate {
	if i != nil {
		sc.SetMarketPrice(*i)
	}
	return sc
}

// SetCostPrice sets the "cost_price" field.
func (sc *SkuCreate) SetCostPrice(i int32) *SkuCreate {
	sc.mutation.SetCostPrice(i)
	return sc
}

// SetBarCode sets the "bar_code" field.
func (sc *SkuCreate) SetBarCode(s string) *SkuCreate {
	sc.mutation.SetBarCode(s)
	return sc
}

// SetNillableBarCode sets the "bar_code" field if the given value is not nil.
func (sc *SkuCreate) SetNillableBarCode(s *string) *SkuCreate {
	if s != nil {
		sc.SetBarCode(*s)
	}
	return sc
}

// SetPicURL sets the "pic_url" field.
func (sc *SkuCreate) SetPicURL(s string) *SkuCreate {
	sc.mutation.SetPicURL(s)
	return sc
}

// SetStock sets the "stock" field.
func (sc *SkuCreate) SetStock(i int32) *SkuCreate {
	sc.mutation.SetStock(i)
	return sc
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (sc *SkuCreate) SetNillableStock(i *int32) *SkuCreate {
	if i != nil {
		sc.SetStock(*i)
	}
	return sc
}

// SetWeight sets the "weight" field.
func (sc *SkuCreate) SetWeight(f float64) *SkuCreate {
	sc.mutation.SetWeight(f)
	return sc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (sc *SkuCreate) SetNillableWeight(f *float64) *SkuCreate {
	if f != nil {
		sc.SetWeight(*f)
	}
	return sc
}

// SetVolume sets the "volume" field.
func (sc *SkuCreate) SetVolume(f float64) *SkuCreate {
	sc.mutation.SetVolume(f)
	return sc
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (sc *SkuCreate) SetNillableVolume(f *float64) *SkuCreate {
	if f != nil {
		sc.SetVolume(*f)
	}
	return sc
}

// SetFirstBrokeragePrice sets the "first_brokerage_price" field.
func (sc *SkuCreate) SetFirstBrokeragePrice(i int32) *SkuCreate {
	sc.mutation.SetFirstBrokeragePrice(i)
	return sc
}

// SetNillableFirstBrokeragePrice sets the "first_brokerage_price" field if the given value is not nil.
func (sc *SkuCreate) SetNillableFirstBrokeragePrice(i *int32) *SkuCreate {
	if i != nil {
		sc.SetFirstBrokeragePrice(*i)
	}
	return sc
}

// SetSecondBrokeragePrice sets the "second_brokerage_price" field.
func (sc *SkuCreate) SetSecondBrokeragePrice(f float64) *SkuCreate {
	sc.mutation.SetSecondBrokeragePrice(f)
	return sc
}

// SetNillableSecondBrokeragePrice sets the "second_brokerage_price" field if the given value is not nil.
func (sc *SkuCreate) SetNillableSecondBrokeragePrice(f *float64) *SkuCreate {
	if f != nil {
		sc.SetSecondBrokeragePrice(*f)
	}
	return sc
}

// SetSalesCount sets the "sales_count" field.
func (sc *SkuCreate) SetSalesCount(i int32) *SkuCreate {
	sc.mutation.SetSalesCount(i)
	return sc
}

// SetNillableSalesCount sets the "sales_count" field if the given value is not nil.
func (sc *SkuCreate) SetNillableSalesCount(i *int32) *SkuCreate {
	if i != nil {
		sc.SetSalesCount(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SkuCreate) SetID(u uint64) *SkuCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetSpusID sets the "spus" edge to the Spu entity by ID.
func (sc *SkuCreate) SetSpusID(id uint64) *SkuCreate {
	sc.mutation.SetSpusID(id)
	return sc
}

// SetNillableSpusID sets the "spus" edge to the Spu entity by ID if the given value is not nil.
func (sc *SkuCreate) SetNillableSpusID(id *uint64) *SkuCreate {
	if id != nil {
		sc = sc.SetSpusID(*id)
	}
	return sc
}

// SetSpus sets the "spus" edge to the Spu entity.
func (sc *SkuCreate) SetSpus(s *Spu) *SkuCreate {
	return sc.SetSpusID(s.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (sc *SkuCreate) AddCommentIDs(ids ...uint64) *SkuCreate {
	sc.mutation.AddCommentIDs(ids...)
	return sc
}

// AddComments adds the "comments" edges to the Comment entity.
func (sc *SkuCreate) AddComments(c ...*Comment) *SkuCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddCommentIDs(ids...)
}

// Mutation returns the SkuMutation object of the builder.
func (sc *SkuCreate) Mutation() *SkuMutation {
	return sc.mutation
}

// Save creates the Sku in the database.
func (sc *SkuCreate) Save(ctx context.Context) (*Sku, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SkuCreate) SaveX(ctx context.Context) *Sku {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SkuCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SkuCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SkuCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if sku.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized sku.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := sku.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if sku.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sku.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sku.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SkuCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Sku.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Sku.updated_at"`)}
	}
	if _, ok := sc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Sku.price"`)}
	}
	if _, ok := sc.mutation.CostPrice(); !ok {
		return &ValidationError{Name: "cost_price", err: errors.New(`ent: missing required field "Sku.cost_price"`)}
	}
	if _, ok := sc.mutation.PicURL(); !ok {
		return &ValidationError{Name: "pic_url", err: errors.New(`ent: missing required field "Sku.pic_url"`)}
	}
	return nil
}

func (sc *SkuCreate) sqlSave(ctx context.Context) (*Sku, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SkuCreate) createSpec() (*Sku, *sqlgraph.CreateSpec) {
	var (
		_node = &Sku{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sku.Table, sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(sku.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(sku.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(sku.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.Properties(); ok {
		_spec.SetField(sku.FieldProperties, field.TypeJSON, value)
		_node.Properties = value
	}
	if value, ok := sc.mutation.Price(); ok {
		_spec.SetField(sku.FieldPrice, field.TypeInt32, value)
		_node.Price = value
	}
	if value, ok := sc.mutation.MarketPrice(); ok {
		_spec.SetField(sku.FieldMarketPrice, field.TypeInt32, value)
		_node.MarketPrice = value
	}
	if value, ok := sc.mutation.CostPrice(); ok {
		_spec.SetField(sku.FieldCostPrice, field.TypeInt32, value)
		_node.CostPrice = value
	}
	if value, ok := sc.mutation.BarCode(); ok {
		_spec.SetField(sku.FieldBarCode, field.TypeString, value)
		_node.BarCode = value
	}
	if value, ok := sc.mutation.PicURL(); ok {
		_spec.SetField(sku.FieldPicURL, field.TypeString, value)
		_node.PicURL = value
	}
	if value, ok := sc.mutation.Stock(); ok {
		_spec.SetField(sku.FieldStock, field.TypeInt32, value)
		_node.Stock = value
	}
	if value, ok := sc.mutation.Weight(); ok {
		_spec.SetField(sku.FieldWeight, field.TypeFloat64, value)
		_node.Weight = value
	}
	if value, ok := sc.mutation.Volume(); ok {
		_spec.SetField(sku.FieldVolume, field.TypeFloat64, value)
		_node.Volume = value
	}
	if value, ok := sc.mutation.FirstBrokeragePrice(); ok {
		_spec.SetField(sku.FieldFirstBrokeragePrice, field.TypeInt32, value)
		_node.FirstBrokeragePrice = value
	}
	if value, ok := sc.mutation.SecondBrokeragePrice(); ok {
		_spec.SetField(sku.FieldSecondBrokeragePrice, field.TypeFloat64, value)
		_node.SecondBrokeragePrice = value
	}
	if value, ok := sc.mutation.SalesCount(); ok {
		_spec.SetField(sku.FieldSalesCount, field.TypeInt32, value)
		_node.SalesCount = value
	}
	if nodes := sc.mutation.SpusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sku.SpusTable,
			Columns: []string{sku.SpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SpuID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sku.CommentsTable,
			Columns: []string{sku.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SkuCreateBulk is the builder for creating many Sku entities in bulk.
type SkuCreateBulk struct {
	config
	err      error
	builders []*SkuCreate
}

// Save creates the Sku entities in the database.
func (scb *SkuCreateBulk) Save(ctx context.Context) ([]*Sku, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sku, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SkuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SkuCreateBulk) SaveX(ctx context.Context) []*Sku {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SkuCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SkuCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
