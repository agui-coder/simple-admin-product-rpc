// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"
	"github.com/agui-coder/simple-admin-product-rpc/ent"
	"github.com/agui-coder/simple-admin-product-rpc/ent/brand"
	"github.com/agui-coder/simple-admin-product-rpc/ent/category"
	"github.com/agui-coder/simple-admin-product-rpc/ent/comment"
	"github.com/agui-coder/simple-admin-product-rpc/ent/predicate"
	"github.com/agui-coder/simple-admin-product-rpc/ent/property"
	"github.com/agui-coder/simple-admin-product-rpc/ent/propertyvalue"
	"github.com/agui-coder/simple-admin-product-rpc/ent/sku"
	"github.com/agui-coder/simple-admin-product-rpc/ent/spu"

	"entgo.io/ent/dialect/sql"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The BrandFunc type is an adapter to allow the use of ordinary function as a Querier.
type BrandFunc func(context.Context, *ent.BrandQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BrandFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BrandQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BrandQuery", q)
}

// The TraverseBrand type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBrand func(context.Context, *ent.BrandQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBrand) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBrand) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BrandQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BrandQuery", q)
}

// The CategoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type CategoryFunc func(context.Context, *ent.CategoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CategoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CategoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CategoryQuery", q)
}

// The TraverseCategory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCategory func(context.Context, *ent.CategoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCategory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCategory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CategoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CategoryQuery", q)
}

// The CommentFunc type is an adapter to allow the use of ordinary function as a Querier.
type CommentFunc func(context.Context, *ent.CommentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CommentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CommentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CommentQuery", q)
}

// The TraverseComment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseComment func(context.Context, *ent.CommentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseComment) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseComment) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CommentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CommentQuery", q)
}

// The PropertyFunc type is an adapter to allow the use of ordinary function as a Querier.
type PropertyFunc func(context.Context, *ent.PropertyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PropertyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PropertyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PropertyQuery", q)
}

// The TraverseProperty type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProperty func(context.Context, *ent.PropertyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProperty) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProperty) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PropertyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PropertyQuery", q)
}

// The PropertyValueFunc type is an adapter to allow the use of ordinary function as a Querier.
type PropertyValueFunc func(context.Context, *ent.PropertyValueQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PropertyValueFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PropertyValueQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PropertyValueQuery", q)
}

// The TraversePropertyValue type is an adapter to allow the use of ordinary function as Traverser.
type TraversePropertyValue func(context.Context, *ent.PropertyValueQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePropertyValue) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePropertyValue) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PropertyValueQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PropertyValueQuery", q)
}

// The SkuFunc type is an adapter to allow the use of ordinary function as a Querier.
type SkuFunc func(context.Context, *ent.SkuQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SkuFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SkuQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SkuQuery", q)
}

// The TraverseSku type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSku func(context.Context, *ent.SkuQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSku) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSku) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SkuQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SkuQuery", q)
}

// The SpuFunc type is an adapter to allow the use of ordinary function as a Querier.
type SpuFunc func(context.Context, *ent.SpuQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SpuFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SpuQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SpuQuery", q)
}

// The TraverseSpu type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSpu func(context.Context, *ent.SpuQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSpu) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSpu) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SpuQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SpuQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.BrandQuery:
		return &query[*ent.BrandQuery, predicate.Brand, brand.OrderOption]{typ: ent.TypeBrand, tq: q}, nil
	case *ent.CategoryQuery:
		return &query[*ent.CategoryQuery, predicate.Category, category.OrderOption]{typ: ent.TypeCategory, tq: q}, nil
	case *ent.CommentQuery:
		return &query[*ent.CommentQuery, predicate.Comment, comment.OrderOption]{typ: ent.TypeComment, tq: q}, nil
	case *ent.PropertyQuery:
		return &query[*ent.PropertyQuery, predicate.Property, property.OrderOption]{typ: ent.TypeProperty, tq: q}, nil
	case *ent.PropertyValueQuery:
		return &query[*ent.PropertyValueQuery, predicate.PropertyValue, propertyvalue.OrderOption]{typ: ent.TypePropertyValue, tq: q}, nil
	case *ent.SkuQuery:
		return &query[*ent.SkuQuery, predicate.Sku, sku.OrderOption]{typ: ent.TypeSku, tq: q}, nil
	case *ent.SpuQuery:
		return &query[*ent.SpuQuery, predicate.Spu, spu.OrderOption]{typ: ent.TypeSpu, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
