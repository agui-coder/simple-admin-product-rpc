// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/agui-coder/simple-admin-product-rpc/ent/comment"
	"github.com/agui-coder/simple-admin-product-rpc/ent/predicate"
	entType "github.com/agui-coder/simple-admin-product-rpc/ent/schema/enttype"
	"github.com/agui-coder/simple-admin-product-rpc/ent/sku"
	"github.com/agui-coder/simple-admin-product-rpc/ent/spu"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// SkuUpdate is the builder for updating Sku entities.
type SkuUpdate struct {
	config
	hooks    []Hook
	mutation *SkuMutation
}

// Where appends a list predicates to the SkuUpdate builder.
func (su *SkuUpdate) Where(ps ...predicate.Sku) *SkuUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SkuUpdate) SetUpdatedAt(t time.Time) *SkuUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SkuUpdate) SetDeletedAt(t time.Time) *SkuUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SkuUpdate) SetNillableDeletedAt(t *time.Time) *SkuUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SkuUpdate) ClearDeletedAt() *SkuUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetSpuID sets the "spu_id" field.
func (su *SkuUpdate) SetSpuID(u uint64) *SkuUpdate {
	su.mutation.SetSpuID(u)
	return su
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (su *SkuUpdate) SetNillableSpuID(u *uint64) *SkuUpdate {
	if u != nil {
		su.SetSpuID(*u)
	}
	return su
}

// ClearSpuID clears the value of the "spu_id" field.
func (su *SkuUpdate) ClearSpuID() *SkuUpdate {
	su.mutation.ClearSpuID()
	return su
}

// SetProperties sets the "properties" field.
func (su *SkuUpdate) SetProperties(etp []entType.SkuProperty) *SkuUpdate {
	su.mutation.SetProperties(etp)
	return su
}

// AppendProperties appends etp to the "properties" field.
func (su *SkuUpdate) AppendProperties(etp []entType.SkuProperty) *SkuUpdate {
	su.mutation.AppendProperties(etp)
	return su
}

// ClearProperties clears the value of the "properties" field.
func (su *SkuUpdate) ClearProperties() *SkuUpdate {
	su.mutation.ClearProperties()
	return su
}

// SetPrice sets the "price" field.
func (su *SkuUpdate) SetPrice(i int32) *SkuUpdate {
	su.mutation.ResetPrice()
	su.mutation.SetPrice(i)
	return su
}

// AddPrice adds i to the "price" field.
func (su *SkuUpdate) AddPrice(i int32) *SkuUpdate {
	su.mutation.AddPrice(i)
	return su
}

// SetMarketPrice sets the "market_price" field.
func (su *SkuUpdate) SetMarketPrice(i int32) *SkuUpdate {
	su.mutation.ResetMarketPrice()
	su.mutation.SetMarketPrice(i)
	return su
}

// SetNillableMarketPrice sets the "market_price" field if the given value is not nil.
func (su *SkuUpdate) SetNillableMarketPrice(i *int32) *SkuUpdate {
	if i != nil {
		su.SetMarketPrice(*i)
	}
	return su
}

// AddMarketPrice adds i to the "market_price" field.
func (su *SkuUpdate) AddMarketPrice(i int32) *SkuUpdate {
	su.mutation.AddMarketPrice(i)
	return su
}

// ClearMarketPrice clears the value of the "market_price" field.
func (su *SkuUpdate) ClearMarketPrice() *SkuUpdate {
	su.mutation.ClearMarketPrice()
	return su
}

// SetCostPrice sets the "cost_price" field.
func (su *SkuUpdate) SetCostPrice(i int32) *SkuUpdate {
	su.mutation.ResetCostPrice()
	su.mutation.SetCostPrice(i)
	return su
}

// AddCostPrice adds i to the "cost_price" field.
func (su *SkuUpdate) AddCostPrice(i int32) *SkuUpdate {
	su.mutation.AddCostPrice(i)
	return su
}

// SetBarCode sets the "bar_code" field.
func (su *SkuUpdate) SetBarCode(s string) *SkuUpdate {
	su.mutation.SetBarCode(s)
	return su
}

// SetNillableBarCode sets the "bar_code" field if the given value is not nil.
func (su *SkuUpdate) SetNillableBarCode(s *string) *SkuUpdate {
	if s != nil {
		su.SetBarCode(*s)
	}
	return su
}

// ClearBarCode clears the value of the "bar_code" field.
func (su *SkuUpdate) ClearBarCode() *SkuUpdate {
	su.mutation.ClearBarCode()
	return su
}

// SetPicURL sets the "pic_url" field.
func (su *SkuUpdate) SetPicURL(s string) *SkuUpdate {
	su.mutation.SetPicURL(s)
	return su
}

// SetStock sets the "stock" field.
func (su *SkuUpdate) SetStock(i int32) *SkuUpdate {
	su.mutation.ResetStock()
	su.mutation.SetStock(i)
	return su
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (su *SkuUpdate) SetNillableStock(i *int32) *SkuUpdate {
	if i != nil {
		su.SetStock(*i)
	}
	return su
}

// AddStock adds i to the "stock" field.
func (su *SkuUpdate) AddStock(i int32) *SkuUpdate {
	su.mutation.AddStock(i)
	return su
}

// ClearStock clears the value of the "stock" field.
func (su *SkuUpdate) ClearStock() *SkuUpdate {
	su.mutation.ClearStock()
	return su
}

// SetWeight sets the "weight" field.
func (su *SkuUpdate) SetWeight(f float64) *SkuUpdate {
	su.mutation.ResetWeight()
	su.mutation.SetWeight(f)
	return su
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (su *SkuUpdate) SetNillableWeight(f *float64) *SkuUpdate {
	if f != nil {
		su.SetWeight(*f)
	}
	return su
}

// AddWeight adds f to the "weight" field.
func (su *SkuUpdate) AddWeight(f float64) *SkuUpdate {
	su.mutation.AddWeight(f)
	return su
}

// ClearWeight clears the value of the "weight" field.
func (su *SkuUpdate) ClearWeight() *SkuUpdate {
	su.mutation.ClearWeight()
	return su
}

// SetVolume sets the "volume" field.
func (su *SkuUpdate) SetVolume(f float64) *SkuUpdate {
	su.mutation.ResetVolume()
	su.mutation.SetVolume(f)
	return su
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (su *SkuUpdate) SetNillableVolume(f *float64) *SkuUpdate {
	if f != nil {
		su.SetVolume(*f)
	}
	return su
}

// AddVolume adds f to the "volume" field.
func (su *SkuUpdate) AddVolume(f float64) *SkuUpdate {
	su.mutation.AddVolume(f)
	return su
}

// ClearVolume clears the value of the "volume" field.
func (su *SkuUpdate) ClearVolume() *SkuUpdate {
	su.mutation.ClearVolume()
	return su
}

// SetFirstBrokeragePrice sets the "first_brokerage_price" field.
func (su *SkuUpdate) SetFirstBrokeragePrice(i int32) *SkuUpdate {
	su.mutation.ResetFirstBrokeragePrice()
	su.mutation.SetFirstBrokeragePrice(i)
	return su
}

// SetNillableFirstBrokeragePrice sets the "first_brokerage_price" field if the given value is not nil.
func (su *SkuUpdate) SetNillableFirstBrokeragePrice(i *int32) *SkuUpdate {
	if i != nil {
		su.SetFirstBrokeragePrice(*i)
	}
	return su
}

// AddFirstBrokeragePrice adds i to the "first_brokerage_price" field.
func (su *SkuUpdate) AddFirstBrokeragePrice(i int32) *SkuUpdate {
	su.mutation.AddFirstBrokeragePrice(i)
	return su
}

// ClearFirstBrokeragePrice clears the value of the "first_brokerage_price" field.
func (su *SkuUpdate) ClearFirstBrokeragePrice() *SkuUpdate {
	su.mutation.ClearFirstBrokeragePrice()
	return su
}

// SetSecondBrokeragePrice sets the "second_brokerage_price" field.
func (su *SkuUpdate) SetSecondBrokeragePrice(f float64) *SkuUpdate {
	su.mutation.ResetSecondBrokeragePrice()
	su.mutation.SetSecondBrokeragePrice(f)
	return su
}

// SetNillableSecondBrokeragePrice sets the "second_brokerage_price" field if the given value is not nil.
func (su *SkuUpdate) SetNillableSecondBrokeragePrice(f *float64) *SkuUpdate {
	if f != nil {
		su.SetSecondBrokeragePrice(*f)
	}
	return su
}

// AddSecondBrokeragePrice adds f to the "second_brokerage_price" field.
func (su *SkuUpdate) AddSecondBrokeragePrice(f float64) *SkuUpdate {
	su.mutation.AddSecondBrokeragePrice(f)
	return su
}

// ClearSecondBrokeragePrice clears the value of the "second_brokerage_price" field.
func (su *SkuUpdate) ClearSecondBrokeragePrice() *SkuUpdate {
	su.mutation.ClearSecondBrokeragePrice()
	return su
}

// SetSalesCount sets the "sales_count" field.
func (su *SkuUpdate) SetSalesCount(i int32) *SkuUpdate {
	su.mutation.ResetSalesCount()
	su.mutation.SetSalesCount(i)
	return su
}

// SetNillableSalesCount sets the "sales_count" field if the given value is not nil.
func (su *SkuUpdate) SetNillableSalesCount(i *int32) *SkuUpdate {
	if i != nil {
		su.SetSalesCount(*i)
	}
	return su
}

// AddSalesCount adds i to the "sales_count" field.
func (su *SkuUpdate) AddSalesCount(i int32) *SkuUpdate {
	su.mutation.AddSalesCount(i)
	return su
}

// ClearSalesCount clears the value of the "sales_count" field.
func (su *SkuUpdate) ClearSalesCount() *SkuUpdate {
	su.mutation.ClearSalesCount()
	return su
}

// SetSpusID sets the "spus" edge to the Spu entity by ID.
func (su *SkuUpdate) SetSpusID(id uint64) *SkuUpdate {
	su.mutation.SetSpusID(id)
	return su
}

// SetNillableSpusID sets the "spus" edge to the Spu entity by ID if the given value is not nil.
func (su *SkuUpdate) SetNillableSpusID(id *uint64) *SkuUpdate {
	if id != nil {
		su = su.SetSpusID(*id)
	}
	return su
}

// SetSpus sets the "spus" edge to the Spu entity.
func (su *SkuUpdate) SetSpus(s *Spu) *SkuUpdate {
	return su.SetSpusID(s.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (su *SkuUpdate) AddCommentIDs(ids ...uint64) *SkuUpdate {
	su.mutation.AddCommentIDs(ids...)
	return su
}

// AddComments adds the "comments" edges to the Comment entity.
func (su *SkuUpdate) AddComments(c ...*Comment) *SkuUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCommentIDs(ids...)
}

// Mutation returns the SkuMutation object of the builder.
func (su *SkuUpdate) Mutation() *SkuMutation {
	return su.mutation
}

// ClearSpus clears the "spus" edge to the Spu entity.
func (su *SkuUpdate) ClearSpus() *SkuUpdate {
	su.mutation.ClearSpus()
	return su
}

// ClearComments clears all "comments" edges to the Comment entity.
func (su *SkuUpdate) ClearComments() *SkuUpdate {
	su.mutation.ClearComments()
	return su
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (su *SkuUpdate) RemoveCommentIDs(ids ...uint64) *SkuUpdate {
	su.mutation.RemoveCommentIDs(ids...)
	return su
}

// RemoveComments removes "comments" edges to Comment entities.
func (su *SkuUpdate) RemoveComments(c ...*Comment) *SkuUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCommentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SkuUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SkuUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SkuUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SkuUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SkuUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if sku.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sku.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sku.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (su *SkuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sku.Table, sku.Columns, sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(sku.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(sku.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(sku.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.Properties(); ok {
		_spec.SetField(sku.FieldProperties, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedProperties(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sku.FieldProperties, value)
		})
	}
	if su.mutation.PropertiesCleared() {
		_spec.ClearField(sku.FieldProperties, field.TypeJSON)
	}
	if value, ok := su.mutation.Price(); ok {
		_spec.SetField(sku.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedPrice(); ok {
		_spec.AddField(sku.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := su.mutation.MarketPrice(); ok {
		_spec.SetField(sku.FieldMarketPrice, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedMarketPrice(); ok {
		_spec.AddField(sku.FieldMarketPrice, field.TypeInt32, value)
	}
	if su.mutation.MarketPriceCleared() {
		_spec.ClearField(sku.FieldMarketPrice, field.TypeInt32)
	}
	if value, ok := su.mutation.CostPrice(); ok {
		_spec.SetField(sku.FieldCostPrice, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedCostPrice(); ok {
		_spec.AddField(sku.FieldCostPrice, field.TypeInt32, value)
	}
	if value, ok := su.mutation.BarCode(); ok {
		_spec.SetField(sku.FieldBarCode, field.TypeString, value)
	}
	if su.mutation.BarCodeCleared() {
		_spec.ClearField(sku.FieldBarCode, field.TypeString)
	}
	if value, ok := su.mutation.PicURL(); ok {
		_spec.SetField(sku.FieldPicURL, field.TypeString, value)
	}
	if value, ok := su.mutation.Stock(); ok {
		_spec.SetField(sku.FieldStock, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedStock(); ok {
		_spec.AddField(sku.FieldStock, field.TypeInt32, value)
	}
	if su.mutation.StockCleared() {
		_spec.ClearField(sku.FieldStock, field.TypeInt32)
	}
	if value, ok := su.mutation.Weight(); ok {
		_spec.SetField(sku.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedWeight(); ok {
		_spec.AddField(sku.FieldWeight, field.TypeFloat64, value)
	}
	if su.mutation.WeightCleared() {
		_spec.ClearField(sku.FieldWeight, field.TypeFloat64)
	}
	if value, ok := su.mutation.Volume(); ok {
		_spec.SetField(sku.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedVolume(); ok {
		_spec.AddField(sku.FieldVolume, field.TypeFloat64, value)
	}
	if su.mutation.VolumeCleared() {
		_spec.ClearField(sku.FieldVolume, field.TypeFloat64)
	}
	if value, ok := su.mutation.FirstBrokeragePrice(); ok {
		_spec.SetField(sku.FieldFirstBrokeragePrice, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedFirstBrokeragePrice(); ok {
		_spec.AddField(sku.FieldFirstBrokeragePrice, field.TypeInt32, value)
	}
	if su.mutation.FirstBrokeragePriceCleared() {
		_spec.ClearField(sku.FieldFirstBrokeragePrice, field.TypeInt32)
	}
	if value, ok := su.mutation.SecondBrokeragePrice(); ok {
		_spec.SetField(sku.FieldSecondBrokeragePrice, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedSecondBrokeragePrice(); ok {
		_spec.AddField(sku.FieldSecondBrokeragePrice, field.TypeFloat64, value)
	}
	if su.mutation.SecondBrokeragePriceCleared() {
		_spec.ClearField(sku.FieldSecondBrokeragePrice, field.TypeFloat64)
	}
	if value, ok := su.mutation.SalesCount(); ok {
		_spec.SetField(sku.FieldSalesCount, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedSalesCount(); ok {
		_spec.AddField(sku.FieldSalesCount, field.TypeInt32, value)
	}
	if su.mutation.SalesCountCleared() {
		_spec.ClearField(sku.FieldSalesCount, field.TypeInt32)
	}
	if su.mutation.SpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sku.SpusTable,
			Columns: []string{sku.SpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SpusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sku.SpusTable,
			Columns: []string{sku.SpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sku.CommentsTable,
			Columns: []string{sku.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !su.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sku.CommentsTable,
			Columns: []string{sku.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sku.CommentsTable,
			Columns: []string{sku.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sku.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SkuUpdateOne is the builder for updating a single Sku entity.
type SkuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SkuMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SkuUpdateOne) SetUpdatedAt(t time.Time) *SkuUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SkuUpdateOne) SetDeletedAt(t time.Time) *SkuUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SkuUpdateOne) SetNillableDeletedAt(t *time.Time) *SkuUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SkuUpdateOne) ClearDeletedAt() *SkuUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetSpuID sets the "spu_id" field.
func (suo *SkuUpdateOne) SetSpuID(u uint64) *SkuUpdateOne {
	suo.mutation.SetSpuID(u)
	return suo
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (suo *SkuUpdateOne) SetNillableSpuID(u *uint64) *SkuUpdateOne {
	if u != nil {
		suo.SetSpuID(*u)
	}
	return suo
}

// ClearSpuID clears the value of the "spu_id" field.
func (suo *SkuUpdateOne) ClearSpuID() *SkuUpdateOne {
	suo.mutation.ClearSpuID()
	return suo
}

// SetProperties sets the "properties" field.
func (suo *SkuUpdateOne) SetProperties(etp []entType.SkuProperty) *SkuUpdateOne {
	suo.mutation.SetProperties(etp)
	return suo
}

// AppendProperties appends etp to the "properties" field.
func (suo *SkuUpdateOne) AppendProperties(etp []entType.SkuProperty) *SkuUpdateOne {
	suo.mutation.AppendProperties(etp)
	return suo
}

// ClearProperties clears the value of the "properties" field.
func (suo *SkuUpdateOne) ClearProperties() *SkuUpdateOne {
	suo.mutation.ClearProperties()
	return suo
}

// SetPrice sets the "price" field.
func (suo *SkuUpdateOne) SetPrice(i int32) *SkuUpdateOne {
	suo.mutation.ResetPrice()
	suo.mutation.SetPrice(i)
	return suo
}

// AddPrice adds i to the "price" field.
func (suo *SkuUpdateOne) AddPrice(i int32) *SkuUpdateOne {
	suo.mutation.AddPrice(i)
	return suo
}

// SetMarketPrice sets the "market_price" field.
func (suo *SkuUpdateOne) SetMarketPrice(i int32) *SkuUpdateOne {
	suo.mutation.ResetMarketPrice()
	suo.mutation.SetMarketPrice(i)
	return suo
}

// SetNillableMarketPrice sets the "market_price" field if the given value is not nil.
func (suo *SkuUpdateOne) SetNillableMarketPrice(i *int32) *SkuUpdateOne {
	if i != nil {
		suo.SetMarketPrice(*i)
	}
	return suo
}

// AddMarketPrice adds i to the "market_price" field.
func (suo *SkuUpdateOne) AddMarketPrice(i int32) *SkuUpdateOne {
	suo.mutation.AddMarketPrice(i)
	return suo
}

// ClearMarketPrice clears the value of the "market_price" field.
func (suo *SkuUpdateOne) ClearMarketPrice() *SkuUpdateOne {
	suo.mutation.ClearMarketPrice()
	return suo
}

// SetCostPrice sets the "cost_price" field.
func (suo *SkuUpdateOne) SetCostPrice(i int32) *SkuUpdateOne {
	suo.mutation.ResetCostPrice()
	suo.mutation.SetCostPrice(i)
	return suo
}

// AddCostPrice adds i to the "cost_price" field.
func (suo *SkuUpdateOne) AddCostPrice(i int32) *SkuUpdateOne {
	suo.mutation.AddCostPrice(i)
	return suo
}

// SetBarCode sets the "bar_code" field.
func (suo *SkuUpdateOne) SetBarCode(s string) *SkuUpdateOne {
	suo.mutation.SetBarCode(s)
	return suo
}

// SetNillableBarCode sets the "bar_code" field if the given value is not nil.
func (suo *SkuUpdateOne) SetNillableBarCode(s *string) *SkuUpdateOne {
	if s != nil {
		suo.SetBarCode(*s)
	}
	return suo
}

// ClearBarCode clears the value of the "bar_code" field.
func (suo *SkuUpdateOne) ClearBarCode() *SkuUpdateOne {
	suo.mutation.ClearBarCode()
	return suo
}

// SetPicURL sets the "pic_url" field.
func (suo *SkuUpdateOne) SetPicURL(s string) *SkuUpdateOne {
	suo.mutation.SetPicURL(s)
	return suo
}

// SetStock sets the "stock" field.
func (suo *SkuUpdateOne) SetStock(i int32) *SkuUpdateOne {
	suo.mutation.ResetStock()
	suo.mutation.SetStock(i)
	return suo
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (suo *SkuUpdateOne) SetNillableStock(i *int32) *SkuUpdateOne {
	if i != nil {
		suo.SetStock(*i)
	}
	return suo
}

// AddStock adds i to the "stock" field.
func (suo *SkuUpdateOne) AddStock(i int32) *SkuUpdateOne {
	suo.mutation.AddStock(i)
	return suo
}

// ClearStock clears the value of the "stock" field.
func (suo *SkuUpdateOne) ClearStock() *SkuUpdateOne {
	suo.mutation.ClearStock()
	return suo
}

// SetWeight sets the "weight" field.
func (suo *SkuUpdateOne) SetWeight(f float64) *SkuUpdateOne {
	suo.mutation.ResetWeight()
	suo.mutation.SetWeight(f)
	return suo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (suo *SkuUpdateOne) SetNillableWeight(f *float64) *SkuUpdateOne {
	if f != nil {
		suo.SetWeight(*f)
	}
	return suo
}

// AddWeight adds f to the "weight" field.
func (suo *SkuUpdateOne) AddWeight(f float64) *SkuUpdateOne {
	suo.mutation.AddWeight(f)
	return suo
}

// ClearWeight clears the value of the "weight" field.
func (suo *SkuUpdateOne) ClearWeight() *SkuUpdateOne {
	suo.mutation.ClearWeight()
	return suo
}

// SetVolume sets the "volume" field.
func (suo *SkuUpdateOne) SetVolume(f float64) *SkuUpdateOne {
	suo.mutation.ResetVolume()
	suo.mutation.SetVolume(f)
	return suo
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (suo *SkuUpdateOne) SetNillableVolume(f *float64) *SkuUpdateOne {
	if f != nil {
		suo.SetVolume(*f)
	}
	return suo
}

// AddVolume adds f to the "volume" field.
func (suo *SkuUpdateOne) AddVolume(f float64) *SkuUpdateOne {
	suo.mutation.AddVolume(f)
	return suo
}

// ClearVolume clears the value of the "volume" field.
func (suo *SkuUpdateOne) ClearVolume() *SkuUpdateOne {
	suo.mutation.ClearVolume()
	return suo
}

// SetFirstBrokeragePrice sets the "first_brokerage_price" field.
func (suo *SkuUpdateOne) SetFirstBrokeragePrice(i int32) *SkuUpdateOne {
	suo.mutation.ResetFirstBrokeragePrice()
	suo.mutation.SetFirstBrokeragePrice(i)
	return suo
}

// SetNillableFirstBrokeragePrice sets the "first_brokerage_price" field if the given value is not nil.
func (suo *SkuUpdateOne) SetNillableFirstBrokeragePrice(i *int32) *SkuUpdateOne {
	if i != nil {
		suo.SetFirstBrokeragePrice(*i)
	}
	return suo
}

// AddFirstBrokeragePrice adds i to the "first_brokerage_price" field.
func (suo *SkuUpdateOne) AddFirstBrokeragePrice(i int32) *SkuUpdateOne {
	suo.mutation.AddFirstBrokeragePrice(i)
	return suo
}

// ClearFirstBrokeragePrice clears the value of the "first_brokerage_price" field.
func (suo *SkuUpdateOne) ClearFirstBrokeragePrice() *SkuUpdateOne {
	suo.mutation.ClearFirstBrokeragePrice()
	return suo
}

// SetSecondBrokeragePrice sets the "second_brokerage_price" field.
func (suo *SkuUpdateOne) SetSecondBrokeragePrice(f float64) *SkuUpdateOne {
	suo.mutation.ResetSecondBrokeragePrice()
	suo.mutation.SetSecondBrokeragePrice(f)
	return suo
}

// SetNillableSecondBrokeragePrice sets the "second_brokerage_price" field if the given value is not nil.
func (suo *SkuUpdateOne) SetNillableSecondBrokeragePrice(f *float64) *SkuUpdateOne {
	if f != nil {
		suo.SetSecondBrokeragePrice(*f)
	}
	return suo
}

// AddSecondBrokeragePrice adds f to the "second_brokerage_price" field.
func (suo *SkuUpdateOne) AddSecondBrokeragePrice(f float64) *SkuUpdateOne {
	suo.mutation.AddSecondBrokeragePrice(f)
	return suo
}

// ClearSecondBrokeragePrice clears the value of the "second_brokerage_price" field.
func (suo *SkuUpdateOne) ClearSecondBrokeragePrice() *SkuUpdateOne {
	suo.mutation.ClearSecondBrokeragePrice()
	return suo
}

// SetSalesCount sets the "sales_count" field.
func (suo *SkuUpdateOne) SetSalesCount(i int32) *SkuUpdateOne {
	suo.mutation.ResetSalesCount()
	suo.mutation.SetSalesCount(i)
	return suo
}

// SetNillableSalesCount sets the "sales_count" field if the given value is not nil.
func (suo *SkuUpdateOne) SetNillableSalesCount(i *int32) *SkuUpdateOne {
	if i != nil {
		suo.SetSalesCount(*i)
	}
	return suo
}

// AddSalesCount adds i to the "sales_count" field.
func (suo *SkuUpdateOne) AddSalesCount(i int32) *SkuUpdateOne {
	suo.mutation.AddSalesCount(i)
	return suo
}

// ClearSalesCount clears the value of the "sales_count" field.
func (suo *SkuUpdateOne) ClearSalesCount() *SkuUpdateOne {
	suo.mutation.ClearSalesCount()
	return suo
}

// SetSpusID sets the "spus" edge to the Spu entity by ID.
func (suo *SkuUpdateOne) SetSpusID(id uint64) *SkuUpdateOne {
	suo.mutation.SetSpusID(id)
	return suo
}

// SetNillableSpusID sets the "spus" edge to the Spu entity by ID if the given value is not nil.
func (suo *SkuUpdateOne) SetNillableSpusID(id *uint64) *SkuUpdateOne {
	if id != nil {
		suo = suo.SetSpusID(*id)
	}
	return suo
}

// SetSpus sets the "spus" edge to the Spu entity.
func (suo *SkuUpdateOne) SetSpus(s *Spu) *SkuUpdateOne {
	return suo.SetSpusID(s.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (suo *SkuUpdateOne) AddCommentIDs(ids ...uint64) *SkuUpdateOne {
	suo.mutation.AddCommentIDs(ids...)
	return suo
}

// AddComments adds the "comments" edges to the Comment entity.
func (suo *SkuUpdateOne) AddComments(c ...*Comment) *SkuUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCommentIDs(ids...)
}

// Mutation returns the SkuMutation object of the builder.
func (suo *SkuUpdateOne) Mutation() *SkuMutation {
	return suo.mutation
}

// ClearSpus clears the "spus" edge to the Spu entity.
func (suo *SkuUpdateOne) ClearSpus() *SkuUpdateOne {
	suo.mutation.ClearSpus()
	return suo
}

// ClearComments clears all "comments" edges to the Comment entity.
func (suo *SkuUpdateOne) ClearComments() *SkuUpdateOne {
	suo.mutation.ClearComments()
	return suo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (suo *SkuUpdateOne) RemoveCommentIDs(ids ...uint64) *SkuUpdateOne {
	suo.mutation.RemoveCommentIDs(ids...)
	return suo
}

// RemoveComments removes "comments" edges to Comment entities.
func (suo *SkuUpdateOne) RemoveComments(c ...*Comment) *SkuUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCommentIDs(ids...)
}

// Where appends a list predicates to the SkuUpdate builder.
func (suo *SkuUpdateOne) Where(ps ...predicate.Sku) *SkuUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SkuUpdateOne) Select(field string, fields ...string) *SkuUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sku entity.
func (suo *SkuUpdateOne) Save(ctx context.Context) (*Sku, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SkuUpdateOne) SaveX(ctx context.Context) *Sku {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SkuUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SkuUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SkuUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if sku.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sku.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sku.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (suo *SkuUpdateOne) sqlSave(ctx context.Context) (_node *Sku, err error) {
	_spec := sqlgraph.NewUpdateSpec(sku.Table, sku.Columns, sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sku.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sku.FieldID)
		for _, f := range fields {
			if !sku.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sku.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(sku.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(sku.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(sku.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Properties(); ok {
		_spec.SetField(sku.FieldProperties, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedProperties(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sku.FieldProperties, value)
		})
	}
	if suo.mutation.PropertiesCleared() {
		_spec.ClearField(sku.FieldProperties, field.TypeJSON)
	}
	if value, ok := suo.mutation.Price(); ok {
		_spec.SetField(sku.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedPrice(); ok {
		_spec.AddField(sku.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.MarketPrice(); ok {
		_spec.SetField(sku.FieldMarketPrice, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedMarketPrice(); ok {
		_spec.AddField(sku.FieldMarketPrice, field.TypeInt32, value)
	}
	if suo.mutation.MarketPriceCleared() {
		_spec.ClearField(sku.FieldMarketPrice, field.TypeInt32)
	}
	if value, ok := suo.mutation.CostPrice(); ok {
		_spec.SetField(sku.FieldCostPrice, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedCostPrice(); ok {
		_spec.AddField(sku.FieldCostPrice, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.BarCode(); ok {
		_spec.SetField(sku.FieldBarCode, field.TypeString, value)
	}
	if suo.mutation.BarCodeCleared() {
		_spec.ClearField(sku.FieldBarCode, field.TypeString)
	}
	if value, ok := suo.mutation.PicURL(); ok {
		_spec.SetField(sku.FieldPicURL, field.TypeString, value)
	}
	if value, ok := suo.mutation.Stock(); ok {
		_spec.SetField(sku.FieldStock, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedStock(); ok {
		_spec.AddField(sku.FieldStock, field.TypeInt32, value)
	}
	if suo.mutation.StockCleared() {
		_spec.ClearField(sku.FieldStock, field.TypeInt32)
	}
	if value, ok := suo.mutation.Weight(); ok {
		_spec.SetField(sku.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedWeight(); ok {
		_spec.AddField(sku.FieldWeight, field.TypeFloat64, value)
	}
	if suo.mutation.WeightCleared() {
		_spec.ClearField(sku.FieldWeight, field.TypeFloat64)
	}
	if value, ok := suo.mutation.Volume(); ok {
		_spec.SetField(sku.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedVolume(); ok {
		_spec.AddField(sku.FieldVolume, field.TypeFloat64, value)
	}
	if suo.mutation.VolumeCleared() {
		_spec.ClearField(sku.FieldVolume, field.TypeFloat64)
	}
	if value, ok := suo.mutation.FirstBrokeragePrice(); ok {
		_spec.SetField(sku.FieldFirstBrokeragePrice, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedFirstBrokeragePrice(); ok {
		_spec.AddField(sku.FieldFirstBrokeragePrice, field.TypeInt32, value)
	}
	if suo.mutation.FirstBrokeragePriceCleared() {
		_spec.ClearField(sku.FieldFirstBrokeragePrice, field.TypeInt32)
	}
	if value, ok := suo.mutation.SecondBrokeragePrice(); ok {
		_spec.SetField(sku.FieldSecondBrokeragePrice, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedSecondBrokeragePrice(); ok {
		_spec.AddField(sku.FieldSecondBrokeragePrice, field.TypeFloat64, value)
	}
	if suo.mutation.SecondBrokeragePriceCleared() {
		_spec.ClearField(sku.FieldSecondBrokeragePrice, field.TypeFloat64)
	}
	if value, ok := suo.mutation.SalesCount(); ok {
		_spec.SetField(sku.FieldSalesCount, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedSalesCount(); ok {
		_spec.AddField(sku.FieldSalesCount, field.TypeInt32, value)
	}
	if suo.mutation.SalesCountCleared() {
		_spec.ClearField(sku.FieldSalesCount, field.TypeInt32)
	}
	if suo.mutation.SpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sku.SpusTable,
			Columns: []string{sku.SpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SpusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sku.SpusTable,
			Columns: []string{sku.SpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sku.CommentsTable,
			Columns: []string{sku.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !suo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sku.CommentsTable,
			Columns: []string{sku.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sku.CommentsTable,
			Columns: []string{sku.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sku{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sku.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
