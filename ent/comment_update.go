// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/agui-coder/simple-admin-product-rpc/ent/comment"
	"github.com/agui-coder/simple-admin-product-rpc/ent/predicate"
	entType "github.com/agui-coder/simple-admin-product-rpc/ent/schema/enttype"
	"github.com/agui-coder/simple-admin-product-rpc/ent/sku"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentMutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (cu *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommentUpdate) SetUpdatedAt(t time.Time) *CommentUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CommentUpdate) SetDeletedAt(t time.Time) *CommentUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableDeletedAt(t *time.Time) *CommentUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CommentUpdate) ClearDeletedAt() *CommentUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CommentUpdate) SetUserID(u uint64) *CommentUpdate {
	cu.mutation.ResetUserID()
	cu.mutation.SetUserID(u)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableUserID(u *uint64) *CommentUpdate {
	if u != nil {
		cu.SetUserID(*u)
	}
	return cu
}

// AddUserID adds u to the "user_id" field.
func (cu *CommentUpdate) AddUserID(u int64) *CommentUpdate {
	cu.mutation.AddUserID(u)
	return cu
}

// ClearUserID clears the value of the "user_id" field.
func (cu *CommentUpdate) ClearUserID() *CommentUpdate {
	cu.mutation.ClearUserID()
	return cu
}

// SetUserNickname sets the "user_nickname" field.
func (cu *CommentUpdate) SetUserNickname(s string) *CommentUpdate {
	cu.mutation.SetUserNickname(s)
	return cu
}

// SetNillableUserNickname sets the "user_nickname" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableUserNickname(s *string) *CommentUpdate {
	if s != nil {
		cu.SetUserNickname(*s)
	}
	return cu
}

// ClearUserNickname clears the value of the "user_nickname" field.
func (cu *CommentUpdate) ClearUserNickname() *CommentUpdate {
	cu.mutation.ClearUserNickname()
	return cu
}

// SetUserAvatar sets the "user_avatar" field.
func (cu *CommentUpdate) SetUserAvatar(s string) *CommentUpdate {
	cu.mutation.SetUserAvatar(s)
	return cu
}

// SetNillableUserAvatar sets the "user_avatar" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableUserAvatar(s *string) *CommentUpdate {
	if s != nil {
		cu.SetUserAvatar(*s)
	}
	return cu
}

// ClearUserAvatar clears the value of the "user_avatar" field.
func (cu *CommentUpdate) ClearUserAvatar() *CommentUpdate {
	cu.mutation.ClearUserAvatar()
	return cu
}

// SetAnonymous sets the "anonymous" field.
func (cu *CommentUpdate) SetAnonymous(b bool) *CommentUpdate {
	cu.mutation.SetAnonymous(b)
	return cu
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableAnonymous(b *bool) *CommentUpdate {
	if b != nil {
		cu.SetAnonymous(*b)
	}
	return cu
}

// ClearAnonymous clears the value of the "anonymous" field.
func (cu *CommentUpdate) ClearAnonymous() *CommentUpdate {
	cu.mutation.ClearAnonymous()
	return cu
}

// SetOrderID sets the "order_id" field.
func (cu *CommentUpdate) SetOrderID(u uint64) *CommentUpdate {
	cu.mutation.ResetOrderID()
	cu.mutation.SetOrderID(u)
	return cu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableOrderID(u *uint64) *CommentUpdate {
	if u != nil {
		cu.SetOrderID(*u)
	}
	return cu
}

// AddOrderID adds u to the "order_id" field.
func (cu *CommentUpdate) AddOrderID(u int64) *CommentUpdate {
	cu.mutation.AddOrderID(u)
	return cu
}

// ClearOrderID clears the value of the "order_id" field.
func (cu *CommentUpdate) ClearOrderID() *CommentUpdate {
	cu.mutation.ClearOrderID()
	return cu
}

// SetOrderItemID sets the "order_item_id" field.
func (cu *CommentUpdate) SetOrderItemID(u uint64) *CommentUpdate {
	cu.mutation.ResetOrderItemID()
	cu.mutation.SetOrderItemID(u)
	return cu
}

// SetNillableOrderItemID sets the "order_item_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableOrderItemID(u *uint64) *CommentUpdate {
	if u != nil {
		cu.SetOrderItemID(*u)
	}
	return cu
}

// AddOrderItemID adds u to the "order_item_id" field.
func (cu *CommentUpdate) AddOrderItemID(u int64) *CommentUpdate {
	cu.mutation.AddOrderItemID(u)
	return cu
}

// ClearOrderItemID clears the value of the "order_item_id" field.
func (cu *CommentUpdate) ClearOrderItemID() *CommentUpdate {
	cu.mutation.ClearOrderItemID()
	return cu
}

// SetSpuID sets the "spu_id" field.
func (cu *CommentUpdate) SetSpuID(u uint64) *CommentUpdate {
	cu.mutation.ResetSpuID()
	cu.mutation.SetSpuID(u)
	return cu
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableSpuID(u *uint64) *CommentUpdate {
	if u != nil {
		cu.SetSpuID(*u)
	}
	return cu
}

// AddSpuID adds u to the "spu_id" field.
func (cu *CommentUpdate) AddSpuID(u int64) *CommentUpdate {
	cu.mutation.AddSpuID(u)
	return cu
}

// ClearSpuID clears the value of the "spu_id" field.
func (cu *CommentUpdate) ClearSpuID() *CommentUpdate {
	cu.mutation.ClearSpuID()
	return cu
}

// SetSpuName sets the "spu_name" field.
func (cu *CommentUpdate) SetSpuName(s string) *CommentUpdate {
	cu.mutation.SetSpuName(s)
	return cu
}

// SetNillableSpuName sets the "spu_name" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableSpuName(s *string) *CommentUpdate {
	if s != nil {
		cu.SetSpuName(*s)
	}
	return cu
}

// ClearSpuName clears the value of the "spu_name" field.
func (cu *CommentUpdate) ClearSpuName() *CommentUpdate {
	cu.mutation.ClearSpuName()
	return cu
}

// SetSkuID sets the "sku_id" field.
func (cu *CommentUpdate) SetSkuID(u uint64) *CommentUpdate {
	cu.mutation.SetSkuID(u)
	return cu
}

// SetNillableSkuID sets the "sku_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableSkuID(u *uint64) *CommentUpdate {
	if u != nil {
		cu.SetSkuID(*u)
	}
	return cu
}

// ClearSkuID clears the value of the "sku_id" field.
func (cu *CommentUpdate) ClearSkuID() *CommentUpdate {
	cu.mutation.ClearSkuID()
	return cu
}

// SetSkuPicURL sets the "sku_pic_url" field.
func (cu *CommentUpdate) SetSkuPicURL(s string) *CommentUpdate {
	cu.mutation.SetSkuPicURL(s)
	return cu
}

// SetSkuProperties sets the "sku_properties" field.
func (cu *CommentUpdate) SetSkuProperties(etp []entType.SkuProperty) *CommentUpdate {
	cu.mutation.SetSkuProperties(etp)
	return cu
}

// AppendSkuProperties appends etp to the "sku_properties" field.
func (cu *CommentUpdate) AppendSkuProperties(etp []entType.SkuProperty) *CommentUpdate {
	cu.mutation.AppendSkuProperties(etp)
	return cu
}

// ClearSkuProperties clears the value of the "sku_properties" field.
func (cu *CommentUpdate) ClearSkuProperties() *CommentUpdate {
	cu.mutation.ClearSkuProperties()
	return cu
}

// SetVisible sets the "visible" field.
func (cu *CommentUpdate) SetVisible(b bool) *CommentUpdate {
	cu.mutation.SetVisible(b)
	return cu
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableVisible(b *bool) *CommentUpdate {
	if b != nil {
		cu.SetVisible(*b)
	}
	return cu
}

// ClearVisible clears the value of the "visible" field.
func (cu *CommentUpdate) ClearVisible() *CommentUpdate {
	cu.mutation.ClearVisible()
	return cu
}

// SetScores sets the "scores" field.
func (cu *CommentUpdate) SetScores(i int8) *CommentUpdate {
	cu.mutation.ResetScores()
	cu.mutation.SetScores(i)
	return cu
}

// SetNillableScores sets the "scores" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableScores(i *int8) *CommentUpdate {
	if i != nil {
		cu.SetScores(*i)
	}
	return cu
}

// AddScores adds i to the "scores" field.
func (cu *CommentUpdate) AddScores(i int8) *CommentUpdate {
	cu.mutation.AddScores(i)
	return cu
}

// ClearScores clears the value of the "scores" field.
func (cu *CommentUpdate) ClearScores() *CommentUpdate {
	cu.mutation.ClearScores()
	return cu
}

// SetDescriptionScores sets the "description_scores" field.
func (cu *CommentUpdate) SetDescriptionScores(i int8) *CommentUpdate {
	cu.mutation.ResetDescriptionScores()
	cu.mutation.SetDescriptionScores(i)
	return cu
}

// SetNillableDescriptionScores sets the "description_scores" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableDescriptionScores(i *int8) *CommentUpdate {
	if i != nil {
		cu.SetDescriptionScores(*i)
	}
	return cu
}

// AddDescriptionScores adds i to the "description_scores" field.
func (cu *CommentUpdate) AddDescriptionScores(i int8) *CommentUpdate {
	cu.mutation.AddDescriptionScores(i)
	return cu
}

// ClearDescriptionScores clears the value of the "description_scores" field.
func (cu *CommentUpdate) ClearDescriptionScores() *CommentUpdate {
	cu.mutation.ClearDescriptionScores()
	return cu
}

// SetBenefitScores sets the "benefit_scores" field.
func (cu *CommentUpdate) SetBenefitScores(i int8) *CommentUpdate {
	cu.mutation.ResetBenefitScores()
	cu.mutation.SetBenefitScores(i)
	return cu
}

// SetNillableBenefitScores sets the "benefit_scores" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableBenefitScores(i *int8) *CommentUpdate {
	if i != nil {
		cu.SetBenefitScores(*i)
	}
	return cu
}

// AddBenefitScores adds i to the "benefit_scores" field.
func (cu *CommentUpdate) AddBenefitScores(i int8) *CommentUpdate {
	cu.mutation.AddBenefitScores(i)
	return cu
}

// ClearBenefitScores clears the value of the "benefit_scores" field.
func (cu *CommentUpdate) ClearBenefitScores() *CommentUpdate {
	cu.mutation.ClearBenefitScores()
	return cu
}

// SetContent sets the "content" field.
func (cu *CommentUpdate) SetContent(s string) *CommentUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableContent(s *string) *CommentUpdate {
	if s != nil {
		cu.SetContent(*s)
	}
	return cu
}

// ClearContent clears the value of the "content" field.
func (cu *CommentUpdate) ClearContent() *CommentUpdate {
	cu.mutation.ClearContent()
	return cu
}

// SetPicUrls sets the "pic_urls" field.
func (cu *CommentUpdate) SetPicUrls(s string) *CommentUpdate {
	cu.mutation.SetPicUrls(s)
	return cu
}

// SetNillablePicUrls sets the "pic_urls" field if the given value is not nil.
func (cu *CommentUpdate) SetNillablePicUrls(s *string) *CommentUpdate {
	if s != nil {
		cu.SetPicUrls(*s)
	}
	return cu
}

// ClearPicUrls clears the value of the "pic_urls" field.
func (cu *CommentUpdate) ClearPicUrls() *CommentUpdate {
	cu.mutation.ClearPicUrls()
	return cu
}

// SetReplyStatus sets the "reply_status" field.
func (cu *CommentUpdate) SetReplyStatus(b bool) *CommentUpdate {
	cu.mutation.SetReplyStatus(b)
	return cu
}

// SetNillableReplyStatus sets the "reply_status" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableReplyStatus(b *bool) *CommentUpdate {
	if b != nil {
		cu.SetReplyStatus(*b)
	}
	return cu
}

// ClearReplyStatus clears the value of the "reply_status" field.
func (cu *CommentUpdate) ClearReplyStatus() *CommentUpdate {
	cu.mutation.ClearReplyStatus()
	return cu
}

// SetReplyUserID sets the "reply_user_id" field.
func (cu *CommentUpdate) SetReplyUserID(i int) *CommentUpdate {
	cu.mutation.ResetReplyUserID()
	cu.mutation.SetReplyUserID(i)
	return cu
}

// SetNillableReplyUserID sets the "reply_user_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableReplyUserID(i *int) *CommentUpdate {
	if i != nil {
		cu.SetReplyUserID(*i)
	}
	return cu
}

// AddReplyUserID adds i to the "reply_user_id" field.
func (cu *CommentUpdate) AddReplyUserID(i int) *CommentUpdate {
	cu.mutation.AddReplyUserID(i)
	return cu
}

// ClearReplyUserID clears the value of the "reply_user_id" field.
func (cu *CommentUpdate) ClearReplyUserID() *CommentUpdate {
	cu.mutation.ClearReplyUserID()
	return cu
}

// SetReplyContent sets the "reply_content" field.
func (cu *CommentUpdate) SetReplyContent(s string) *CommentUpdate {
	cu.mutation.SetReplyContent(s)
	return cu
}

// SetNillableReplyContent sets the "reply_content" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableReplyContent(s *string) *CommentUpdate {
	if s != nil {
		cu.SetReplyContent(*s)
	}
	return cu
}

// ClearReplyContent clears the value of the "reply_content" field.
func (cu *CommentUpdate) ClearReplyContent() *CommentUpdate {
	cu.mutation.ClearReplyContent()
	return cu
}

// SetReplyTime sets the "reply_time" field.
func (cu *CommentUpdate) SetReplyTime(t time.Time) *CommentUpdate {
	cu.mutation.SetReplyTime(t)
	return cu
}

// SetNillableReplyTime sets the "reply_time" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableReplyTime(t *time.Time) *CommentUpdate {
	if t != nil {
		cu.SetReplyTime(*t)
	}
	return cu
}

// ClearReplyTime clears the value of the "reply_time" field.
func (cu *CommentUpdate) ClearReplyTime() *CommentUpdate {
	cu.mutation.ClearReplyTime()
	return cu
}

// SetSkusID sets the "skus" edge to the Sku entity by ID.
func (cu *CommentUpdate) SetSkusID(id uint64) *CommentUpdate {
	cu.mutation.SetSkusID(id)
	return cu
}

// SetNillableSkusID sets the "skus" edge to the Sku entity by ID if the given value is not nil.
func (cu *CommentUpdate) SetNillableSkusID(id *uint64) *CommentUpdate {
	if id != nil {
		cu = cu.SetSkusID(*id)
	}
	return cu
}

// SetSkus sets the "skus" edge to the Sku entity.
func (cu *CommentUpdate) SetSkus(s *Sku) *CommentUpdate {
	return cu.SetSkusID(s.ID)
}

// Mutation returns the CommentMutation object of the builder.
func (cu *CommentUpdate) Mutation() *CommentMutation {
	return cu.mutation
}

// ClearSkus clears the "skus" edge to the Sku entity.
func (cu *CommentUpdate) ClearSkus() *CommentUpdate {
	cu.mutation.ClearSkus()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommentUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if comment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized comment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := comment.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cu *CommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(comment.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(comment.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UserID(); ok {
		_spec.SetField(comment.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := cu.mutation.AddedUserID(); ok {
		_spec.AddField(comment.FieldUserID, field.TypeUint64, value)
	}
	if cu.mutation.UserIDCleared() {
		_spec.ClearField(comment.FieldUserID, field.TypeUint64)
	}
	if value, ok := cu.mutation.UserNickname(); ok {
		_spec.SetField(comment.FieldUserNickname, field.TypeString, value)
	}
	if cu.mutation.UserNicknameCleared() {
		_spec.ClearField(comment.FieldUserNickname, field.TypeString)
	}
	if value, ok := cu.mutation.UserAvatar(); ok {
		_spec.SetField(comment.FieldUserAvatar, field.TypeString, value)
	}
	if cu.mutation.UserAvatarCleared() {
		_spec.ClearField(comment.FieldUserAvatar, field.TypeString)
	}
	if value, ok := cu.mutation.Anonymous(); ok {
		_spec.SetField(comment.FieldAnonymous, field.TypeBool, value)
	}
	if cu.mutation.AnonymousCleared() {
		_spec.ClearField(comment.FieldAnonymous, field.TypeBool)
	}
	if value, ok := cu.mutation.OrderID(); ok {
		_spec.SetField(comment.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := cu.mutation.AddedOrderID(); ok {
		_spec.AddField(comment.FieldOrderID, field.TypeUint64, value)
	}
	if cu.mutation.OrderIDCleared() {
		_spec.ClearField(comment.FieldOrderID, field.TypeUint64)
	}
	if value, ok := cu.mutation.OrderItemID(); ok {
		_spec.SetField(comment.FieldOrderItemID, field.TypeUint64, value)
	}
	if value, ok := cu.mutation.AddedOrderItemID(); ok {
		_spec.AddField(comment.FieldOrderItemID, field.TypeUint64, value)
	}
	if cu.mutation.OrderItemIDCleared() {
		_spec.ClearField(comment.FieldOrderItemID, field.TypeUint64)
	}
	if value, ok := cu.mutation.SpuID(); ok {
		_spec.SetField(comment.FieldSpuID, field.TypeUint64, value)
	}
	if value, ok := cu.mutation.AddedSpuID(); ok {
		_spec.AddField(comment.FieldSpuID, field.TypeUint64, value)
	}
	if cu.mutation.SpuIDCleared() {
		_spec.ClearField(comment.FieldSpuID, field.TypeUint64)
	}
	if value, ok := cu.mutation.SpuName(); ok {
		_spec.SetField(comment.FieldSpuName, field.TypeString, value)
	}
	if cu.mutation.SpuNameCleared() {
		_spec.ClearField(comment.FieldSpuName, field.TypeString)
	}
	if value, ok := cu.mutation.SkuPicURL(); ok {
		_spec.SetField(comment.FieldSkuPicURL, field.TypeString, value)
	}
	if value, ok := cu.mutation.SkuProperties(); ok {
		_spec.SetField(comment.FieldSkuProperties, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedSkuProperties(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, comment.FieldSkuProperties, value)
		})
	}
	if cu.mutation.SkuPropertiesCleared() {
		_spec.ClearField(comment.FieldSkuProperties, field.TypeJSON)
	}
	if value, ok := cu.mutation.Visible(); ok {
		_spec.SetField(comment.FieldVisible, field.TypeBool, value)
	}
	if cu.mutation.VisibleCleared() {
		_spec.ClearField(comment.FieldVisible, field.TypeBool)
	}
	if value, ok := cu.mutation.Scores(); ok {
		_spec.SetField(comment.FieldScores, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.AddedScores(); ok {
		_spec.AddField(comment.FieldScores, field.TypeInt8, value)
	}
	if cu.mutation.ScoresCleared() {
		_spec.ClearField(comment.FieldScores, field.TypeInt8)
	}
	if value, ok := cu.mutation.DescriptionScores(); ok {
		_spec.SetField(comment.FieldDescriptionScores, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.AddedDescriptionScores(); ok {
		_spec.AddField(comment.FieldDescriptionScores, field.TypeInt8, value)
	}
	if cu.mutation.DescriptionScoresCleared() {
		_spec.ClearField(comment.FieldDescriptionScores, field.TypeInt8)
	}
	if value, ok := cu.mutation.BenefitScores(); ok {
		_spec.SetField(comment.FieldBenefitScores, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.AddedBenefitScores(); ok {
		_spec.AddField(comment.FieldBenefitScores, field.TypeInt8, value)
	}
	if cu.mutation.BenefitScoresCleared() {
		_spec.ClearField(comment.FieldBenefitScores, field.TypeInt8)
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if cu.mutation.ContentCleared() {
		_spec.ClearField(comment.FieldContent, field.TypeString)
	}
	if value, ok := cu.mutation.PicUrls(); ok {
		_spec.SetField(comment.FieldPicUrls, field.TypeString, value)
	}
	if cu.mutation.PicUrlsCleared() {
		_spec.ClearField(comment.FieldPicUrls, field.TypeString)
	}
	if value, ok := cu.mutation.ReplyStatus(); ok {
		_spec.SetField(comment.FieldReplyStatus, field.TypeBool, value)
	}
	if cu.mutation.ReplyStatusCleared() {
		_spec.ClearField(comment.FieldReplyStatus, field.TypeBool)
	}
	if value, ok := cu.mutation.ReplyUserID(); ok {
		_spec.SetField(comment.FieldReplyUserID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedReplyUserID(); ok {
		_spec.AddField(comment.FieldReplyUserID, field.TypeInt, value)
	}
	if cu.mutation.ReplyUserIDCleared() {
		_spec.ClearField(comment.FieldReplyUserID, field.TypeInt)
	}
	if value, ok := cu.mutation.ReplyContent(); ok {
		_spec.SetField(comment.FieldReplyContent, field.TypeString, value)
	}
	if cu.mutation.ReplyContentCleared() {
		_spec.ClearField(comment.FieldReplyContent, field.TypeString)
	}
	if value, ok := cu.mutation.ReplyTime(); ok {
		_spec.SetField(comment.FieldReplyTime, field.TypeTime, value)
	}
	if cu.mutation.ReplyTimeCleared() {
		_spec.ClearField(comment.FieldReplyTime, field.TypeTime)
	}
	if cu.mutation.SkusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.SkusTable,
			Columns: []string{comment.SkusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SkusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.SkusTable,
			Columns: []string{comment.SkusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommentUpdateOne) SetUpdatedAt(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CommentUpdateOne) SetDeletedAt(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableDeletedAt(t *time.Time) *CommentUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CommentUpdateOne) ClearDeletedAt() *CommentUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *CommentUpdateOne) SetUserID(u uint64) *CommentUpdateOne {
	cuo.mutation.ResetUserID()
	cuo.mutation.SetUserID(u)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableUserID(u *uint64) *CommentUpdateOne {
	if u != nil {
		cuo.SetUserID(*u)
	}
	return cuo
}

// AddUserID adds u to the "user_id" field.
func (cuo *CommentUpdateOne) AddUserID(u int64) *CommentUpdateOne {
	cuo.mutation.AddUserID(u)
	return cuo
}

// ClearUserID clears the value of the "user_id" field.
func (cuo *CommentUpdateOne) ClearUserID() *CommentUpdateOne {
	cuo.mutation.ClearUserID()
	return cuo
}

// SetUserNickname sets the "user_nickname" field.
func (cuo *CommentUpdateOne) SetUserNickname(s string) *CommentUpdateOne {
	cuo.mutation.SetUserNickname(s)
	return cuo
}

// SetNillableUserNickname sets the "user_nickname" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableUserNickname(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetUserNickname(*s)
	}
	return cuo
}

// ClearUserNickname clears the value of the "user_nickname" field.
func (cuo *CommentUpdateOne) ClearUserNickname() *CommentUpdateOne {
	cuo.mutation.ClearUserNickname()
	return cuo
}

// SetUserAvatar sets the "user_avatar" field.
func (cuo *CommentUpdateOne) SetUserAvatar(s string) *CommentUpdateOne {
	cuo.mutation.SetUserAvatar(s)
	return cuo
}

// SetNillableUserAvatar sets the "user_avatar" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableUserAvatar(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetUserAvatar(*s)
	}
	return cuo
}

// ClearUserAvatar clears the value of the "user_avatar" field.
func (cuo *CommentUpdateOne) ClearUserAvatar() *CommentUpdateOne {
	cuo.mutation.ClearUserAvatar()
	return cuo
}

// SetAnonymous sets the "anonymous" field.
func (cuo *CommentUpdateOne) SetAnonymous(b bool) *CommentUpdateOne {
	cuo.mutation.SetAnonymous(b)
	return cuo
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableAnonymous(b *bool) *CommentUpdateOne {
	if b != nil {
		cuo.SetAnonymous(*b)
	}
	return cuo
}

// ClearAnonymous clears the value of the "anonymous" field.
func (cuo *CommentUpdateOne) ClearAnonymous() *CommentUpdateOne {
	cuo.mutation.ClearAnonymous()
	return cuo
}

// SetOrderID sets the "order_id" field.
func (cuo *CommentUpdateOne) SetOrderID(u uint64) *CommentUpdateOne {
	cuo.mutation.ResetOrderID()
	cuo.mutation.SetOrderID(u)
	return cuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableOrderID(u *uint64) *CommentUpdateOne {
	if u != nil {
		cuo.SetOrderID(*u)
	}
	return cuo
}

// AddOrderID adds u to the "order_id" field.
func (cuo *CommentUpdateOne) AddOrderID(u int64) *CommentUpdateOne {
	cuo.mutation.AddOrderID(u)
	return cuo
}

// ClearOrderID clears the value of the "order_id" field.
func (cuo *CommentUpdateOne) ClearOrderID() *CommentUpdateOne {
	cuo.mutation.ClearOrderID()
	return cuo
}

// SetOrderItemID sets the "order_item_id" field.
func (cuo *CommentUpdateOne) SetOrderItemID(u uint64) *CommentUpdateOne {
	cuo.mutation.ResetOrderItemID()
	cuo.mutation.SetOrderItemID(u)
	return cuo
}

// SetNillableOrderItemID sets the "order_item_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableOrderItemID(u *uint64) *CommentUpdateOne {
	if u != nil {
		cuo.SetOrderItemID(*u)
	}
	return cuo
}

// AddOrderItemID adds u to the "order_item_id" field.
func (cuo *CommentUpdateOne) AddOrderItemID(u int64) *CommentUpdateOne {
	cuo.mutation.AddOrderItemID(u)
	return cuo
}

// ClearOrderItemID clears the value of the "order_item_id" field.
func (cuo *CommentUpdateOne) ClearOrderItemID() *CommentUpdateOne {
	cuo.mutation.ClearOrderItemID()
	return cuo
}

// SetSpuID sets the "spu_id" field.
func (cuo *CommentUpdateOne) SetSpuID(u uint64) *CommentUpdateOne {
	cuo.mutation.ResetSpuID()
	cuo.mutation.SetSpuID(u)
	return cuo
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableSpuID(u *uint64) *CommentUpdateOne {
	if u != nil {
		cuo.SetSpuID(*u)
	}
	return cuo
}

// AddSpuID adds u to the "spu_id" field.
func (cuo *CommentUpdateOne) AddSpuID(u int64) *CommentUpdateOne {
	cuo.mutation.AddSpuID(u)
	return cuo
}

// ClearSpuID clears the value of the "spu_id" field.
func (cuo *CommentUpdateOne) ClearSpuID() *CommentUpdateOne {
	cuo.mutation.ClearSpuID()
	return cuo
}

// SetSpuName sets the "spu_name" field.
func (cuo *CommentUpdateOne) SetSpuName(s string) *CommentUpdateOne {
	cuo.mutation.SetSpuName(s)
	return cuo
}

// SetNillableSpuName sets the "spu_name" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableSpuName(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetSpuName(*s)
	}
	return cuo
}

// ClearSpuName clears the value of the "spu_name" field.
func (cuo *CommentUpdateOne) ClearSpuName() *CommentUpdateOne {
	cuo.mutation.ClearSpuName()
	return cuo
}

// SetSkuID sets the "sku_id" field.
func (cuo *CommentUpdateOne) SetSkuID(u uint64) *CommentUpdateOne {
	cuo.mutation.SetSkuID(u)
	return cuo
}

// SetNillableSkuID sets the "sku_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableSkuID(u *uint64) *CommentUpdateOne {
	if u != nil {
		cuo.SetSkuID(*u)
	}
	return cuo
}

// ClearSkuID clears the value of the "sku_id" field.
func (cuo *CommentUpdateOne) ClearSkuID() *CommentUpdateOne {
	cuo.mutation.ClearSkuID()
	return cuo
}

// SetSkuPicURL sets the "sku_pic_url" field.
func (cuo *CommentUpdateOne) SetSkuPicURL(s string) *CommentUpdateOne {
	cuo.mutation.SetSkuPicURL(s)
	return cuo
}

// SetSkuProperties sets the "sku_properties" field.
func (cuo *CommentUpdateOne) SetSkuProperties(etp []entType.SkuProperty) *CommentUpdateOne {
	cuo.mutation.SetSkuProperties(etp)
	return cuo
}

// AppendSkuProperties appends etp to the "sku_properties" field.
func (cuo *CommentUpdateOne) AppendSkuProperties(etp []entType.SkuProperty) *CommentUpdateOne {
	cuo.mutation.AppendSkuProperties(etp)
	return cuo
}

// ClearSkuProperties clears the value of the "sku_properties" field.
func (cuo *CommentUpdateOne) ClearSkuProperties() *CommentUpdateOne {
	cuo.mutation.ClearSkuProperties()
	return cuo
}

// SetVisible sets the "visible" field.
func (cuo *CommentUpdateOne) SetVisible(b bool) *CommentUpdateOne {
	cuo.mutation.SetVisible(b)
	return cuo
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableVisible(b *bool) *CommentUpdateOne {
	if b != nil {
		cuo.SetVisible(*b)
	}
	return cuo
}

// ClearVisible clears the value of the "visible" field.
func (cuo *CommentUpdateOne) ClearVisible() *CommentUpdateOne {
	cuo.mutation.ClearVisible()
	return cuo
}

// SetScores sets the "scores" field.
func (cuo *CommentUpdateOne) SetScores(i int8) *CommentUpdateOne {
	cuo.mutation.ResetScores()
	cuo.mutation.SetScores(i)
	return cuo
}

// SetNillableScores sets the "scores" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableScores(i *int8) *CommentUpdateOne {
	if i != nil {
		cuo.SetScores(*i)
	}
	return cuo
}

// AddScores adds i to the "scores" field.
func (cuo *CommentUpdateOne) AddScores(i int8) *CommentUpdateOne {
	cuo.mutation.AddScores(i)
	return cuo
}

// ClearScores clears the value of the "scores" field.
func (cuo *CommentUpdateOne) ClearScores() *CommentUpdateOne {
	cuo.mutation.ClearScores()
	return cuo
}

// SetDescriptionScores sets the "description_scores" field.
func (cuo *CommentUpdateOne) SetDescriptionScores(i int8) *CommentUpdateOne {
	cuo.mutation.ResetDescriptionScores()
	cuo.mutation.SetDescriptionScores(i)
	return cuo
}

// SetNillableDescriptionScores sets the "description_scores" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableDescriptionScores(i *int8) *CommentUpdateOne {
	if i != nil {
		cuo.SetDescriptionScores(*i)
	}
	return cuo
}

// AddDescriptionScores adds i to the "description_scores" field.
func (cuo *CommentUpdateOne) AddDescriptionScores(i int8) *CommentUpdateOne {
	cuo.mutation.AddDescriptionScores(i)
	return cuo
}

// ClearDescriptionScores clears the value of the "description_scores" field.
func (cuo *CommentUpdateOne) ClearDescriptionScores() *CommentUpdateOne {
	cuo.mutation.ClearDescriptionScores()
	return cuo
}

// SetBenefitScores sets the "benefit_scores" field.
func (cuo *CommentUpdateOne) SetBenefitScores(i int8) *CommentUpdateOne {
	cuo.mutation.ResetBenefitScores()
	cuo.mutation.SetBenefitScores(i)
	return cuo
}

// SetNillableBenefitScores sets the "benefit_scores" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableBenefitScores(i *int8) *CommentUpdateOne {
	if i != nil {
		cuo.SetBenefitScores(*i)
	}
	return cuo
}

// AddBenefitScores adds i to the "benefit_scores" field.
func (cuo *CommentUpdateOne) AddBenefitScores(i int8) *CommentUpdateOne {
	cuo.mutation.AddBenefitScores(i)
	return cuo
}

// ClearBenefitScores clears the value of the "benefit_scores" field.
func (cuo *CommentUpdateOne) ClearBenefitScores() *CommentUpdateOne {
	cuo.mutation.ClearBenefitScores()
	return cuo
}

// SetContent sets the "content" field.
func (cuo *CommentUpdateOne) SetContent(s string) *CommentUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableContent(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetContent(*s)
	}
	return cuo
}

// ClearContent clears the value of the "content" field.
func (cuo *CommentUpdateOne) ClearContent() *CommentUpdateOne {
	cuo.mutation.ClearContent()
	return cuo
}

// SetPicUrls sets the "pic_urls" field.
func (cuo *CommentUpdateOne) SetPicUrls(s string) *CommentUpdateOne {
	cuo.mutation.SetPicUrls(s)
	return cuo
}

// SetNillablePicUrls sets the "pic_urls" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillablePicUrls(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetPicUrls(*s)
	}
	return cuo
}

// ClearPicUrls clears the value of the "pic_urls" field.
func (cuo *CommentUpdateOne) ClearPicUrls() *CommentUpdateOne {
	cuo.mutation.ClearPicUrls()
	return cuo
}

// SetReplyStatus sets the "reply_status" field.
func (cuo *CommentUpdateOne) SetReplyStatus(b bool) *CommentUpdateOne {
	cuo.mutation.SetReplyStatus(b)
	return cuo
}

// SetNillableReplyStatus sets the "reply_status" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableReplyStatus(b *bool) *CommentUpdateOne {
	if b != nil {
		cuo.SetReplyStatus(*b)
	}
	return cuo
}

// ClearReplyStatus clears the value of the "reply_status" field.
func (cuo *CommentUpdateOne) ClearReplyStatus() *CommentUpdateOne {
	cuo.mutation.ClearReplyStatus()
	return cuo
}

// SetReplyUserID sets the "reply_user_id" field.
func (cuo *CommentUpdateOne) SetReplyUserID(i int) *CommentUpdateOne {
	cuo.mutation.ResetReplyUserID()
	cuo.mutation.SetReplyUserID(i)
	return cuo
}

// SetNillableReplyUserID sets the "reply_user_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableReplyUserID(i *int) *CommentUpdateOne {
	if i != nil {
		cuo.SetReplyUserID(*i)
	}
	return cuo
}

// AddReplyUserID adds i to the "reply_user_id" field.
func (cuo *CommentUpdateOne) AddReplyUserID(i int) *CommentUpdateOne {
	cuo.mutation.AddReplyUserID(i)
	return cuo
}

// ClearReplyUserID clears the value of the "reply_user_id" field.
func (cuo *CommentUpdateOne) ClearReplyUserID() *CommentUpdateOne {
	cuo.mutation.ClearReplyUserID()
	return cuo
}

// SetReplyContent sets the "reply_content" field.
func (cuo *CommentUpdateOne) SetReplyContent(s string) *CommentUpdateOne {
	cuo.mutation.SetReplyContent(s)
	return cuo
}

// SetNillableReplyContent sets the "reply_content" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableReplyContent(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetReplyContent(*s)
	}
	return cuo
}

// ClearReplyContent clears the value of the "reply_content" field.
func (cuo *CommentUpdateOne) ClearReplyContent() *CommentUpdateOne {
	cuo.mutation.ClearReplyContent()
	return cuo
}

// SetReplyTime sets the "reply_time" field.
func (cuo *CommentUpdateOne) SetReplyTime(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetReplyTime(t)
	return cuo
}

// SetNillableReplyTime sets the "reply_time" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableReplyTime(t *time.Time) *CommentUpdateOne {
	if t != nil {
		cuo.SetReplyTime(*t)
	}
	return cuo
}

// ClearReplyTime clears the value of the "reply_time" field.
func (cuo *CommentUpdateOne) ClearReplyTime() *CommentUpdateOne {
	cuo.mutation.ClearReplyTime()
	return cuo
}

// SetSkusID sets the "skus" edge to the Sku entity by ID.
func (cuo *CommentUpdateOne) SetSkusID(id uint64) *CommentUpdateOne {
	cuo.mutation.SetSkusID(id)
	return cuo
}

// SetNillableSkusID sets the "skus" edge to the Sku entity by ID if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableSkusID(id *uint64) *CommentUpdateOne {
	if id != nil {
		cuo = cuo.SetSkusID(*id)
	}
	return cuo
}

// SetSkus sets the "skus" edge to the Sku entity.
func (cuo *CommentUpdateOne) SetSkus(s *Sku) *CommentUpdateOne {
	return cuo.SetSkusID(s.ID)
}

// Mutation returns the CommentMutation object of the builder.
func (cuo *CommentUpdateOne) Mutation() *CommentMutation {
	return cuo.mutation
}

// ClearSkus clears the "skus" edge to the Sku entity.
func (cuo *CommentUpdateOne) ClearSkus() *CommentUpdateOne {
	cuo.mutation.ClearSkus()
	return cuo
}

// Where appends a list predicates to the CommentUpdate builder.
func (cuo *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comment entity.
func (cuo *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommentUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if comment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized comment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := comment.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cuo *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(comment.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(comment.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UserID(); ok {
		_spec.SetField(comment.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := cuo.mutation.AddedUserID(); ok {
		_spec.AddField(comment.FieldUserID, field.TypeUint64, value)
	}
	if cuo.mutation.UserIDCleared() {
		_spec.ClearField(comment.FieldUserID, field.TypeUint64)
	}
	if value, ok := cuo.mutation.UserNickname(); ok {
		_spec.SetField(comment.FieldUserNickname, field.TypeString, value)
	}
	if cuo.mutation.UserNicknameCleared() {
		_spec.ClearField(comment.FieldUserNickname, field.TypeString)
	}
	if value, ok := cuo.mutation.UserAvatar(); ok {
		_spec.SetField(comment.FieldUserAvatar, field.TypeString, value)
	}
	if cuo.mutation.UserAvatarCleared() {
		_spec.ClearField(comment.FieldUserAvatar, field.TypeString)
	}
	if value, ok := cuo.mutation.Anonymous(); ok {
		_spec.SetField(comment.FieldAnonymous, field.TypeBool, value)
	}
	if cuo.mutation.AnonymousCleared() {
		_spec.ClearField(comment.FieldAnonymous, field.TypeBool)
	}
	if value, ok := cuo.mutation.OrderID(); ok {
		_spec.SetField(comment.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := cuo.mutation.AddedOrderID(); ok {
		_spec.AddField(comment.FieldOrderID, field.TypeUint64, value)
	}
	if cuo.mutation.OrderIDCleared() {
		_spec.ClearField(comment.FieldOrderID, field.TypeUint64)
	}
	if value, ok := cuo.mutation.OrderItemID(); ok {
		_spec.SetField(comment.FieldOrderItemID, field.TypeUint64, value)
	}
	if value, ok := cuo.mutation.AddedOrderItemID(); ok {
		_spec.AddField(comment.FieldOrderItemID, field.TypeUint64, value)
	}
	if cuo.mutation.OrderItemIDCleared() {
		_spec.ClearField(comment.FieldOrderItemID, field.TypeUint64)
	}
	if value, ok := cuo.mutation.SpuID(); ok {
		_spec.SetField(comment.FieldSpuID, field.TypeUint64, value)
	}
	if value, ok := cuo.mutation.AddedSpuID(); ok {
		_spec.AddField(comment.FieldSpuID, field.TypeUint64, value)
	}
	if cuo.mutation.SpuIDCleared() {
		_spec.ClearField(comment.FieldSpuID, field.TypeUint64)
	}
	if value, ok := cuo.mutation.SpuName(); ok {
		_spec.SetField(comment.FieldSpuName, field.TypeString, value)
	}
	if cuo.mutation.SpuNameCleared() {
		_spec.ClearField(comment.FieldSpuName, field.TypeString)
	}
	if value, ok := cuo.mutation.SkuPicURL(); ok {
		_spec.SetField(comment.FieldSkuPicURL, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SkuProperties(); ok {
		_spec.SetField(comment.FieldSkuProperties, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedSkuProperties(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, comment.FieldSkuProperties, value)
		})
	}
	if cuo.mutation.SkuPropertiesCleared() {
		_spec.ClearField(comment.FieldSkuProperties, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Visible(); ok {
		_spec.SetField(comment.FieldVisible, field.TypeBool, value)
	}
	if cuo.mutation.VisibleCleared() {
		_spec.ClearField(comment.FieldVisible, field.TypeBool)
	}
	if value, ok := cuo.mutation.Scores(); ok {
		_spec.SetField(comment.FieldScores, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.AddedScores(); ok {
		_spec.AddField(comment.FieldScores, field.TypeInt8, value)
	}
	if cuo.mutation.ScoresCleared() {
		_spec.ClearField(comment.FieldScores, field.TypeInt8)
	}
	if value, ok := cuo.mutation.DescriptionScores(); ok {
		_spec.SetField(comment.FieldDescriptionScores, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.AddedDescriptionScores(); ok {
		_spec.AddField(comment.FieldDescriptionScores, field.TypeInt8, value)
	}
	if cuo.mutation.DescriptionScoresCleared() {
		_spec.ClearField(comment.FieldDescriptionScores, field.TypeInt8)
	}
	if value, ok := cuo.mutation.BenefitScores(); ok {
		_spec.SetField(comment.FieldBenefitScores, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.AddedBenefitScores(); ok {
		_spec.AddField(comment.FieldBenefitScores, field.TypeInt8, value)
	}
	if cuo.mutation.BenefitScoresCleared() {
		_spec.ClearField(comment.FieldBenefitScores, field.TypeInt8)
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if cuo.mutation.ContentCleared() {
		_spec.ClearField(comment.FieldContent, field.TypeString)
	}
	if value, ok := cuo.mutation.PicUrls(); ok {
		_spec.SetField(comment.FieldPicUrls, field.TypeString, value)
	}
	if cuo.mutation.PicUrlsCleared() {
		_spec.ClearField(comment.FieldPicUrls, field.TypeString)
	}
	if value, ok := cuo.mutation.ReplyStatus(); ok {
		_spec.SetField(comment.FieldReplyStatus, field.TypeBool, value)
	}
	if cuo.mutation.ReplyStatusCleared() {
		_spec.ClearField(comment.FieldReplyStatus, field.TypeBool)
	}
	if value, ok := cuo.mutation.ReplyUserID(); ok {
		_spec.SetField(comment.FieldReplyUserID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedReplyUserID(); ok {
		_spec.AddField(comment.FieldReplyUserID, field.TypeInt, value)
	}
	if cuo.mutation.ReplyUserIDCleared() {
		_spec.ClearField(comment.FieldReplyUserID, field.TypeInt)
	}
	if value, ok := cuo.mutation.ReplyContent(); ok {
		_spec.SetField(comment.FieldReplyContent, field.TypeString, value)
	}
	if cuo.mutation.ReplyContentCleared() {
		_spec.ClearField(comment.FieldReplyContent, field.TypeString)
	}
	if value, ok := cuo.mutation.ReplyTime(); ok {
		_spec.SetField(comment.FieldReplyTime, field.TypeTime, value)
	}
	if cuo.mutation.ReplyTimeCleared() {
		_spec.ClearField(comment.FieldReplyTime, field.TypeTime)
	}
	if cuo.mutation.SkusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.SkusTable,
			Columns: []string{comment.SkusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SkusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.SkusTable,
			Columns: []string{comment.SkusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comment{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
