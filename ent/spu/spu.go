// Code generated by ent, DO NOT EDIT.

package spu

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the spu type in the database.
	Label = "spu"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldKeyword holds the string denoting the keyword field in the database.
	FieldKeyword = "keyword"
	// FieldIntroduction holds the string denoting the introduction field in the database.
	FieldIntroduction = "introduction"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldBarCode holds the string denoting the bar_code field in the database.
	FieldBarCode = "bar_code"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// FieldBrandID holds the string denoting the brand_id field in the database.
	FieldBrandID = "brand_id"
	// FieldPicURL holds the string denoting the pic_url field in the database.
	FieldPicURL = "pic_url"
	// FieldSliderPicUrls holds the string denoting the slider_pic_urls field in the database.
	FieldSliderPicUrls = "slider_pic_urls"
	// FieldVideoURL holds the string denoting the video_url field in the database.
	FieldVideoURL = "video_url"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// FieldSpecType holds the string denoting the spec_type field in the database.
	FieldSpecType = "spec_type"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldMarketPrice holds the string denoting the market_price field in the database.
	FieldMarketPrice = "market_price"
	// FieldCostPrice holds the string denoting the cost_price field in the database.
	FieldCostPrice = "cost_price"
	// FieldStock holds the string denoting the stock field in the database.
	FieldStock = "stock"
	// FieldDeliveryTemplateID holds the string denoting the deliverytemplate_id field in the database.
	FieldDeliveryTemplateID = "delivery_template_id"
	// FieldRecommendHot holds the string denoting the recommend_hot field in the database.
	FieldRecommendHot = "recommend_hot"
	// FieldRecommendBenefit holds the string denoting the recommend_benefit field in the database.
	FieldRecommendBenefit = "recommend_benefit"
	// FieldRecommendBest holds the string denoting the recommend_best field in the database.
	FieldRecommendBest = "recommend_best"
	// FieldRecommendNew holds the string denoting the recommend_new field in the database.
	FieldRecommendNew = "recommend_new"
	// FieldRecommendGood holds the string denoting the recommend_good field in the database.
	FieldRecommendGood = "recommend_good"
	// FieldGiveIntegral holds the string denoting the give_integral field in the database.
	FieldGiveIntegral = "give_integral"
	// FieldGiveCouponTemplateIds holds the string denoting the give_coupon_template_ids field in the database.
	FieldGiveCouponTemplateIds = "give_coupon_template_ids"
	// FieldSubCommissionType holds the string denoting the sub_commission_type field in the database.
	FieldSubCommissionType = "sub_commission_type"
	// FieldActivityOrders holds the string denoting the activity_orders field in the database.
	FieldActivityOrders = "activity_orders"
	// FieldSalesCount holds the string denoting the sales_count field in the database.
	FieldSalesCount = "sales_count"
	// FieldVirtualSalesCount holds the string denoting the virtual_sales_count field in the database.
	FieldVirtualSalesCount = "virtual_sales_count"
	// FieldBrowseCount holds the string denoting the browse_count field in the database.
	FieldBrowseCount = "browse_count"
	// EdgeSkus holds the string denoting the skus edge name in mutations.
	EdgeSkus = "skus"
	// EdgeBrands holds the string denoting the brands edge name in mutations.
	EdgeBrands = "brands"
	// EdgeCategorys holds the string denoting the categorys edge name in mutations.
	EdgeCategorys = "categorys"
	// Table holds the table name of the spu in the database.
	Table = "product_spu"
	// SkusTable is the table that holds the skus relation/edge.
	SkusTable = "product_sku"
	// SkusInverseTable is the table name for the Sku entity.
	// It exists in this package in order to avoid circular dependency with the "sku" package.
	SkusInverseTable = "product_sku"
	// SkusColumn is the table column denoting the skus relation/edge.
	SkusColumn = "spu_id"
	// BrandsTable is the table that holds the brands relation/edge.
	BrandsTable = "product_spu"
	// BrandsInverseTable is the table name for the Brand entity.
	// It exists in this package in order to avoid circular dependency with the "brand" package.
	BrandsInverseTable = "product_brand"
	// BrandsColumn is the table column denoting the brands relation/edge.
	BrandsColumn = "brand_id"
	// CategorysTable is the table that holds the categorys relation/edge.
	CategorysTable = "product_spu"
	// CategorysInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategorysInverseTable = "product_category"
	// CategorysColumn is the table column denoting the categorys relation/edge.
	CategorysColumn = "category_id"
)

// Columns holds all SQL columns for spu fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldSort,
	FieldDeletedAt,
	FieldName,
	FieldKeyword,
	FieldIntroduction,
	FieldDescription,
	FieldBarCode,
	FieldCategoryID,
	FieldBrandID,
	FieldPicURL,
	FieldSliderPicUrls,
	FieldVideoURL,
	FieldUnit,
	FieldSpecType,
	FieldPrice,
	FieldMarketPrice,
	FieldCostPrice,
	FieldStock,
	FieldDeliveryTemplateID,
	FieldRecommendHot,
	FieldRecommendBenefit,
	FieldRecommendBest,
	FieldRecommendNew,
	FieldRecommendGood,
	FieldGiveIntegral,
	FieldGiveCouponTemplateIds,
	FieldSubCommissionType,
	FieldActivityOrders,
	FieldSalesCount,
	FieldVirtualSalesCount,
	FieldBrowseCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/agui-coder/simple-admin-product-rpc/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultSort holds the default value on creation for the "sort" field.
	DefaultSort uint32
)

// OrderOption defines the ordering options for the Spu queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySort orders the results by the sort field.
func BySort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSort, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByKeyword orders the results by the keyword field.
func ByKeyword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyword, opts...).ToFunc()
}

// ByIntroduction orders the results by the introduction field.
func ByIntroduction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntroduction, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByBarCode orders the results by the bar_code field.
func ByBarCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBarCode, opts...).ToFunc()
}

// ByCategoryID orders the results by the category_id field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}

// ByBrandID orders the results by the brand_id field.
func ByBrandID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandID, opts...).ToFunc()
}

// ByPicURL orders the results by the pic_url field.
func ByPicURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPicURL, opts...).ToFunc()
}

// ByVideoURL orders the results by the video_url field.
func ByVideoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoURL, opts...).ToFunc()
}

// ByUnit orders the results by the unit field.
func ByUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnit, opts...).ToFunc()
}

// BySpecType orders the results by the spec_type field.
func BySpecType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpecType, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByMarketPrice orders the results by the market_price field.
func ByMarketPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMarketPrice, opts...).ToFunc()
}

// ByCostPrice orders the results by the cost_price field.
func ByCostPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCostPrice, opts...).ToFunc()
}

// ByStock orders the results by the stock field.
func ByStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStock, opts...).ToFunc()
}

// ByDeliveryTemplateID orders the results by the deliveryTemplate_id field.
func ByDeliveryTemplateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryTemplateID, opts...).ToFunc()
}

// ByRecommendHot orders the results by the recommend_hot field.
func ByRecommendHot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecommendHot, opts...).ToFunc()
}

// ByRecommendBenefit orders the results by the recommend_benefit field.
func ByRecommendBenefit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecommendBenefit, opts...).ToFunc()
}

// ByRecommendBest orders the results by the recommend_best field.
func ByRecommendBest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecommendBest, opts...).ToFunc()
}

// ByRecommendNew orders the results by the recommend_new field.
func ByRecommendNew(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecommendNew, opts...).ToFunc()
}

// ByRecommendGood orders the results by the recommend_good field.
func ByRecommendGood(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecommendGood, opts...).ToFunc()
}

// ByGiveIntegral orders the results by the give_integral field.
func ByGiveIntegral(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGiveIntegral, opts...).ToFunc()
}

// BySubCommissionType orders the results by the sub_commission_type field.
func BySubCommissionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubCommissionType, opts...).ToFunc()
}

// BySalesCount orders the results by the sales_count field.
func BySalesCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalesCount, opts...).ToFunc()
}

// ByVirtualSalesCount orders the results by the virtual_sales_count field.
func ByVirtualSalesCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVirtualSalesCount, opts...).ToFunc()
}

// ByBrowseCount orders the results by the browse_count field.
func ByBrowseCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrowseCount, opts...).ToFunc()
}

// BySkusCount orders the results by skus count.
func BySkusCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSkusStep(), opts...)
	}
}

// BySkus orders the results by skus terms.
func BySkus(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkusStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBrandsField orders the results by brands field.
func ByBrandsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBrandsStep(), sql.OrderByField(field, opts...))
	}
}

// ByCategorysField orders the results by categorys field.
func ByCategorysField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategorysStep(), sql.OrderByField(field, opts...))
	}
}
func newSkusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SkusTable, SkusColumn),
	)
}
func newBrandsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BrandsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BrandsTable, BrandsColumn),
	)
}
func newCategorysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategorysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CategorysTable, CategorysColumn),
	)
}
