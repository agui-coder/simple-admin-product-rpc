// Code generated by ent, DO NOT EDIT.

package spu

import (
	"github.com/agui-coder/simple-admin-product-rpc/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldStatus, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v uint32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldSort, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldName, v))
}

// Keyword applies equality check predicate on the "keyword" field. It's identical to KeywordEQ.
func Keyword(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldKeyword, v))
}

// Introduction applies equality check predicate on the "introduction" field. It's identical to IntroductionEQ.
func Introduction(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldIntroduction, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldDescription, v))
}

// BarCode applies equality check predicate on the "bar_code" field. It's identical to BarCodeEQ.
func BarCode(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldBarCode, v))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldCategoryID, v))
}

// BrandID applies equality check predicate on the "brand_id" field. It's identical to BrandIDEQ.
func BrandID(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldBrandID, v))
}

// PicURL applies equality check predicate on the "pic_url" field. It's identical to PicURLEQ.
func PicURL(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldPicURL, v))
}

// VideoURL applies equality check predicate on the "video_url" field. It's identical to VideoURLEQ.
func VideoURL(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldVideoURL, v))
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldUnit, v))
}

// SpecType applies equality check predicate on the "spec_type" field. It's identical to SpecTypeEQ.
func SpecType(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldSpecType, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldPrice, v))
}

// MarketPrice applies equality check predicate on the "market_price" field. It's identical to MarketPriceEQ.
func MarketPrice(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldMarketPrice, v))
}

// CostPrice applies equality check predicate on the "cost_price" field. It's identical to CostPriceEQ.
func CostPrice(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldCostPrice, v))
}

// Stock applies equality check predicate on the "stock" field. It's identical to StockEQ.
func Stock(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldStock, v))
}

// DeliveryTemplateID applies equality check predicate on the "deliveryTemplate_id" field. It's identical to DeliveryTemplateIDEQ.
func DeliveryTemplateID(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldDeliveryTemplateID, v))
}

// RecommendHot applies equality check predicate on the "recommend_hot" field. It's identical to RecommendHotEQ.
func RecommendHot(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldRecommendHot, v))
}

// RecommendBenefit applies equality check predicate on the "recommend_benefit" field. It's identical to RecommendBenefitEQ.
func RecommendBenefit(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldRecommendBenefit, v))
}

// RecommendBest applies equality check predicate on the "recommend_best" field. It's identical to RecommendBestEQ.
func RecommendBest(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldRecommendBest, v))
}

// RecommendNew applies equality check predicate on the "recommend_new" field. It's identical to RecommendNewEQ.
func RecommendNew(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldRecommendNew, v))
}

// RecommendGood applies equality check predicate on the "recommend_good" field. It's identical to RecommendGoodEQ.
func RecommendGood(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldRecommendGood, v))
}

// GiveIntegral applies equality check predicate on the "give_integral" field. It's identical to GiveIntegralEQ.
func GiveIntegral(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldGiveIntegral, v))
}

// SubCommissionType applies equality check predicate on the "sub_commission_type" field. It's identical to SubCommissionTypeEQ.
func SubCommissionType(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldSubCommissionType, v))
}

// SalesCount applies equality check predicate on the "sales_count" field. It's identical to SalesCountEQ.
func SalesCount(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldSalesCount, v))
}

// VirtualSalesCount applies equality check predicate on the "virtual_sales_count" field. It's identical to VirtualSalesCountEQ.
func VirtualSalesCount(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldVirtualSalesCount, v))
}

// BrowseCount applies equality check predicate on the "browse_count" field. It's identical to BrowseCountEQ.
func BrowseCount(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldBrowseCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldStatus))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v uint32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v uint32) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...uint32) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...uint32) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v uint32) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v uint32) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v uint32) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v uint32) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldSort, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContainsFold(FieldName, v))
}

// KeywordEQ applies the EQ predicate on the "keyword" field.
func KeywordEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldKeyword, v))
}

// KeywordNEQ applies the NEQ predicate on the "keyword" field.
func KeywordNEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldKeyword, v))
}

// KeywordIn applies the In predicate on the "keyword" field.
func KeywordIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldKeyword, vs...))
}

// KeywordNotIn applies the NotIn predicate on the "keyword" field.
func KeywordNotIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldKeyword, vs...))
}

// KeywordGT applies the GT predicate on the "keyword" field.
func KeywordGT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldKeyword, v))
}

// KeywordGTE applies the GTE predicate on the "keyword" field.
func KeywordGTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldKeyword, v))
}

// KeywordLT applies the LT predicate on the "keyword" field.
func KeywordLT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldKeyword, v))
}

// KeywordLTE applies the LTE predicate on the "keyword" field.
func KeywordLTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldKeyword, v))
}

// KeywordContains applies the Contains predicate on the "keyword" field.
func KeywordContains(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContains(FieldKeyword, v))
}

// KeywordHasPrefix applies the HasPrefix predicate on the "keyword" field.
func KeywordHasPrefix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasPrefix(FieldKeyword, v))
}

// KeywordHasSuffix applies the HasSuffix predicate on the "keyword" field.
func KeywordHasSuffix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasSuffix(FieldKeyword, v))
}

// KeywordIsNil applies the IsNil predicate on the "keyword" field.
func KeywordIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldKeyword))
}

// KeywordNotNil applies the NotNil predicate on the "keyword" field.
func KeywordNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldKeyword))
}

// KeywordEqualFold applies the EqualFold predicate on the "keyword" field.
func KeywordEqualFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEqualFold(FieldKeyword, v))
}

// KeywordContainsFold applies the ContainsFold predicate on the "keyword" field.
func KeywordContainsFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContainsFold(FieldKeyword, v))
}

// IntroductionEQ applies the EQ predicate on the "introduction" field.
func IntroductionEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldIntroduction, v))
}

// IntroductionNEQ applies the NEQ predicate on the "introduction" field.
func IntroductionNEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldIntroduction, v))
}

// IntroductionIn applies the In predicate on the "introduction" field.
func IntroductionIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldIntroduction, vs...))
}

// IntroductionNotIn applies the NotIn predicate on the "introduction" field.
func IntroductionNotIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldIntroduction, vs...))
}

// IntroductionGT applies the GT predicate on the "introduction" field.
func IntroductionGT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldIntroduction, v))
}

// IntroductionGTE applies the GTE predicate on the "introduction" field.
func IntroductionGTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldIntroduction, v))
}

// IntroductionLT applies the LT predicate on the "introduction" field.
func IntroductionLT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldIntroduction, v))
}

// IntroductionLTE applies the LTE predicate on the "introduction" field.
func IntroductionLTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldIntroduction, v))
}

// IntroductionContains applies the Contains predicate on the "introduction" field.
func IntroductionContains(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContains(FieldIntroduction, v))
}

// IntroductionHasPrefix applies the HasPrefix predicate on the "introduction" field.
func IntroductionHasPrefix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasPrefix(FieldIntroduction, v))
}

// IntroductionHasSuffix applies the HasSuffix predicate on the "introduction" field.
func IntroductionHasSuffix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasSuffix(FieldIntroduction, v))
}

// IntroductionIsNil applies the IsNil predicate on the "introduction" field.
func IntroductionIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldIntroduction))
}

// IntroductionNotNil applies the NotNil predicate on the "introduction" field.
func IntroductionNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldIntroduction))
}

// IntroductionEqualFold applies the EqualFold predicate on the "introduction" field.
func IntroductionEqualFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEqualFold(FieldIntroduction, v))
}

// IntroductionContainsFold applies the ContainsFold predicate on the "introduction" field.
func IntroductionContainsFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContainsFold(FieldIntroduction, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContainsFold(FieldDescription, v))
}

// BarCodeEQ applies the EQ predicate on the "bar_code" field.
func BarCodeEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldBarCode, v))
}

// BarCodeNEQ applies the NEQ predicate on the "bar_code" field.
func BarCodeNEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldBarCode, v))
}

// BarCodeIn applies the In predicate on the "bar_code" field.
func BarCodeIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldBarCode, vs...))
}

// BarCodeNotIn applies the NotIn predicate on the "bar_code" field.
func BarCodeNotIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldBarCode, vs...))
}

// BarCodeGT applies the GT predicate on the "bar_code" field.
func BarCodeGT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldBarCode, v))
}

// BarCodeGTE applies the GTE predicate on the "bar_code" field.
func BarCodeGTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldBarCode, v))
}

// BarCodeLT applies the LT predicate on the "bar_code" field.
func BarCodeLT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldBarCode, v))
}

// BarCodeLTE applies the LTE predicate on the "bar_code" field.
func BarCodeLTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldBarCode, v))
}

// BarCodeContains applies the Contains predicate on the "bar_code" field.
func BarCodeContains(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContains(FieldBarCode, v))
}

// BarCodeHasPrefix applies the HasPrefix predicate on the "bar_code" field.
func BarCodeHasPrefix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasPrefix(FieldBarCode, v))
}

// BarCodeHasSuffix applies the HasSuffix predicate on the "bar_code" field.
func BarCodeHasSuffix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasSuffix(FieldBarCode, v))
}

// BarCodeIsNil applies the IsNil predicate on the "bar_code" field.
func BarCodeIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldBarCode))
}

// BarCodeNotNil applies the NotNil predicate on the "bar_code" field.
func BarCodeNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldBarCode))
}

// BarCodeEqualFold applies the EqualFold predicate on the "bar_code" field.
func BarCodeEqualFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEqualFold(FieldBarCode, v))
}

// BarCodeContainsFold applies the ContainsFold predicate on the "bar_code" field.
func BarCodeContainsFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContainsFold(FieldBarCode, v))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...uint64) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...uint64) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDIsNil applies the IsNil predicate on the "category_id" field.
func CategoryIDIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldCategoryID))
}

// CategoryIDNotNil applies the NotNil predicate on the "category_id" field.
func CategoryIDNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldCategoryID))
}

// BrandIDEQ applies the EQ predicate on the "brand_id" field.
func BrandIDEQ(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldBrandID, v))
}

// BrandIDNEQ applies the NEQ predicate on the "brand_id" field.
func BrandIDNEQ(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldBrandID, v))
}

// BrandIDIn applies the In predicate on the "brand_id" field.
func BrandIDIn(vs ...uint64) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldBrandID, vs...))
}

// BrandIDNotIn applies the NotIn predicate on the "brand_id" field.
func BrandIDNotIn(vs ...uint64) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldBrandID, vs...))
}

// BrandIDIsNil applies the IsNil predicate on the "brand_id" field.
func BrandIDIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldBrandID))
}

// BrandIDNotNil applies the NotNil predicate on the "brand_id" field.
func BrandIDNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldBrandID))
}

// PicURLEQ applies the EQ predicate on the "pic_url" field.
func PicURLEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldPicURL, v))
}

// PicURLNEQ applies the NEQ predicate on the "pic_url" field.
func PicURLNEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldPicURL, v))
}

// PicURLIn applies the In predicate on the "pic_url" field.
func PicURLIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldPicURL, vs...))
}

// PicURLNotIn applies the NotIn predicate on the "pic_url" field.
func PicURLNotIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldPicURL, vs...))
}

// PicURLGT applies the GT predicate on the "pic_url" field.
func PicURLGT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldPicURL, v))
}

// PicURLGTE applies the GTE predicate on the "pic_url" field.
func PicURLGTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldPicURL, v))
}

// PicURLLT applies the LT predicate on the "pic_url" field.
func PicURLLT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldPicURL, v))
}

// PicURLLTE applies the LTE predicate on the "pic_url" field.
func PicURLLTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldPicURL, v))
}

// PicURLContains applies the Contains predicate on the "pic_url" field.
func PicURLContains(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContains(FieldPicURL, v))
}

// PicURLHasPrefix applies the HasPrefix predicate on the "pic_url" field.
func PicURLHasPrefix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasPrefix(FieldPicURL, v))
}

// PicURLHasSuffix applies the HasSuffix predicate on the "pic_url" field.
func PicURLHasSuffix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasSuffix(FieldPicURL, v))
}

// PicURLEqualFold applies the EqualFold predicate on the "pic_url" field.
func PicURLEqualFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEqualFold(FieldPicURL, v))
}

// PicURLContainsFold applies the ContainsFold predicate on the "pic_url" field.
func PicURLContainsFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContainsFold(FieldPicURL, v))
}

// SliderPicUrlsIsNil applies the IsNil predicate on the "slider_pic_urls" field.
func SliderPicUrlsIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldSliderPicUrls))
}

// SliderPicUrlsNotNil applies the NotNil predicate on the "slider_pic_urls" field.
func SliderPicUrlsNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldSliderPicUrls))
}

// VideoURLEQ applies the EQ predicate on the "video_url" field.
func VideoURLEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldVideoURL, v))
}

// VideoURLNEQ applies the NEQ predicate on the "video_url" field.
func VideoURLNEQ(v string) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldVideoURL, v))
}

// VideoURLIn applies the In predicate on the "video_url" field.
func VideoURLIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldVideoURL, vs...))
}

// VideoURLNotIn applies the NotIn predicate on the "video_url" field.
func VideoURLNotIn(vs ...string) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldVideoURL, vs...))
}

// VideoURLGT applies the GT predicate on the "video_url" field.
func VideoURLGT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldVideoURL, v))
}

// VideoURLGTE applies the GTE predicate on the "video_url" field.
func VideoURLGTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldVideoURL, v))
}

// VideoURLLT applies the LT predicate on the "video_url" field.
func VideoURLLT(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldVideoURL, v))
}

// VideoURLLTE applies the LTE predicate on the "video_url" field.
func VideoURLLTE(v string) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldVideoURL, v))
}

// VideoURLContains applies the Contains predicate on the "video_url" field.
func VideoURLContains(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContains(FieldVideoURL, v))
}

// VideoURLHasPrefix applies the HasPrefix predicate on the "video_url" field.
func VideoURLHasPrefix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasPrefix(FieldVideoURL, v))
}

// VideoURLHasSuffix applies the HasSuffix predicate on the "video_url" field.
func VideoURLHasSuffix(v string) predicate.Spu {
	return predicate.Spu(sql.FieldHasSuffix(FieldVideoURL, v))
}

// VideoURLIsNil applies the IsNil predicate on the "video_url" field.
func VideoURLIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldVideoURL))
}

// VideoURLNotNil applies the NotNil predicate on the "video_url" field.
func VideoURLNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldVideoURL))
}

// VideoURLEqualFold applies the EqualFold predicate on the "video_url" field.
func VideoURLEqualFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldEqualFold(FieldVideoURL, v))
}

// VideoURLContainsFold applies the ContainsFold predicate on the "video_url" field.
func VideoURLContainsFold(v string) predicate.Spu {
	return predicate.Spu(sql.FieldContainsFold(FieldVideoURL, v))
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldUnit, v))
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldUnit, v))
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...uint8) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldUnit, vs...))
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...uint8) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldUnit, vs...))
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldUnit, v))
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldUnit, v))
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldUnit, v))
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v uint8) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldUnit, v))
}

// SpecTypeEQ applies the EQ predicate on the "spec_type" field.
func SpecTypeEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldSpecType, v))
}

// SpecTypeNEQ applies the NEQ predicate on the "spec_type" field.
func SpecTypeNEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldSpecType, v))
}

// SpecTypeIsNil applies the IsNil predicate on the "spec_type" field.
func SpecTypeIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldSpecType))
}

// SpecTypeNotNil applies the NotNil predicate on the "spec_type" field.
func SpecTypeNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldSpecType))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldPrice, v))
}

// MarketPriceEQ applies the EQ predicate on the "market_price" field.
func MarketPriceEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldMarketPrice, v))
}

// MarketPriceNEQ applies the NEQ predicate on the "market_price" field.
func MarketPriceNEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldMarketPrice, v))
}

// MarketPriceIn applies the In predicate on the "market_price" field.
func MarketPriceIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldMarketPrice, vs...))
}

// MarketPriceNotIn applies the NotIn predicate on the "market_price" field.
func MarketPriceNotIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldMarketPrice, vs...))
}

// MarketPriceGT applies the GT predicate on the "market_price" field.
func MarketPriceGT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldMarketPrice, v))
}

// MarketPriceGTE applies the GTE predicate on the "market_price" field.
func MarketPriceGTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldMarketPrice, v))
}

// MarketPriceLT applies the LT predicate on the "market_price" field.
func MarketPriceLT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldMarketPrice, v))
}

// MarketPriceLTE applies the LTE predicate on the "market_price" field.
func MarketPriceLTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldMarketPrice, v))
}

// MarketPriceIsNil applies the IsNil predicate on the "market_price" field.
func MarketPriceIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldMarketPrice))
}

// MarketPriceNotNil applies the NotNil predicate on the "market_price" field.
func MarketPriceNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldMarketPrice))
}

// CostPriceEQ applies the EQ predicate on the "cost_price" field.
func CostPriceEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldCostPrice, v))
}

// CostPriceNEQ applies the NEQ predicate on the "cost_price" field.
func CostPriceNEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldCostPrice, v))
}

// CostPriceIn applies the In predicate on the "cost_price" field.
func CostPriceIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldCostPrice, vs...))
}

// CostPriceNotIn applies the NotIn predicate on the "cost_price" field.
func CostPriceNotIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldCostPrice, vs...))
}

// CostPriceGT applies the GT predicate on the "cost_price" field.
func CostPriceGT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldCostPrice, v))
}

// CostPriceGTE applies the GTE predicate on the "cost_price" field.
func CostPriceGTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldCostPrice, v))
}

// CostPriceLT applies the LT predicate on the "cost_price" field.
func CostPriceLT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldCostPrice, v))
}

// CostPriceLTE applies the LTE predicate on the "cost_price" field.
func CostPriceLTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldCostPrice, v))
}

// StockEQ applies the EQ predicate on the "stock" field.
func StockEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldStock, v))
}

// StockNEQ applies the NEQ predicate on the "stock" field.
func StockNEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldStock, v))
}

// StockIn applies the In predicate on the "stock" field.
func StockIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldStock, vs...))
}

// StockNotIn applies the NotIn predicate on the "stock" field.
func StockNotIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldStock, vs...))
}

// StockGT applies the GT predicate on the "stock" field.
func StockGT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldStock, v))
}

// StockGTE applies the GTE predicate on the "stock" field.
func StockGTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldStock, v))
}

// StockLT applies the LT predicate on the "stock" field.
func StockLT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldStock, v))
}

// StockLTE applies the LTE predicate on the "stock" field.
func StockLTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldStock, v))
}

// DeliveryTemplateIDEQ applies the EQ predicate on the "deliveryTemplate_id" field.
func DeliveryTemplateIDEQ(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldDeliveryTemplateID, v))
}

// DeliveryTemplateIDNEQ applies the NEQ predicate on the "deliveryTemplate_id" field.
func DeliveryTemplateIDNEQ(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldDeliveryTemplateID, v))
}

// DeliveryTemplateIDIn applies the In predicate on the "deliveryTemplate_id" field.
func DeliveryTemplateIDIn(vs ...uint64) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldDeliveryTemplateID, vs...))
}

// DeliveryTemplateIDNotIn applies the NotIn predicate on the "deliveryTemplate_id" field.
func DeliveryTemplateIDNotIn(vs ...uint64) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldDeliveryTemplateID, vs...))
}

// DeliveryTemplateIDGT applies the GT predicate on the "deliveryTemplate_id" field.
func DeliveryTemplateIDGT(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldDeliveryTemplateID, v))
}

// DeliveryTemplateIDGTE applies the GTE predicate on the "deliveryTemplate_id" field.
func DeliveryTemplateIDGTE(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldDeliveryTemplateID, v))
}

// DeliveryTemplateIDLT applies the LT predicate on the "deliveryTemplate_id" field.
func DeliveryTemplateIDLT(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldDeliveryTemplateID, v))
}

// DeliveryTemplateIDLTE applies the LTE predicate on the "deliveryTemplate_id" field.
func DeliveryTemplateIDLTE(v uint64) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldDeliveryTemplateID, v))
}

// DeliveryTemplateIDIsNil applies the IsNil predicate on the "deliveryTemplate_id" field.
func DeliveryTemplateIDIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldDeliveryTemplateID))
}

// DeliveryTemplateIDNotNil applies the NotNil predicate on the "deliveryTemplate_id" field.
func DeliveryTemplateIDNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldDeliveryTemplateID))
}

// RecommendHotEQ applies the EQ predicate on the "recommend_hot" field.
func RecommendHotEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldRecommendHot, v))
}

// RecommendHotNEQ applies the NEQ predicate on the "recommend_hot" field.
func RecommendHotNEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldRecommendHot, v))
}

// RecommendHotIsNil applies the IsNil predicate on the "recommend_hot" field.
func RecommendHotIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldRecommendHot))
}

// RecommendHotNotNil applies the NotNil predicate on the "recommend_hot" field.
func RecommendHotNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldRecommendHot))
}

// RecommendBenefitEQ applies the EQ predicate on the "recommend_benefit" field.
func RecommendBenefitEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldRecommendBenefit, v))
}

// RecommendBenefitNEQ applies the NEQ predicate on the "recommend_benefit" field.
func RecommendBenefitNEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldRecommendBenefit, v))
}

// RecommendBenefitIsNil applies the IsNil predicate on the "recommend_benefit" field.
func RecommendBenefitIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldRecommendBenefit))
}

// RecommendBenefitNotNil applies the NotNil predicate on the "recommend_benefit" field.
func RecommendBenefitNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldRecommendBenefit))
}

// RecommendBestEQ applies the EQ predicate on the "recommend_best" field.
func RecommendBestEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldRecommendBest, v))
}

// RecommendBestNEQ applies the NEQ predicate on the "recommend_best" field.
func RecommendBestNEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldRecommendBest, v))
}

// RecommendBestIsNil applies the IsNil predicate on the "recommend_best" field.
func RecommendBestIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldRecommendBest))
}

// RecommendBestNotNil applies the NotNil predicate on the "recommend_best" field.
func RecommendBestNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldRecommendBest))
}

// RecommendNewEQ applies the EQ predicate on the "recommend_new" field.
func RecommendNewEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldRecommendNew, v))
}

// RecommendNewNEQ applies the NEQ predicate on the "recommend_new" field.
func RecommendNewNEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldRecommendNew, v))
}

// RecommendNewIsNil applies the IsNil predicate on the "recommend_new" field.
func RecommendNewIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldRecommendNew))
}

// RecommendNewNotNil applies the NotNil predicate on the "recommend_new" field.
func RecommendNewNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldRecommendNew))
}

// RecommendGoodEQ applies the EQ predicate on the "recommend_good" field.
func RecommendGoodEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldRecommendGood, v))
}

// RecommendGoodNEQ applies the NEQ predicate on the "recommend_good" field.
func RecommendGoodNEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldRecommendGood, v))
}

// RecommendGoodIsNil applies the IsNil predicate on the "recommend_good" field.
func RecommendGoodIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldRecommendGood))
}

// RecommendGoodNotNil applies the NotNil predicate on the "recommend_good" field.
func RecommendGoodNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldRecommendGood))
}

// GiveIntegralEQ applies the EQ predicate on the "give_integral" field.
func GiveIntegralEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldGiveIntegral, v))
}

// GiveIntegralNEQ applies the NEQ predicate on the "give_integral" field.
func GiveIntegralNEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldGiveIntegral, v))
}

// GiveIntegralIn applies the In predicate on the "give_integral" field.
func GiveIntegralIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldGiveIntegral, vs...))
}

// GiveIntegralNotIn applies the NotIn predicate on the "give_integral" field.
func GiveIntegralNotIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldGiveIntegral, vs...))
}

// GiveIntegralGT applies the GT predicate on the "give_integral" field.
func GiveIntegralGT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldGiveIntegral, v))
}

// GiveIntegralGTE applies the GTE predicate on the "give_integral" field.
func GiveIntegralGTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldGiveIntegral, v))
}

// GiveIntegralLT applies the LT predicate on the "give_integral" field.
func GiveIntegralLT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldGiveIntegral, v))
}

// GiveIntegralLTE applies the LTE predicate on the "give_integral" field.
func GiveIntegralLTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldGiveIntegral, v))
}

// GiveIntegralIsNil applies the IsNil predicate on the "give_integral" field.
func GiveIntegralIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldGiveIntegral))
}

// GiveIntegralNotNil applies the NotNil predicate on the "give_integral" field.
func GiveIntegralNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldGiveIntegral))
}

// GiveCouponTemplateIdsIsNil applies the IsNil predicate on the "give_coupon_template_ids" field.
func GiveCouponTemplateIdsIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldGiveCouponTemplateIds))
}

// GiveCouponTemplateIdsNotNil applies the NotNil predicate on the "give_coupon_template_ids" field.
func GiveCouponTemplateIdsNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldGiveCouponTemplateIds))
}

// SubCommissionTypeEQ applies the EQ predicate on the "sub_commission_type" field.
func SubCommissionTypeEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldSubCommissionType, v))
}

// SubCommissionTypeNEQ applies the NEQ predicate on the "sub_commission_type" field.
func SubCommissionTypeNEQ(v bool) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldSubCommissionType, v))
}

// SubCommissionTypeIsNil applies the IsNil predicate on the "sub_commission_type" field.
func SubCommissionTypeIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldSubCommissionType))
}

// SubCommissionTypeNotNil applies the NotNil predicate on the "sub_commission_type" field.
func SubCommissionTypeNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldSubCommissionType))
}

// ActivityOrdersIsNil applies the IsNil predicate on the "activity_orders" field.
func ActivityOrdersIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldActivityOrders))
}

// ActivityOrdersNotNil applies the NotNil predicate on the "activity_orders" field.
func ActivityOrdersNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldActivityOrders))
}

// SalesCountEQ applies the EQ predicate on the "sales_count" field.
func SalesCountEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldSalesCount, v))
}

// SalesCountNEQ applies the NEQ predicate on the "sales_count" field.
func SalesCountNEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldSalesCount, v))
}

// SalesCountIn applies the In predicate on the "sales_count" field.
func SalesCountIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldSalesCount, vs...))
}

// SalesCountNotIn applies the NotIn predicate on the "sales_count" field.
func SalesCountNotIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldSalesCount, vs...))
}

// SalesCountGT applies the GT predicate on the "sales_count" field.
func SalesCountGT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldSalesCount, v))
}

// SalesCountGTE applies the GTE predicate on the "sales_count" field.
func SalesCountGTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldSalesCount, v))
}

// SalesCountLT applies the LT predicate on the "sales_count" field.
func SalesCountLT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldSalesCount, v))
}

// SalesCountLTE applies the LTE predicate on the "sales_count" field.
func SalesCountLTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldSalesCount, v))
}

// SalesCountIsNil applies the IsNil predicate on the "sales_count" field.
func SalesCountIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldSalesCount))
}

// SalesCountNotNil applies the NotNil predicate on the "sales_count" field.
func SalesCountNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldSalesCount))
}

// VirtualSalesCountEQ applies the EQ predicate on the "virtual_sales_count" field.
func VirtualSalesCountEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldVirtualSalesCount, v))
}

// VirtualSalesCountNEQ applies the NEQ predicate on the "virtual_sales_count" field.
func VirtualSalesCountNEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldVirtualSalesCount, v))
}

// VirtualSalesCountIn applies the In predicate on the "virtual_sales_count" field.
func VirtualSalesCountIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldVirtualSalesCount, vs...))
}

// VirtualSalesCountNotIn applies the NotIn predicate on the "virtual_sales_count" field.
func VirtualSalesCountNotIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldVirtualSalesCount, vs...))
}

// VirtualSalesCountGT applies the GT predicate on the "virtual_sales_count" field.
func VirtualSalesCountGT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldVirtualSalesCount, v))
}

// VirtualSalesCountGTE applies the GTE predicate on the "virtual_sales_count" field.
func VirtualSalesCountGTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldVirtualSalesCount, v))
}

// VirtualSalesCountLT applies the LT predicate on the "virtual_sales_count" field.
func VirtualSalesCountLT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldVirtualSalesCount, v))
}

// VirtualSalesCountLTE applies the LTE predicate on the "virtual_sales_count" field.
func VirtualSalesCountLTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldVirtualSalesCount, v))
}

// VirtualSalesCountIsNil applies the IsNil predicate on the "virtual_sales_count" field.
func VirtualSalesCountIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldVirtualSalesCount))
}

// VirtualSalesCountNotNil applies the NotNil predicate on the "virtual_sales_count" field.
func VirtualSalesCountNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldVirtualSalesCount))
}

// BrowseCountEQ applies the EQ predicate on the "browse_count" field.
func BrowseCountEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldEQ(FieldBrowseCount, v))
}

// BrowseCountNEQ applies the NEQ predicate on the "browse_count" field.
func BrowseCountNEQ(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldNEQ(FieldBrowseCount, v))
}

// BrowseCountIn applies the In predicate on the "browse_count" field.
func BrowseCountIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldIn(FieldBrowseCount, vs...))
}

// BrowseCountNotIn applies the NotIn predicate on the "browse_count" field.
func BrowseCountNotIn(vs ...int32) predicate.Spu {
	return predicate.Spu(sql.FieldNotIn(FieldBrowseCount, vs...))
}

// BrowseCountGT applies the GT predicate on the "browse_count" field.
func BrowseCountGT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGT(FieldBrowseCount, v))
}

// BrowseCountGTE applies the GTE predicate on the "browse_count" field.
func BrowseCountGTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldGTE(FieldBrowseCount, v))
}

// BrowseCountLT applies the LT predicate on the "browse_count" field.
func BrowseCountLT(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLT(FieldBrowseCount, v))
}

// BrowseCountLTE applies the LTE predicate on the "browse_count" field.
func BrowseCountLTE(v int32) predicate.Spu {
	return predicate.Spu(sql.FieldLTE(FieldBrowseCount, v))
}

// BrowseCountIsNil applies the IsNil predicate on the "browse_count" field.
func BrowseCountIsNil() predicate.Spu {
	return predicate.Spu(sql.FieldIsNull(FieldBrowseCount))
}

// BrowseCountNotNil applies the NotNil predicate on the "browse_count" field.
func BrowseCountNotNil() predicate.Spu {
	return predicate.Spu(sql.FieldNotNull(FieldBrowseCount))
}

// HasSkus applies the HasEdge predicate on the "skus" edge.
func HasSkus() predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SkusTable, SkusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSkusWith applies the HasEdge predicate on the "skus" edge with a given conditions (other predicates).
func HasSkusWith(preds ...predicate.Sku) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := newSkusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBrands applies the HasEdge predicate on the "brands" edge.
func HasBrands() predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BrandsTable, BrandsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBrandsWith applies the HasEdge predicate on the "brands" edge with a given conditions (other predicates).
func HasBrandsWith(preds ...predicate.Brand) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := newBrandsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategorys applies the HasEdge predicate on the "categorys" edge.
func HasCategorys() predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CategorysTable, CategorysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategorysWith applies the HasEdge predicate on the "categorys" edge with a given conditions (other predicates).
func HasCategorysWith(preds ...predicate.Category) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := newCategorysStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Spu) predicate.Spu {
	return predicate.Spu(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Spu) predicate.Spu {
	return predicate.Spu(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Spu) predicate.Spu {
	return predicate.Spu(sql.NotPredicates(p))
}
