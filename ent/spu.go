// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"github.com/agui-coder/simple-admin-product-rpc/ent/brand"
	"github.com/agui-coder/simple-admin-product-rpc/ent/category"
	"github.com/agui-coder/simple-admin-product-rpc/ent/spu"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Spu is the model entity for the Spu schema.
type Spu struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Sort Number | 排序编号
	Sort uint32 `json:"sort,omitempty"`
	// Delete Time | 删除日期
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 商品名称
	Name string `json:"name,omitempty"`
	// 关键字
	Keyword string `json:"keyword,omitempty"`
	// 商品简介
	Introduction string `json:"introduction,omitempty"`
	// 商品详情
	Description string `json:"description,omitempty"`
	// 条形码
	BarCode string `json:"bar_code,omitempty"`
	// 商品分类编号
	CategoryID uint64 `json:"category_id,omitempty"`
	// 商品品牌编号
	BrandID uint64 `json:"brand_id,omitempty"`
	// 商品封面图
	PicURL string `json:"pic_url,omitempty"`
	// 商品轮播图地址数组，以逗号分隔最多上传15张
	SliderPicUrls []string `json:"slider_pic_urls,omitempty"`
	// 商品视频
	VideoURL string `json:"video_url,omitempty"`
	// 单位
	Unit uint8 `json:"unit,omitempty"`
	// 规格类型：0 单规格 1 多规格
	SpecType bool `json:"spec_type,omitempty"`
	// 商品价格，单位使用：分
	Price int32 `json:"price,omitempty"`
	// 市场价，单位使用：分
	MarketPrice int32 `json:"market_price,omitempty"`
	// 成本价，单位： 分
	CostPrice int32 `json:"cost_price,omitempty"`
	// 库存
	Stock int32 `json:"stock,omitempty"`
	// 物流配置模板编号
	DeliveryTemplateID uint64 `json:"deliveryTemplate_id,omitempty"`
	// 是否热卖推荐
	RecommendHot bool `json:"recommend_hot,omitempty"`
	// 是否优惠推荐
	RecommendBenefit bool `json:"recommend_benefit,omitempty"`
	// 是否精品推荐
	RecommendBest bool `json:"recommend_best,omitempty"`
	// 是否新品推荐
	RecommendNew bool `json:"recommend_new,omitempty"`
	// 是否优品推荐
	RecommendGood bool `json:"recommend_good,omitempty"`
	// 赠送积分
	GiveIntegral int32 `json:"give_integral,omitempty"`
	// 赠送积分
	GiveCouponTemplateIds []uint64 `json:"give_coupon_template_ids,omitempty"`
	// 赠送积分
	SubCommissionType bool `json:"sub_commission_type,omitempty"`
	// 赠送积分
	ActivityOrders []int32 `json:"activity_orders,omitempty"`
	// 商品销量
	SalesCount int32 `json:"sales_count,omitempty"`
	// 虚拟销量
	VirtualSalesCount int32 `json:"virtual_sales_count,omitempty"`
	// 商品点击量
	BrowseCount int32 `json:"browse_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpuQuery when eager-loading is set.
	Edges        SpuEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SpuEdges holds the relations/edges for other nodes in the graph.
type SpuEdges struct {
	// Skus holds the value of the skus edge.
	Skus []*Sku `json:"skus,omitempty"`
	// Brands holds the value of the brands edge.
	Brands *Brand `json:"brands,omitempty"`
	// Categorys holds the value of the categorys edge.
	Categorys *Category `json:"categorys,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SkusOrErr returns the Skus value or an error if the edge
// was not loaded in eager-loading.
func (e SpuEdges) SkusOrErr() ([]*Sku, error) {
	if e.loadedTypes[0] {
		return e.Skus, nil
	}
	return nil, &NotLoadedError{edge: "skus"}
}

// BrandsOrErr returns the Brands value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SpuEdges) BrandsOrErr() (*Brand, error) {
	if e.loadedTypes[1] {
		if e.Brands == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: brand.Label}
		}
		return e.Brands, nil
	}
	return nil, &NotLoadedError{edge: "brands"}
}

// CategorysOrErr returns the Categorys value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SpuEdges) CategorysOrErr() (*Category, error) {
	if e.loadedTypes[2] {
		if e.Categorys == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.Categorys, nil
	}
	return nil, &NotLoadedError{edge: "categorys"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Spu) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spu.FieldSliderPicUrls, spu.FieldGiveCouponTemplateIds, spu.FieldActivityOrders:
			values[i] = new([]byte)
		case spu.FieldSpecType, spu.FieldRecommendHot, spu.FieldRecommendBenefit, spu.FieldRecommendBest, spu.FieldRecommendNew, spu.FieldRecommendGood, spu.FieldSubCommissionType:
			values[i] = new(sql.NullBool)
		case spu.FieldID, spu.FieldStatus, spu.FieldSort, spu.FieldCategoryID, spu.FieldBrandID, spu.FieldUnit, spu.FieldPrice, spu.FieldMarketPrice, spu.FieldCostPrice, spu.FieldStock, spu.FieldDeliveryTemplateID, spu.FieldGiveIntegral, spu.FieldSalesCount, spu.FieldVirtualSalesCount, spu.FieldBrowseCount:
			values[i] = new(sql.NullInt64)
		case spu.FieldName, spu.FieldKeyword, spu.FieldIntroduction, spu.FieldDescription, spu.FieldBarCode, spu.FieldPicURL, spu.FieldVideoURL:
			values[i] = new(sql.NullString)
		case spu.FieldCreatedAt, spu.FieldUpdatedAt, spu.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Spu fields.
func (s *Spu) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case spu.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case spu.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case spu.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = uint8(value.Int64)
			}
		case spu.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				s.Sort = uint32(value.Int64)
			}
		case spu.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		case spu.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case spu.FieldKeyword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keyword", values[i])
			} else if value.Valid {
				s.Keyword = value.String
			}
		case spu.FieldIntroduction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field introduction", values[i])
			} else if value.Valid {
				s.Introduction = value.String
			}
		case spu.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case spu.FieldBarCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bar_code", values[i])
			} else if value.Valid {
				s.BarCode = value.String
			}
		case spu.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				s.CategoryID = uint64(value.Int64)
			}
		case spu.FieldBrandID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field brand_id", values[i])
			} else if value.Valid {
				s.BrandID = uint64(value.Int64)
			}
		case spu.FieldPicURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic_url", values[i])
			} else if value.Valid {
				s.PicURL = value.String
			}
		case spu.FieldSliderPicUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field slider_pic_urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.SliderPicUrls); err != nil {
					return fmt.Errorf("unmarshal field slider_pic_urls: %w", err)
				}
			}
		case spu.FieldVideoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_url", values[i])
			} else if value.Valid {
				s.VideoURL = value.String
			}
		case spu.FieldUnit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				s.Unit = uint8(value.Int64)
			}
		case spu.FieldSpecType:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field spec_type", values[i])
			} else if value.Valid {
				s.SpecType = value.Bool
			}
		case spu.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				s.Price = int32(value.Int64)
			}
		case spu.FieldMarketPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field market_price", values[i])
			} else if value.Valid {
				s.MarketPrice = int32(value.Int64)
			}
		case spu.FieldCostPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cost_price", values[i])
			} else if value.Valid {
				s.CostPrice = int32(value.Int64)
			}
		case spu.FieldStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock", values[i])
			} else if value.Valid {
				s.Stock = int32(value.Int64)
			}
		case spu.FieldDeliveryTemplateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deliveryTemplate_id", values[i])
			} else if value.Valid {
				s.DeliveryTemplateID = uint64(value.Int64)
			}
		case spu.FieldRecommendHot:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field recommend_hot", values[i])
			} else if value.Valid {
				s.RecommendHot = value.Bool
			}
		case spu.FieldRecommendBenefit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field recommend_benefit", values[i])
			} else if value.Valid {
				s.RecommendBenefit = value.Bool
			}
		case spu.FieldRecommendBest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field recommend_best", values[i])
			} else if value.Valid {
				s.RecommendBest = value.Bool
			}
		case spu.FieldRecommendNew:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field recommend_new", values[i])
			} else if value.Valid {
				s.RecommendNew = value.Bool
			}
		case spu.FieldRecommendGood:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field recommend_good", values[i])
			} else if value.Valid {
				s.RecommendGood = value.Bool
			}
		case spu.FieldGiveIntegral:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field give_integral", values[i])
			} else if value.Valid {
				s.GiveIntegral = int32(value.Int64)
			}
		case spu.FieldGiveCouponTemplateIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field give_coupon_template_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.GiveCouponTemplateIds); err != nil {
					return fmt.Errorf("unmarshal field give_coupon_template_ids: %w", err)
				}
			}
		case spu.FieldSubCommissionType:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sub_commission_type", values[i])
			} else if value.Valid {
				s.SubCommissionType = value.Bool
			}
		case spu.FieldActivityOrders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field activity_orders", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.ActivityOrders); err != nil {
					return fmt.Errorf("unmarshal field activity_orders: %w", err)
				}
			}
		case spu.FieldSalesCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sales_count", values[i])
			} else if value.Valid {
				s.SalesCount = int32(value.Int64)
			}
		case spu.FieldVirtualSalesCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field virtual_sales_count", values[i])
			} else if value.Valid {
				s.VirtualSalesCount = int32(value.Int64)
			}
		case spu.FieldBrowseCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field browse_count", values[i])
			} else if value.Valid {
				s.BrowseCount = int32(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Spu.
// This includes values selected through modifiers, order, etc.
func (s *Spu) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QuerySkus queries the "skus" edge of the Spu entity.
func (s *Spu) QuerySkus() *SkuQuery {
	return NewSpuClient(s.config).QuerySkus(s)
}

// QueryBrands queries the "brands" edge of the Spu entity.
func (s *Spu) QueryBrands() *BrandQuery {
	return NewSpuClient(s.config).QueryBrands(s)
}

// QueryCategorys queries the "categorys" edge of the Spu entity.
func (s *Spu) QueryCategorys() *CategoryQuery {
	return NewSpuClient(s.config).QueryCategorys(s)
}

// Update returns a builder for updating this Spu.
// Note that you need to call Spu.Unwrap() before calling this method if this Spu
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Spu) Update() *SpuUpdateOne {
	return NewSpuClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Spu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Spu) Unwrap() *Spu {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Spu is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Spu) String() string {
	var builder strings.Builder
	builder.WriteString("Spu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", s.Sort))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("keyword=")
	builder.WriteString(s.Keyword)
	builder.WriteString(", ")
	builder.WriteString("introduction=")
	builder.WriteString(s.Introduction)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("bar_code=")
	builder.WriteString(s.BarCode)
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("brand_id=")
	builder.WriteString(fmt.Sprintf("%v", s.BrandID))
	builder.WriteString(", ")
	builder.WriteString("pic_url=")
	builder.WriteString(s.PicURL)
	builder.WriteString(", ")
	builder.WriteString("slider_pic_urls=")
	builder.WriteString(fmt.Sprintf("%v", s.SliderPicUrls))
	builder.WriteString(", ")
	builder.WriteString("video_url=")
	builder.WriteString(s.VideoURL)
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(fmt.Sprintf("%v", s.Unit))
	builder.WriteString(", ")
	builder.WriteString("spec_type=")
	builder.WriteString(fmt.Sprintf("%v", s.SpecType))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", s.Price))
	builder.WriteString(", ")
	builder.WriteString("market_price=")
	builder.WriteString(fmt.Sprintf("%v", s.MarketPrice))
	builder.WriteString(", ")
	builder.WriteString("cost_price=")
	builder.WriteString(fmt.Sprintf("%v", s.CostPrice))
	builder.WriteString(", ")
	builder.WriteString("stock=")
	builder.WriteString(fmt.Sprintf("%v", s.Stock))
	builder.WriteString(", ")
	builder.WriteString("deliveryTemplate_id=")
	builder.WriteString(fmt.Sprintf("%v", s.DeliveryTemplateID))
	builder.WriteString(", ")
	builder.WriteString("recommend_hot=")
	builder.WriteString(fmt.Sprintf("%v", s.RecommendHot))
	builder.WriteString(", ")
	builder.WriteString("recommend_benefit=")
	builder.WriteString(fmt.Sprintf("%v", s.RecommendBenefit))
	builder.WriteString(", ")
	builder.WriteString("recommend_best=")
	builder.WriteString(fmt.Sprintf("%v", s.RecommendBest))
	builder.WriteString(", ")
	builder.WriteString("recommend_new=")
	builder.WriteString(fmt.Sprintf("%v", s.RecommendNew))
	builder.WriteString(", ")
	builder.WriteString("recommend_good=")
	builder.WriteString(fmt.Sprintf("%v", s.RecommendGood))
	builder.WriteString(", ")
	builder.WriteString("give_integral=")
	builder.WriteString(fmt.Sprintf("%v", s.GiveIntegral))
	builder.WriteString(", ")
	builder.WriteString("give_coupon_template_ids=")
	builder.WriteString(fmt.Sprintf("%v", s.GiveCouponTemplateIds))
	builder.WriteString(", ")
	builder.WriteString("sub_commission_type=")
	builder.WriteString(fmt.Sprintf("%v", s.SubCommissionType))
	builder.WriteString(", ")
	builder.WriteString("activity_orders=")
	builder.WriteString(fmt.Sprintf("%v", s.ActivityOrders))
	builder.WriteString(", ")
	builder.WriteString("sales_count=")
	builder.WriteString(fmt.Sprintf("%v", s.SalesCount))
	builder.WriteString(", ")
	builder.WriteString("virtual_sales_count=")
	builder.WriteString(fmt.Sprintf("%v", s.VirtualSalesCount))
	builder.WriteString(", ")
	builder.WriteString("browse_count=")
	builder.WriteString(fmt.Sprintf("%v", s.BrowseCount))
	builder.WriteByte(')')
	return builder.String()
}

// Spus is a parsable slice of Spu.
type Spus []*Spu
