// Code generated by ent, DO NOT EDIT.

package category

import (
	"github.com/agui-coder/simple-admin-product-rpc/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldStatus, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v uint32) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldSort, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldDeletedAt, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uint64) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldParentID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldName, v))
}

// PicURL applies equality check predicate on the "pic_url" field. It's identical to PicURLEQ.
func PicURL(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldPicURL, v))
}

// BigPicURL applies equality check predicate on the "big_pic_url" field. It's identical to BigPicURLEQ.
func BigPicURL(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldBigPicURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldStatus))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v uint32) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v uint32) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...uint32) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...uint32) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v uint32) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v uint32) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v uint32) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v uint32) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldSort, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldDeletedAt))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uint64) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uint64) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uint64) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uint64) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldParentID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Category {
	return predicate.Category(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Category {
	return predicate.Category(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Category {
	return predicate.Category(sql.FieldContainsFold(FieldName, v))
}

// PicURLEQ applies the EQ predicate on the "pic_url" field.
func PicURLEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldPicURL, v))
}

// PicURLNEQ applies the NEQ predicate on the "pic_url" field.
func PicURLNEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldPicURL, v))
}

// PicURLIn applies the In predicate on the "pic_url" field.
func PicURLIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldPicURL, vs...))
}

// PicURLNotIn applies the NotIn predicate on the "pic_url" field.
func PicURLNotIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldPicURL, vs...))
}

// PicURLGT applies the GT predicate on the "pic_url" field.
func PicURLGT(v string) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldPicURL, v))
}

// PicURLGTE applies the GTE predicate on the "pic_url" field.
func PicURLGTE(v string) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldPicURL, v))
}

// PicURLLT applies the LT predicate on the "pic_url" field.
func PicURLLT(v string) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldPicURL, v))
}

// PicURLLTE applies the LTE predicate on the "pic_url" field.
func PicURLLTE(v string) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldPicURL, v))
}

// PicURLContains applies the Contains predicate on the "pic_url" field.
func PicURLContains(v string) predicate.Category {
	return predicate.Category(sql.FieldContains(FieldPicURL, v))
}

// PicURLHasPrefix applies the HasPrefix predicate on the "pic_url" field.
func PicURLHasPrefix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasPrefix(FieldPicURL, v))
}

// PicURLHasSuffix applies the HasSuffix predicate on the "pic_url" field.
func PicURLHasSuffix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasSuffix(FieldPicURL, v))
}

// PicURLEqualFold applies the EqualFold predicate on the "pic_url" field.
func PicURLEqualFold(v string) predicate.Category {
	return predicate.Category(sql.FieldEqualFold(FieldPicURL, v))
}

// PicURLContainsFold applies the ContainsFold predicate on the "pic_url" field.
func PicURLContainsFold(v string) predicate.Category {
	return predicate.Category(sql.FieldContainsFold(FieldPicURL, v))
}

// BigPicURLEQ applies the EQ predicate on the "big_pic_url" field.
func BigPicURLEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldBigPicURL, v))
}

// BigPicURLNEQ applies the NEQ predicate on the "big_pic_url" field.
func BigPicURLNEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldBigPicURL, v))
}

// BigPicURLIn applies the In predicate on the "big_pic_url" field.
func BigPicURLIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldBigPicURL, vs...))
}

// BigPicURLNotIn applies the NotIn predicate on the "big_pic_url" field.
func BigPicURLNotIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldBigPicURL, vs...))
}

// BigPicURLGT applies the GT predicate on the "big_pic_url" field.
func BigPicURLGT(v string) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldBigPicURL, v))
}

// BigPicURLGTE applies the GTE predicate on the "big_pic_url" field.
func BigPicURLGTE(v string) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldBigPicURL, v))
}

// BigPicURLLT applies the LT predicate on the "big_pic_url" field.
func BigPicURLLT(v string) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldBigPicURL, v))
}

// BigPicURLLTE applies the LTE predicate on the "big_pic_url" field.
func BigPicURLLTE(v string) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldBigPicURL, v))
}

// BigPicURLContains applies the Contains predicate on the "big_pic_url" field.
func BigPicURLContains(v string) predicate.Category {
	return predicate.Category(sql.FieldContains(FieldBigPicURL, v))
}

// BigPicURLHasPrefix applies the HasPrefix predicate on the "big_pic_url" field.
func BigPicURLHasPrefix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasPrefix(FieldBigPicURL, v))
}

// BigPicURLHasSuffix applies the HasSuffix predicate on the "big_pic_url" field.
func BigPicURLHasSuffix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasSuffix(FieldBigPicURL, v))
}

// BigPicURLIsNil applies the IsNil predicate on the "big_pic_url" field.
func BigPicURLIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldBigPicURL))
}

// BigPicURLNotNil applies the NotNil predicate on the "big_pic_url" field.
func BigPicURLNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldBigPicURL))
}

// BigPicURLEqualFold applies the EqualFold predicate on the "big_pic_url" field.
func BigPicURLEqualFold(v string) predicate.Category {
	return predicate.Category(sql.FieldEqualFold(FieldBigPicURL, v))
}

// BigPicURLContainsFold applies the ContainsFold predicate on the "big_pic_url" field.
func BigPicURLContainsFold(v string) predicate.Category {
	return predicate.Category(sql.FieldContainsFold(FieldBigPicURL, v))
}

// HasSpus applies the HasEdge predicate on the "spus" edge.
func HasSpus() predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SpusTable, SpusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSpusWith applies the HasEdge predicate on the "spus" edge with a given conditions (other predicates).
func HasSpusWith(preds ...predicate.Spu) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		step := newSpusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Category) predicate.Category {
	return predicate.Category(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Category) predicate.Category {
	return predicate.Category(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Category) predicate.Category {
	return predicate.Category(sql.NotPredicates(p))
}
