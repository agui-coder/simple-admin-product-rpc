// Code generated by ent, DO NOT EDIT.

package comment

import (
	"github.com/agui-coder/simple-admin-product-rpc/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserID, v))
}

// UserNickname applies equality check predicate on the "user_nickname" field. It's identical to UserNicknameEQ.
func UserNickname(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserNickname, v))
}

// UserAvatar applies equality check predicate on the "user_avatar" field. It's identical to UserAvatarEQ.
func UserAvatar(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserAvatar, v))
}

// Anonymous applies equality check predicate on the "anonymous" field. It's identical to AnonymousEQ.
func Anonymous(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldAnonymous, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldOrderID, v))
}

// OrderItemID applies equality check predicate on the "order_item_id" field. It's identical to OrderItemIDEQ.
func OrderItemID(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldOrderItemID, v))
}

// SpuID applies equality check predicate on the "spu_id" field. It's identical to SpuIDEQ.
func SpuID(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldSpuID, v))
}

// SpuName applies equality check predicate on the "spu_name" field. It's identical to SpuNameEQ.
func SpuName(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldSpuName, v))
}

// SkuID applies equality check predicate on the "sku_id" field. It's identical to SkuIDEQ.
func SkuID(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldSkuID, v))
}

// SkuPicURL applies equality check predicate on the "sku_pic_url" field. It's identical to SkuPicURLEQ.
func SkuPicURL(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldSkuPicURL, v))
}

// Visible applies equality check predicate on the "visible" field. It's identical to VisibleEQ.
func Visible(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldVisible, v))
}

// Scores applies equality check predicate on the "scores" field. It's identical to ScoresEQ.
func Scores(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldScores, v))
}

// DescriptionScores applies equality check predicate on the "description_scores" field. It's identical to DescriptionScoresEQ.
func DescriptionScores(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldDescriptionScores, v))
}

// BenefitScores applies equality check predicate on the "benefit_scores" field. It's identical to BenefitScoresEQ.
func BenefitScores(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldBenefitScores, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldContent, v))
}

// PicUrls applies equality check predicate on the "pic_urls" field. It's identical to PicUrlsEQ.
func PicUrls(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldPicUrls, v))
}

// ReplyStatus applies equality check predicate on the "reply_status" field. It's identical to ReplyStatusEQ.
func ReplyStatus(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldReplyStatus, v))
}

// ReplyUserID applies equality check predicate on the "reply_user_id" field. It's identical to ReplyUserIDEQ.
func ReplyUserID(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldReplyUserID, v))
}

// ReplyContent applies equality check predicate on the "reply_content" field. It's identical to ReplyContentEQ.
func ReplyContent(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldReplyContent, v))
}

// ReplyTime applies equality check predicate on the "reply_time" field. It's identical to ReplyTimeEQ.
func ReplyTime(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldReplyTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldDeletedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldUserID))
}

// UserNicknameEQ applies the EQ predicate on the "user_nickname" field.
func UserNicknameEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserNickname, v))
}

// UserNicknameNEQ applies the NEQ predicate on the "user_nickname" field.
func UserNicknameNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUserNickname, v))
}

// UserNicknameIn applies the In predicate on the "user_nickname" field.
func UserNicknameIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUserNickname, vs...))
}

// UserNicknameNotIn applies the NotIn predicate on the "user_nickname" field.
func UserNicknameNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUserNickname, vs...))
}

// UserNicknameGT applies the GT predicate on the "user_nickname" field.
func UserNicknameGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldUserNickname, v))
}

// UserNicknameGTE applies the GTE predicate on the "user_nickname" field.
func UserNicknameGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldUserNickname, v))
}

// UserNicknameLT applies the LT predicate on the "user_nickname" field.
func UserNicknameLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldUserNickname, v))
}

// UserNicknameLTE applies the LTE predicate on the "user_nickname" field.
func UserNicknameLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldUserNickname, v))
}

// UserNicknameContains applies the Contains predicate on the "user_nickname" field.
func UserNicknameContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldUserNickname, v))
}

// UserNicknameHasPrefix applies the HasPrefix predicate on the "user_nickname" field.
func UserNicknameHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldUserNickname, v))
}

// UserNicknameHasSuffix applies the HasSuffix predicate on the "user_nickname" field.
func UserNicknameHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldUserNickname, v))
}

// UserNicknameIsNil applies the IsNil predicate on the "user_nickname" field.
func UserNicknameIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldUserNickname))
}

// UserNicknameNotNil applies the NotNil predicate on the "user_nickname" field.
func UserNicknameNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldUserNickname))
}

// UserNicknameEqualFold applies the EqualFold predicate on the "user_nickname" field.
func UserNicknameEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldUserNickname, v))
}

// UserNicknameContainsFold applies the ContainsFold predicate on the "user_nickname" field.
func UserNicknameContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldUserNickname, v))
}

// UserAvatarEQ applies the EQ predicate on the "user_avatar" field.
func UserAvatarEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserAvatar, v))
}

// UserAvatarNEQ applies the NEQ predicate on the "user_avatar" field.
func UserAvatarNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUserAvatar, v))
}

// UserAvatarIn applies the In predicate on the "user_avatar" field.
func UserAvatarIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUserAvatar, vs...))
}

// UserAvatarNotIn applies the NotIn predicate on the "user_avatar" field.
func UserAvatarNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUserAvatar, vs...))
}

// UserAvatarGT applies the GT predicate on the "user_avatar" field.
func UserAvatarGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldUserAvatar, v))
}

// UserAvatarGTE applies the GTE predicate on the "user_avatar" field.
func UserAvatarGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldUserAvatar, v))
}

// UserAvatarLT applies the LT predicate on the "user_avatar" field.
func UserAvatarLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldUserAvatar, v))
}

// UserAvatarLTE applies the LTE predicate on the "user_avatar" field.
func UserAvatarLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldUserAvatar, v))
}

// UserAvatarContains applies the Contains predicate on the "user_avatar" field.
func UserAvatarContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldUserAvatar, v))
}

// UserAvatarHasPrefix applies the HasPrefix predicate on the "user_avatar" field.
func UserAvatarHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldUserAvatar, v))
}

// UserAvatarHasSuffix applies the HasSuffix predicate on the "user_avatar" field.
func UserAvatarHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldUserAvatar, v))
}

// UserAvatarIsNil applies the IsNil predicate on the "user_avatar" field.
func UserAvatarIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldUserAvatar))
}

// UserAvatarNotNil applies the NotNil predicate on the "user_avatar" field.
func UserAvatarNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldUserAvatar))
}

// UserAvatarEqualFold applies the EqualFold predicate on the "user_avatar" field.
func UserAvatarEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldUserAvatar, v))
}

// UserAvatarContainsFold applies the ContainsFold predicate on the "user_avatar" field.
func UserAvatarContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldUserAvatar, v))
}

// AnonymousEQ applies the EQ predicate on the "anonymous" field.
func AnonymousEQ(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldAnonymous, v))
}

// AnonymousNEQ applies the NEQ predicate on the "anonymous" field.
func AnonymousNEQ(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldAnonymous, v))
}

// AnonymousIsNil applies the IsNil predicate on the "anonymous" field.
func AnonymousIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldAnonymous))
}

// AnonymousNotNil applies the NotNil predicate on the "anonymous" field.
func AnonymousNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldAnonymous))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uint64) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uint64) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldOrderID, v))
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldOrderID))
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldOrderID))
}

// OrderItemIDEQ applies the EQ predicate on the "order_item_id" field.
func OrderItemIDEQ(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldOrderItemID, v))
}

// OrderItemIDNEQ applies the NEQ predicate on the "order_item_id" field.
func OrderItemIDNEQ(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldOrderItemID, v))
}

// OrderItemIDIn applies the In predicate on the "order_item_id" field.
func OrderItemIDIn(vs ...uint64) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldOrderItemID, vs...))
}

// OrderItemIDNotIn applies the NotIn predicate on the "order_item_id" field.
func OrderItemIDNotIn(vs ...uint64) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldOrderItemID, vs...))
}

// OrderItemIDGT applies the GT predicate on the "order_item_id" field.
func OrderItemIDGT(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldOrderItemID, v))
}

// OrderItemIDGTE applies the GTE predicate on the "order_item_id" field.
func OrderItemIDGTE(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldOrderItemID, v))
}

// OrderItemIDLT applies the LT predicate on the "order_item_id" field.
func OrderItemIDLT(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldOrderItemID, v))
}

// OrderItemIDLTE applies the LTE predicate on the "order_item_id" field.
func OrderItemIDLTE(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldOrderItemID, v))
}

// OrderItemIDIsNil applies the IsNil predicate on the "order_item_id" field.
func OrderItemIDIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldOrderItemID))
}

// OrderItemIDNotNil applies the NotNil predicate on the "order_item_id" field.
func OrderItemIDNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldOrderItemID))
}

// SpuIDEQ applies the EQ predicate on the "spu_id" field.
func SpuIDEQ(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldSpuID, v))
}

// SpuIDNEQ applies the NEQ predicate on the "spu_id" field.
func SpuIDNEQ(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldSpuID, v))
}

// SpuIDIn applies the In predicate on the "spu_id" field.
func SpuIDIn(vs ...uint64) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldSpuID, vs...))
}

// SpuIDNotIn applies the NotIn predicate on the "spu_id" field.
func SpuIDNotIn(vs ...uint64) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldSpuID, vs...))
}

// SpuIDGT applies the GT predicate on the "spu_id" field.
func SpuIDGT(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldSpuID, v))
}

// SpuIDGTE applies the GTE predicate on the "spu_id" field.
func SpuIDGTE(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldSpuID, v))
}

// SpuIDLT applies the LT predicate on the "spu_id" field.
func SpuIDLT(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldSpuID, v))
}

// SpuIDLTE applies the LTE predicate on the "spu_id" field.
func SpuIDLTE(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldSpuID, v))
}

// SpuIDIsNil applies the IsNil predicate on the "spu_id" field.
func SpuIDIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldSpuID))
}

// SpuIDNotNil applies the NotNil predicate on the "spu_id" field.
func SpuIDNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldSpuID))
}

// SpuNameEQ applies the EQ predicate on the "spu_name" field.
func SpuNameEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldSpuName, v))
}

// SpuNameNEQ applies the NEQ predicate on the "spu_name" field.
func SpuNameNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldSpuName, v))
}

// SpuNameIn applies the In predicate on the "spu_name" field.
func SpuNameIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldSpuName, vs...))
}

// SpuNameNotIn applies the NotIn predicate on the "spu_name" field.
func SpuNameNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldSpuName, vs...))
}

// SpuNameGT applies the GT predicate on the "spu_name" field.
func SpuNameGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldSpuName, v))
}

// SpuNameGTE applies the GTE predicate on the "spu_name" field.
func SpuNameGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldSpuName, v))
}

// SpuNameLT applies the LT predicate on the "spu_name" field.
func SpuNameLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldSpuName, v))
}

// SpuNameLTE applies the LTE predicate on the "spu_name" field.
func SpuNameLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldSpuName, v))
}

// SpuNameContains applies the Contains predicate on the "spu_name" field.
func SpuNameContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldSpuName, v))
}

// SpuNameHasPrefix applies the HasPrefix predicate on the "spu_name" field.
func SpuNameHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldSpuName, v))
}

// SpuNameHasSuffix applies the HasSuffix predicate on the "spu_name" field.
func SpuNameHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldSpuName, v))
}

// SpuNameIsNil applies the IsNil predicate on the "spu_name" field.
func SpuNameIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldSpuName))
}

// SpuNameNotNil applies the NotNil predicate on the "spu_name" field.
func SpuNameNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldSpuName))
}

// SpuNameEqualFold applies the EqualFold predicate on the "spu_name" field.
func SpuNameEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldSpuName, v))
}

// SpuNameContainsFold applies the ContainsFold predicate on the "spu_name" field.
func SpuNameContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldSpuName, v))
}

// SkuIDEQ applies the EQ predicate on the "sku_id" field.
func SkuIDEQ(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldSkuID, v))
}

// SkuIDNEQ applies the NEQ predicate on the "sku_id" field.
func SkuIDNEQ(v uint64) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldSkuID, v))
}

// SkuIDIn applies the In predicate on the "sku_id" field.
func SkuIDIn(vs ...uint64) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldSkuID, vs...))
}

// SkuIDNotIn applies the NotIn predicate on the "sku_id" field.
func SkuIDNotIn(vs ...uint64) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldSkuID, vs...))
}

// SkuIDIsNil applies the IsNil predicate on the "sku_id" field.
func SkuIDIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldSkuID))
}

// SkuIDNotNil applies the NotNil predicate on the "sku_id" field.
func SkuIDNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldSkuID))
}

// SkuPicURLEQ applies the EQ predicate on the "sku_pic_url" field.
func SkuPicURLEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldSkuPicURL, v))
}

// SkuPicURLNEQ applies the NEQ predicate on the "sku_pic_url" field.
func SkuPicURLNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldSkuPicURL, v))
}

// SkuPicURLIn applies the In predicate on the "sku_pic_url" field.
func SkuPicURLIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldSkuPicURL, vs...))
}

// SkuPicURLNotIn applies the NotIn predicate on the "sku_pic_url" field.
func SkuPicURLNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldSkuPicURL, vs...))
}

// SkuPicURLGT applies the GT predicate on the "sku_pic_url" field.
func SkuPicURLGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldSkuPicURL, v))
}

// SkuPicURLGTE applies the GTE predicate on the "sku_pic_url" field.
func SkuPicURLGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldSkuPicURL, v))
}

// SkuPicURLLT applies the LT predicate on the "sku_pic_url" field.
func SkuPicURLLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldSkuPicURL, v))
}

// SkuPicURLLTE applies the LTE predicate on the "sku_pic_url" field.
func SkuPicURLLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldSkuPicURL, v))
}

// SkuPicURLContains applies the Contains predicate on the "sku_pic_url" field.
func SkuPicURLContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldSkuPicURL, v))
}

// SkuPicURLHasPrefix applies the HasPrefix predicate on the "sku_pic_url" field.
func SkuPicURLHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldSkuPicURL, v))
}

// SkuPicURLHasSuffix applies the HasSuffix predicate on the "sku_pic_url" field.
func SkuPicURLHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldSkuPicURL, v))
}

// SkuPicURLEqualFold applies the EqualFold predicate on the "sku_pic_url" field.
func SkuPicURLEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldSkuPicURL, v))
}

// SkuPicURLContainsFold applies the ContainsFold predicate on the "sku_pic_url" field.
func SkuPicURLContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldSkuPicURL, v))
}

// SkuPropertiesIsNil applies the IsNil predicate on the "sku_properties" field.
func SkuPropertiesIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldSkuProperties))
}

// SkuPropertiesNotNil applies the NotNil predicate on the "sku_properties" field.
func SkuPropertiesNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldSkuProperties))
}

// VisibleEQ applies the EQ predicate on the "visible" field.
func VisibleEQ(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldVisible, v))
}

// VisibleNEQ applies the NEQ predicate on the "visible" field.
func VisibleNEQ(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldVisible, v))
}

// VisibleIsNil applies the IsNil predicate on the "visible" field.
func VisibleIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldVisible))
}

// VisibleNotNil applies the NotNil predicate on the "visible" field.
func VisibleNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldVisible))
}

// ScoresEQ applies the EQ predicate on the "scores" field.
func ScoresEQ(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldScores, v))
}

// ScoresNEQ applies the NEQ predicate on the "scores" field.
func ScoresNEQ(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldScores, v))
}

// ScoresIn applies the In predicate on the "scores" field.
func ScoresIn(vs ...int8) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldScores, vs...))
}

// ScoresNotIn applies the NotIn predicate on the "scores" field.
func ScoresNotIn(vs ...int8) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldScores, vs...))
}

// ScoresGT applies the GT predicate on the "scores" field.
func ScoresGT(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldScores, v))
}

// ScoresGTE applies the GTE predicate on the "scores" field.
func ScoresGTE(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldScores, v))
}

// ScoresLT applies the LT predicate on the "scores" field.
func ScoresLT(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldScores, v))
}

// ScoresLTE applies the LTE predicate on the "scores" field.
func ScoresLTE(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldScores, v))
}

// ScoresIsNil applies the IsNil predicate on the "scores" field.
func ScoresIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldScores))
}

// ScoresNotNil applies the NotNil predicate on the "scores" field.
func ScoresNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldScores))
}

// DescriptionScoresEQ applies the EQ predicate on the "description_scores" field.
func DescriptionScoresEQ(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldDescriptionScores, v))
}

// DescriptionScoresNEQ applies the NEQ predicate on the "description_scores" field.
func DescriptionScoresNEQ(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldDescriptionScores, v))
}

// DescriptionScoresIn applies the In predicate on the "description_scores" field.
func DescriptionScoresIn(vs ...int8) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldDescriptionScores, vs...))
}

// DescriptionScoresNotIn applies the NotIn predicate on the "description_scores" field.
func DescriptionScoresNotIn(vs ...int8) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldDescriptionScores, vs...))
}

// DescriptionScoresGT applies the GT predicate on the "description_scores" field.
func DescriptionScoresGT(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldDescriptionScores, v))
}

// DescriptionScoresGTE applies the GTE predicate on the "description_scores" field.
func DescriptionScoresGTE(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldDescriptionScores, v))
}

// DescriptionScoresLT applies the LT predicate on the "description_scores" field.
func DescriptionScoresLT(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldDescriptionScores, v))
}

// DescriptionScoresLTE applies the LTE predicate on the "description_scores" field.
func DescriptionScoresLTE(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldDescriptionScores, v))
}

// DescriptionScoresIsNil applies the IsNil predicate on the "description_scores" field.
func DescriptionScoresIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldDescriptionScores))
}

// DescriptionScoresNotNil applies the NotNil predicate on the "description_scores" field.
func DescriptionScoresNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldDescriptionScores))
}

// BenefitScoresEQ applies the EQ predicate on the "benefit_scores" field.
func BenefitScoresEQ(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldBenefitScores, v))
}

// BenefitScoresNEQ applies the NEQ predicate on the "benefit_scores" field.
func BenefitScoresNEQ(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldBenefitScores, v))
}

// BenefitScoresIn applies the In predicate on the "benefit_scores" field.
func BenefitScoresIn(vs ...int8) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldBenefitScores, vs...))
}

// BenefitScoresNotIn applies the NotIn predicate on the "benefit_scores" field.
func BenefitScoresNotIn(vs ...int8) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldBenefitScores, vs...))
}

// BenefitScoresGT applies the GT predicate on the "benefit_scores" field.
func BenefitScoresGT(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldBenefitScores, v))
}

// BenefitScoresGTE applies the GTE predicate on the "benefit_scores" field.
func BenefitScoresGTE(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldBenefitScores, v))
}

// BenefitScoresLT applies the LT predicate on the "benefit_scores" field.
func BenefitScoresLT(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldBenefitScores, v))
}

// BenefitScoresLTE applies the LTE predicate on the "benefit_scores" field.
func BenefitScoresLTE(v int8) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldBenefitScores, v))
}

// BenefitScoresIsNil applies the IsNil predicate on the "benefit_scores" field.
func BenefitScoresIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldBenefitScores))
}

// BenefitScoresNotNil applies the NotNil predicate on the "benefit_scores" field.
func BenefitScoresNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldBenefitScores))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldContent, v))
}

// PicUrlsEQ applies the EQ predicate on the "pic_urls" field.
func PicUrlsEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldPicUrls, v))
}

// PicUrlsNEQ applies the NEQ predicate on the "pic_urls" field.
func PicUrlsNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldPicUrls, v))
}

// PicUrlsIn applies the In predicate on the "pic_urls" field.
func PicUrlsIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldPicUrls, vs...))
}

// PicUrlsNotIn applies the NotIn predicate on the "pic_urls" field.
func PicUrlsNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldPicUrls, vs...))
}

// PicUrlsGT applies the GT predicate on the "pic_urls" field.
func PicUrlsGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldPicUrls, v))
}

// PicUrlsGTE applies the GTE predicate on the "pic_urls" field.
func PicUrlsGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldPicUrls, v))
}

// PicUrlsLT applies the LT predicate on the "pic_urls" field.
func PicUrlsLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldPicUrls, v))
}

// PicUrlsLTE applies the LTE predicate on the "pic_urls" field.
func PicUrlsLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldPicUrls, v))
}

// PicUrlsContains applies the Contains predicate on the "pic_urls" field.
func PicUrlsContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldPicUrls, v))
}

// PicUrlsHasPrefix applies the HasPrefix predicate on the "pic_urls" field.
func PicUrlsHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldPicUrls, v))
}

// PicUrlsHasSuffix applies the HasSuffix predicate on the "pic_urls" field.
func PicUrlsHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldPicUrls, v))
}

// PicUrlsIsNil applies the IsNil predicate on the "pic_urls" field.
func PicUrlsIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldPicUrls))
}

// PicUrlsNotNil applies the NotNil predicate on the "pic_urls" field.
func PicUrlsNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldPicUrls))
}

// PicUrlsEqualFold applies the EqualFold predicate on the "pic_urls" field.
func PicUrlsEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldPicUrls, v))
}

// PicUrlsContainsFold applies the ContainsFold predicate on the "pic_urls" field.
func PicUrlsContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldPicUrls, v))
}

// ReplyStatusEQ applies the EQ predicate on the "reply_status" field.
func ReplyStatusEQ(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldReplyStatus, v))
}

// ReplyStatusNEQ applies the NEQ predicate on the "reply_status" field.
func ReplyStatusNEQ(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldReplyStatus, v))
}

// ReplyStatusIsNil applies the IsNil predicate on the "reply_status" field.
func ReplyStatusIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldReplyStatus))
}

// ReplyStatusNotNil applies the NotNil predicate on the "reply_status" field.
func ReplyStatusNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldReplyStatus))
}

// ReplyUserIDEQ applies the EQ predicate on the "reply_user_id" field.
func ReplyUserIDEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldReplyUserID, v))
}

// ReplyUserIDNEQ applies the NEQ predicate on the "reply_user_id" field.
func ReplyUserIDNEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldReplyUserID, v))
}

// ReplyUserIDIn applies the In predicate on the "reply_user_id" field.
func ReplyUserIDIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldReplyUserID, vs...))
}

// ReplyUserIDNotIn applies the NotIn predicate on the "reply_user_id" field.
func ReplyUserIDNotIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldReplyUserID, vs...))
}

// ReplyUserIDGT applies the GT predicate on the "reply_user_id" field.
func ReplyUserIDGT(v int) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldReplyUserID, v))
}

// ReplyUserIDGTE applies the GTE predicate on the "reply_user_id" field.
func ReplyUserIDGTE(v int) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldReplyUserID, v))
}

// ReplyUserIDLT applies the LT predicate on the "reply_user_id" field.
func ReplyUserIDLT(v int) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldReplyUserID, v))
}

// ReplyUserIDLTE applies the LTE predicate on the "reply_user_id" field.
func ReplyUserIDLTE(v int) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldReplyUserID, v))
}

// ReplyUserIDIsNil applies the IsNil predicate on the "reply_user_id" field.
func ReplyUserIDIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldReplyUserID))
}

// ReplyUserIDNotNil applies the NotNil predicate on the "reply_user_id" field.
func ReplyUserIDNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldReplyUserID))
}

// ReplyContentEQ applies the EQ predicate on the "reply_content" field.
func ReplyContentEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldReplyContent, v))
}

// ReplyContentNEQ applies the NEQ predicate on the "reply_content" field.
func ReplyContentNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldReplyContent, v))
}

// ReplyContentIn applies the In predicate on the "reply_content" field.
func ReplyContentIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldReplyContent, vs...))
}

// ReplyContentNotIn applies the NotIn predicate on the "reply_content" field.
func ReplyContentNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldReplyContent, vs...))
}

// ReplyContentGT applies the GT predicate on the "reply_content" field.
func ReplyContentGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldReplyContent, v))
}

// ReplyContentGTE applies the GTE predicate on the "reply_content" field.
func ReplyContentGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldReplyContent, v))
}

// ReplyContentLT applies the LT predicate on the "reply_content" field.
func ReplyContentLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldReplyContent, v))
}

// ReplyContentLTE applies the LTE predicate on the "reply_content" field.
func ReplyContentLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldReplyContent, v))
}

// ReplyContentContains applies the Contains predicate on the "reply_content" field.
func ReplyContentContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldReplyContent, v))
}

// ReplyContentHasPrefix applies the HasPrefix predicate on the "reply_content" field.
func ReplyContentHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldReplyContent, v))
}

// ReplyContentHasSuffix applies the HasSuffix predicate on the "reply_content" field.
func ReplyContentHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldReplyContent, v))
}

// ReplyContentIsNil applies the IsNil predicate on the "reply_content" field.
func ReplyContentIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldReplyContent))
}

// ReplyContentNotNil applies the NotNil predicate on the "reply_content" field.
func ReplyContentNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldReplyContent))
}

// ReplyContentEqualFold applies the EqualFold predicate on the "reply_content" field.
func ReplyContentEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldReplyContent, v))
}

// ReplyContentContainsFold applies the ContainsFold predicate on the "reply_content" field.
func ReplyContentContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldReplyContent, v))
}

// ReplyTimeEQ applies the EQ predicate on the "reply_time" field.
func ReplyTimeEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldReplyTime, v))
}

// ReplyTimeNEQ applies the NEQ predicate on the "reply_time" field.
func ReplyTimeNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldReplyTime, v))
}

// ReplyTimeIn applies the In predicate on the "reply_time" field.
func ReplyTimeIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldReplyTime, vs...))
}

// ReplyTimeNotIn applies the NotIn predicate on the "reply_time" field.
func ReplyTimeNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldReplyTime, vs...))
}

// ReplyTimeGT applies the GT predicate on the "reply_time" field.
func ReplyTimeGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldReplyTime, v))
}

// ReplyTimeGTE applies the GTE predicate on the "reply_time" field.
func ReplyTimeGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldReplyTime, v))
}

// ReplyTimeLT applies the LT predicate on the "reply_time" field.
func ReplyTimeLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldReplyTime, v))
}

// ReplyTimeLTE applies the LTE predicate on the "reply_time" field.
func ReplyTimeLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldReplyTime, v))
}

// ReplyTimeIsNil applies the IsNil predicate on the "reply_time" field.
func ReplyTimeIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldReplyTime))
}

// ReplyTimeNotNil applies the NotNil predicate on the "reply_time" field.
func ReplyTimeNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldReplyTime))
}

// HasSkus applies the HasEdge predicate on the "skus" edge.
func HasSkus() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SkusTable, SkusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSkusWith applies the HasEdge predicate on the "skus" edge with a given conditions (other predicates).
func HasSkusWith(preds ...predicate.Sku) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newSkusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Comment) predicate.Comment {
	return predicate.Comment(sql.NotPredicates(p))
}
