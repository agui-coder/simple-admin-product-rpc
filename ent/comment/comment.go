// Code generated by ent, DO NOT EDIT.

package comment

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the comment type in the database.
	Label = "comment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldUserNickname holds the string denoting the user_nickname field in the database.
	FieldUserNickname = "user_nickname"
	// FieldUserAvatar holds the string denoting the user_avatar field in the database.
	FieldUserAvatar = "user_avatar"
	// FieldAnonymous holds the string denoting the anonymous field in the database.
	FieldAnonymous = "anonymous"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldOrderItemID holds the string denoting the order_item_id field in the database.
	FieldOrderItemID = "order_item_id"
	// FieldSpuID holds the string denoting the spu_id field in the database.
	FieldSpuID = "spu_id"
	// FieldSpuName holds the string denoting the spu_name field in the database.
	FieldSpuName = "spu_name"
	// FieldSkuID holds the string denoting the sku_id field in the database.
	FieldSkuID = "sku_id"
	// FieldSkuPicURL holds the string denoting the sku_pic_url field in the database.
	FieldSkuPicURL = "sku_pic_url"
	// FieldSkuProperties holds the string denoting the sku_properties field in the database.
	FieldSkuProperties = "sku_properties"
	// FieldVisible holds the string denoting the visible field in the database.
	FieldVisible = "visible"
	// FieldScores holds the string denoting the scores field in the database.
	FieldScores = "scores"
	// FieldDescriptionScores holds the string denoting the description_scores field in the database.
	FieldDescriptionScores = "description_scores"
	// FieldBenefitScores holds the string denoting the benefit_scores field in the database.
	FieldBenefitScores = "benefit_scores"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldPicUrls holds the string denoting the pic_urls field in the database.
	FieldPicUrls = "pic_urls"
	// FieldReplyStatus holds the string denoting the reply_status field in the database.
	FieldReplyStatus = "reply_status"
	// FieldReplyUserID holds the string denoting the reply_user_id field in the database.
	FieldReplyUserID = "reply_user_id"
	// FieldReplyContent holds the string denoting the reply_content field in the database.
	FieldReplyContent = "reply_content"
	// FieldReplyTime holds the string denoting the reply_time field in the database.
	FieldReplyTime = "reply_time"
	// EdgeSkus holds the string denoting the skus edge name in mutations.
	EdgeSkus = "skus"
	// Table holds the table name of the comment in the database.
	Table = "product_comment"
	// SkusTable is the table that holds the skus relation/edge.
	SkusTable = "product_comment"
	// SkusInverseTable is the table name for the Sku entity.
	// It exists in this package in order to avoid circular dependency with the "sku" package.
	SkusInverseTable = "product_sku"
	// SkusColumn is the table column denoting the skus relation/edge.
	SkusColumn = "sku_id"
)

// Columns holds all SQL columns for comment fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldUserID,
	FieldUserNickname,
	FieldUserAvatar,
	FieldAnonymous,
	FieldOrderID,
	FieldOrderItemID,
	FieldSpuID,
	FieldSpuName,
	FieldSkuID,
	FieldSkuPicURL,
	FieldSkuProperties,
	FieldVisible,
	FieldScores,
	FieldDescriptionScores,
	FieldBenefitScores,
	FieldContent,
	FieldPicUrls,
	FieldReplyStatus,
	FieldReplyUserID,
	FieldReplyContent,
	FieldReplyTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/agui-coder/simple-admin-product-rpc/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Comment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUserNickname orders the results by the user_nickname field.
func ByUserNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserNickname, opts...).ToFunc()
}

// ByUserAvatar orders the results by the user_avatar field.
func ByUserAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAvatar, opts...).ToFunc()
}

// ByAnonymous orders the results by the anonymous field.
func ByAnonymous(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnonymous, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByOrderItemID orders the results by the order_item_id field.
func ByOrderItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderItemID, opts...).ToFunc()
}

// BySpuID orders the results by the spu_id field.
func BySpuID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpuID, opts...).ToFunc()
}

// BySpuName orders the results by the spu_name field.
func BySpuName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpuName, opts...).ToFunc()
}

// BySkuID orders the results by the sku_id field.
func BySkuID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkuID, opts...).ToFunc()
}

// BySkuPicURL orders the results by the sku_pic_url field.
func BySkuPicURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkuPicURL, opts...).ToFunc()
}

// ByVisible orders the results by the visible field.
func ByVisible(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisible, opts...).ToFunc()
}

// ByScores orders the results by the scores field.
func ByScores(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScores, opts...).ToFunc()
}

// ByDescriptionScores orders the results by the description_scores field.
func ByDescriptionScores(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescriptionScores, opts...).ToFunc()
}

// ByBenefitScores orders the results by the benefit_scores field.
func ByBenefitScores(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBenefitScores, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByPicUrls orders the results by the pic_urls field.
func ByPicUrls(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPicUrls, opts...).ToFunc()
}

// ByReplyStatus orders the results by the reply_status field.
func ByReplyStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplyStatus, opts...).ToFunc()
}

// ByReplyUserID orders the results by the reply_user_id field.
func ByReplyUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplyUserID, opts...).ToFunc()
}

// ByReplyContent orders the results by the reply_content field.
func ByReplyContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplyContent, opts...).ToFunc()
}

// ByReplyTime orders the results by the reply_time field.
func ByReplyTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplyTime, opts...).ToFunc()
}

// BySkusField orders the results by skus field.
func BySkusField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkusStep(), sql.OrderByField(field, opts...))
	}
}
func newSkusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SkusTable, SkusColumn),
	)
}
