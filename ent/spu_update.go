// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/agui-coder/simple-admin-product-rpc/ent/brand"
	"github.com/agui-coder/simple-admin-product-rpc/ent/category"
	"github.com/agui-coder/simple-admin-product-rpc/ent/predicate"
	"github.com/agui-coder/simple-admin-product-rpc/ent/sku"
	"github.com/agui-coder/simple-admin-product-rpc/ent/spu"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// SpuUpdate is the builder for updating Spu entities.
type SpuUpdate struct {
	config
	hooks    []Hook
	mutation *SpuMutation
}

// Where appends a list predicates to the SpuUpdate builder.
func (su *SpuUpdate) Where(ps ...predicate.Spu) *SpuUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SpuUpdate) SetUpdatedAt(t time.Time) *SpuUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetStatus sets the "status" field.
func (su *SpuUpdate) SetStatus(u uint8) *SpuUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(u)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SpuUpdate) SetNillableStatus(u *uint8) *SpuUpdate {
	if u != nil {
		su.SetStatus(*u)
	}
	return su
}

// AddStatus adds u to the "status" field.
func (su *SpuUpdate) AddStatus(u int8) *SpuUpdate {
	su.mutation.AddStatus(u)
	return su
}

// ClearStatus clears the value of the "status" field.
func (su *SpuUpdate) ClearStatus() *SpuUpdate {
	su.mutation.ClearStatus()
	return su
}

// SetSort sets the "sort" field.
func (su *SpuUpdate) SetSort(u uint32) *SpuUpdate {
	su.mutation.ResetSort()
	su.mutation.SetSort(u)
	return su
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (su *SpuUpdate) SetNillableSort(u *uint32) *SpuUpdate {
	if u != nil {
		su.SetSort(*u)
	}
	return su
}

// AddSort adds u to the "sort" field.
func (su *SpuUpdate) AddSort(u int32) *SpuUpdate {
	su.mutation.AddSort(u)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SpuUpdate) SetDeletedAt(t time.Time) *SpuUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SpuUpdate) SetNillableDeletedAt(t *time.Time) *SpuUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SpuUpdate) ClearDeletedAt() *SpuUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetName sets the "name" field.
func (su *SpuUpdate) SetName(s string) *SpuUpdate {
	su.mutation.SetName(s)
	return su
}

// SetKeyword sets the "keyword" field.
func (su *SpuUpdate) SetKeyword(s string) *SpuUpdate {
	su.mutation.SetKeyword(s)
	return su
}

// SetNillableKeyword sets the "keyword" field if the given value is not nil.
func (su *SpuUpdate) SetNillableKeyword(s *string) *SpuUpdate {
	if s != nil {
		su.SetKeyword(*s)
	}
	return su
}

// ClearKeyword clears the value of the "keyword" field.
func (su *SpuUpdate) ClearKeyword() *SpuUpdate {
	su.mutation.ClearKeyword()
	return su
}

// SetIntroduction sets the "introduction" field.
func (su *SpuUpdate) SetIntroduction(s string) *SpuUpdate {
	su.mutation.SetIntroduction(s)
	return su
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (su *SpuUpdate) SetNillableIntroduction(s *string) *SpuUpdate {
	if s != nil {
		su.SetIntroduction(*s)
	}
	return su
}

// ClearIntroduction clears the value of the "introduction" field.
func (su *SpuUpdate) ClearIntroduction() *SpuUpdate {
	su.mutation.ClearIntroduction()
	return su
}

// SetDescription sets the "description" field.
func (su *SpuUpdate) SetDescription(s string) *SpuUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SpuUpdate) SetNillableDescription(s *string) *SpuUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SpuUpdate) ClearDescription() *SpuUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetBarCode sets the "bar_code" field.
func (su *SpuUpdate) SetBarCode(s string) *SpuUpdate {
	su.mutation.SetBarCode(s)
	return su
}

// SetNillableBarCode sets the "bar_code" field if the given value is not nil.
func (su *SpuUpdate) SetNillableBarCode(s *string) *SpuUpdate {
	if s != nil {
		su.SetBarCode(*s)
	}
	return su
}

// ClearBarCode clears the value of the "bar_code" field.
func (su *SpuUpdate) ClearBarCode() *SpuUpdate {
	su.mutation.ClearBarCode()
	return su
}

// SetCategoryID sets the "category_id" field.
func (su *SpuUpdate) SetCategoryID(u uint64) *SpuUpdate {
	su.mutation.SetCategoryID(u)
	return su
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (su *SpuUpdate) SetNillableCategoryID(u *uint64) *SpuUpdate {
	if u != nil {
		su.SetCategoryID(*u)
	}
	return su
}

// ClearCategoryID clears the value of the "category_id" field.
func (su *SpuUpdate) ClearCategoryID() *SpuUpdate {
	su.mutation.ClearCategoryID()
	return su
}

// SetBrandID sets the "brand_id" field.
func (su *SpuUpdate) SetBrandID(u uint64) *SpuUpdate {
	su.mutation.SetBrandID(u)
	return su
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (su *SpuUpdate) SetNillableBrandID(u *uint64) *SpuUpdate {
	if u != nil {
		su.SetBrandID(*u)
	}
	return su
}

// ClearBrandID clears the value of the "brand_id" field.
func (su *SpuUpdate) ClearBrandID() *SpuUpdate {
	su.mutation.ClearBrandID()
	return su
}

// SetPicURL sets the "pic_url" field.
func (su *SpuUpdate) SetPicURL(s string) *SpuUpdate {
	su.mutation.SetPicURL(s)
	return su
}

// SetSliderPicUrls sets the "slider_pic_urls" field.
func (su *SpuUpdate) SetSliderPicUrls(s []string) *SpuUpdate {
	su.mutation.SetSliderPicUrls(s)
	return su
}

// AppendSliderPicUrls appends s to the "slider_pic_urls" field.
func (su *SpuUpdate) AppendSliderPicUrls(s []string) *SpuUpdate {
	su.mutation.AppendSliderPicUrls(s)
	return su
}

// ClearSliderPicUrls clears the value of the "slider_pic_urls" field.
func (su *SpuUpdate) ClearSliderPicUrls() *SpuUpdate {
	su.mutation.ClearSliderPicUrls()
	return su
}

// SetVideoURL sets the "video_url" field.
func (su *SpuUpdate) SetVideoURL(s string) *SpuUpdate {
	su.mutation.SetVideoURL(s)
	return su
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (su *SpuUpdate) SetNillableVideoURL(s *string) *SpuUpdate {
	if s != nil {
		su.SetVideoURL(*s)
	}
	return su
}

// ClearVideoURL clears the value of the "video_url" field.
func (su *SpuUpdate) ClearVideoURL() *SpuUpdate {
	su.mutation.ClearVideoURL()
	return su
}

// SetUnit sets the "unit" field.
func (su *SpuUpdate) SetUnit(u uint8) *SpuUpdate {
	su.mutation.ResetUnit()
	su.mutation.SetUnit(u)
	return su
}

// AddUnit adds u to the "unit" field.
func (su *SpuUpdate) AddUnit(u int8) *SpuUpdate {
	su.mutation.AddUnit(u)
	return su
}

// SetSpecType sets the "spec_type" field.
func (su *SpuUpdate) SetSpecType(b bool) *SpuUpdate {
	su.mutation.SetSpecType(b)
	return su
}

// SetNillableSpecType sets the "spec_type" field if the given value is not nil.
func (su *SpuUpdate) SetNillableSpecType(b *bool) *SpuUpdate {
	if b != nil {
		su.SetSpecType(*b)
	}
	return su
}

// ClearSpecType clears the value of the "spec_type" field.
func (su *SpuUpdate) ClearSpecType() *SpuUpdate {
	su.mutation.ClearSpecType()
	return su
}

// SetPrice sets the "price" field.
func (su *SpuUpdate) SetPrice(i int32) *SpuUpdate {
	su.mutation.ResetPrice()
	su.mutation.SetPrice(i)
	return su
}

// AddPrice adds i to the "price" field.
func (su *SpuUpdate) AddPrice(i int32) *SpuUpdate {
	su.mutation.AddPrice(i)
	return su
}

// SetMarketPrice sets the "market_price" field.
func (su *SpuUpdate) SetMarketPrice(i int32) *SpuUpdate {
	su.mutation.ResetMarketPrice()
	su.mutation.SetMarketPrice(i)
	return su
}

// SetNillableMarketPrice sets the "market_price" field if the given value is not nil.
func (su *SpuUpdate) SetNillableMarketPrice(i *int32) *SpuUpdate {
	if i != nil {
		su.SetMarketPrice(*i)
	}
	return su
}

// AddMarketPrice adds i to the "market_price" field.
func (su *SpuUpdate) AddMarketPrice(i int32) *SpuUpdate {
	su.mutation.AddMarketPrice(i)
	return su
}

// ClearMarketPrice clears the value of the "market_price" field.
func (su *SpuUpdate) ClearMarketPrice() *SpuUpdate {
	su.mutation.ClearMarketPrice()
	return su
}

// SetCostPrice sets the "cost_price" field.
func (su *SpuUpdate) SetCostPrice(i int32) *SpuUpdate {
	su.mutation.ResetCostPrice()
	su.mutation.SetCostPrice(i)
	return su
}

// AddCostPrice adds i to the "cost_price" field.
func (su *SpuUpdate) AddCostPrice(i int32) *SpuUpdate {
	su.mutation.AddCostPrice(i)
	return su
}

// SetStock sets the "stock" field.
func (su *SpuUpdate) SetStock(i int32) *SpuUpdate {
	su.mutation.ResetStock()
	su.mutation.SetStock(i)
	return su
}

// AddStock adds i to the "stock" field.
func (su *SpuUpdate) AddStock(i int32) *SpuUpdate {
	su.mutation.AddStock(i)
	return su
}

// SetDeliveryTemplateID sets the "deliveryTemplate_id" field.
func (su *SpuUpdate) SetDeliveryTemplateID(u uint64) *SpuUpdate {
	su.mutation.ResetDeliveryTemplateID()
	su.mutation.SetDeliveryTemplateID(u)
	return su
}

// SetNillableDeliveryTemplateID sets the "deliveryTemplate_id" field if the given value is not nil.
func (su *SpuUpdate) SetNillableDeliveryTemplateID(u *uint64) *SpuUpdate {
	if u != nil {
		su.SetDeliveryTemplateID(*u)
	}
	return su
}

// AddDeliveryTemplateID adds u to the "deliveryTemplate_id" field.
func (su *SpuUpdate) AddDeliveryTemplateID(u int64) *SpuUpdate {
	su.mutation.AddDeliveryTemplateID(u)
	return su
}

// ClearDeliveryTemplateID clears the value of the "deliveryTemplate_id" field.
func (su *SpuUpdate) ClearDeliveryTemplateID() *SpuUpdate {
	su.mutation.ClearDeliveryTemplateID()
	return su
}

// SetRecommendHot sets the "recommend_hot" field.
func (su *SpuUpdate) SetRecommendHot(b bool) *SpuUpdate {
	su.mutation.SetRecommendHot(b)
	return su
}

// SetNillableRecommendHot sets the "recommend_hot" field if the given value is not nil.
func (su *SpuUpdate) SetNillableRecommendHot(b *bool) *SpuUpdate {
	if b != nil {
		su.SetRecommendHot(*b)
	}
	return su
}

// ClearRecommendHot clears the value of the "recommend_hot" field.
func (su *SpuUpdate) ClearRecommendHot() *SpuUpdate {
	su.mutation.ClearRecommendHot()
	return su
}

// SetRecommendBenefit sets the "recommend_benefit" field.
func (su *SpuUpdate) SetRecommendBenefit(b bool) *SpuUpdate {
	su.mutation.SetRecommendBenefit(b)
	return su
}

// SetNillableRecommendBenefit sets the "recommend_benefit" field if the given value is not nil.
func (su *SpuUpdate) SetNillableRecommendBenefit(b *bool) *SpuUpdate {
	if b != nil {
		su.SetRecommendBenefit(*b)
	}
	return su
}

// ClearRecommendBenefit clears the value of the "recommend_benefit" field.
func (su *SpuUpdate) ClearRecommendBenefit() *SpuUpdate {
	su.mutation.ClearRecommendBenefit()
	return su
}

// SetRecommendBest sets the "recommend_best" field.
func (su *SpuUpdate) SetRecommendBest(b bool) *SpuUpdate {
	su.mutation.SetRecommendBest(b)
	return su
}

// SetNillableRecommendBest sets the "recommend_best" field if the given value is not nil.
func (su *SpuUpdate) SetNillableRecommendBest(b *bool) *SpuUpdate {
	if b != nil {
		su.SetRecommendBest(*b)
	}
	return su
}

// ClearRecommendBest clears the value of the "recommend_best" field.
func (su *SpuUpdate) ClearRecommendBest() *SpuUpdate {
	su.mutation.ClearRecommendBest()
	return su
}

// SetRecommendNew sets the "recommend_new" field.
func (su *SpuUpdate) SetRecommendNew(b bool) *SpuUpdate {
	su.mutation.SetRecommendNew(b)
	return su
}

// SetNillableRecommendNew sets the "recommend_new" field if the given value is not nil.
func (su *SpuUpdate) SetNillableRecommendNew(b *bool) *SpuUpdate {
	if b != nil {
		su.SetRecommendNew(*b)
	}
	return su
}

// ClearRecommendNew clears the value of the "recommend_new" field.
func (su *SpuUpdate) ClearRecommendNew() *SpuUpdate {
	su.mutation.ClearRecommendNew()
	return su
}

// SetRecommendGood sets the "recommend_good" field.
func (su *SpuUpdate) SetRecommendGood(b bool) *SpuUpdate {
	su.mutation.SetRecommendGood(b)
	return su
}

// SetNillableRecommendGood sets the "recommend_good" field if the given value is not nil.
func (su *SpuUpdate) SetNillableRecommendGood(b *bool) *SpuUpdate {
	if b != nil {
		su.SetRecommendGood(*b)
	}
	return su
}

// ClearRecommendGood clears the value of the "recommend_good" field.
func (su *SpuUpdate) ClearRecommendGood() *SpuUpdate {
	su.mutation.ClearRecommendGood()
	return su
}

// SetGiveIntegral sets the "give_integral" field.
func (su *SpuUpdate) SetGiveIntegral(i int32) *SpuUpdate {
	su.mutation.ResetGiveIntegral()
	su.mutation.SetGiveIntegral(i)
	return su
}

// SetNillableGiveIntegral sets the "give_integral" field if the given value is not nil.
func (su *SpuUpdate) SetNillableGiveIntegral(i *int32) *SpuUpdate {
	if i != nil {
		su.SetGiveIntegral(*i)
	}
	return su
}

// AddGiveIntegral adds i to the "give_integral" field.
func (su *SpuUpdate) AddGiveIntegral(i int32) *SpuUpdate {
	su.mutation.AddGiveIntegral(i)
	return su
}

// ClearGiveIntegral clears the value of the "give_integral" field.
func (su *SpuUpdate) ClearGiveIntegral() *SpuUpdate {
	su.mutation.ClearGiveIntegral()
	return su
}

// SetGiveCouponTemplateIds sets the "give_coupon_template_ids" field.
func (su *SpuUpdate) SetGiveCouponTemplateIds(u []uint64) *SpuUpdate {
	su.mutation.SetGiveCouponTemplateIds(u)
	return su
}

// AppendGiveCouponTemplateIds appends u to the "give_coupon_template_ids" field.
func (su *SpuUpdate) AppendGiveCouponTemplateIds(u []uint64) *SpuUpdate {
	su.mutation.AppendGiveCouponTemplateIds(u)
	return su
}

// ClearGiveCouponTemplateIds clears the value of the "give_coupon_template_ids" field.
func (su *SpuUpdate) ClearGiveCouponTemplateIds() *SpuUpdate {
	su.mutation.ClearGiveCouponTemplateIds()
	return su
}

// SetSubCommissionType sets the "sub_commission_type" field.
func (su *SpuUpdate) SetSubCommissionType(b bool) *SpuUpdate {
	su.mutation.SetSubCommissionType(b)
	return su
}

// SetNillableSubCommissionType sets the "sub_commission_type" field if the given value is not nil.
func (su *SpuUpdate) SetNillableSubCommissionType(b *bool) *SpuUpdate {
	if b != nil {
		su.SetSubCommissionType(*b)
	}
	return su
}

// ClearSubCommissionType clears the value of the "sub_commission_type" field.
func (su *SpuUpdate) ClearSubCommissionType() *SpuUpdate {
	su.mutation.ClearSubCommissionType()
	return su
}

// SetActivityOrders sets the "activity_orders" field.
func (su *SpuUpdate) SetActivityOrders(i []int32) *SpuUpdate {
	su.mutation.SetActivityOrders(i)
	return su
}

// AppendActivityOrders appends i to the "activity_orders" field.
func (su *SpuUpdate) AppendActivityOrders(i []int32) *SpuUpdate {
	su.mutation.AppendActivityOrders(i)
	return su
}

// ClearActivityOrders clears the value of the "activity_orders" field.
func (su *SpuUpdate) ClearActivityOrders() *SpuUpdate {
	su.mutation.ClearActivityOrders()
	return su
}

// SetSalesCount sets the "sales_count" field.
func (su *SpuUpdate) SetSalesCount(i int32) *SpuUpdate {
	su.mutation.ResetSalesCount()
	su.mutation.SetSalesCount(i)
	return su
}

// SetNillableSalesCount sets the "sales_count" field if the given value is not nil.
func (su *SpuUpdate) SetNillableSalesCount(i *int32) *SpuUpdate {
	if i != nil {
		su.SetSalesCount(*i)
	}
	return su
}

// AddSalesCount adds i to the "sales_count" field.
func (su *SpuUpdate) AddSalesCount(i int32) *SpuUpdate {
	su.mutation.AddSalesCount(i)
	return su
}

// ClearSalesCount clears the value of the "sales_count" field.
func (su *SpuUpdate) ClearSalesCount() *SpuUpdate {
	su.mutation.ClearSalesCount()
	return su
}

// SetVirtualSalesCount sets the "virtual_sales_count" field.
func (su *SpuUpdate) SetVirtualSalesCount(i int32) *SpuUpdate {
	su.mutation.ResetVirtualSalesCount()
	su.mutation.SetVirtualSalesCount(i)
	return su
}

// SetNillableVirtualSalesCount sets the "virtual_sales_count" field if the given value is not nil.
func (su *SpuUpdate) SetNillableVirtualSalesCount(i *int32) *SpuUpdate {
	if i != nil {
		su.SetVirtualSalesCount(*i)
	}
	return su
}

// AddVirtualSalesCount adds i to the "virtual_sales_count" field.
func (su *SpuUpdate) AddVirtualSalesCount(i int32) *SpuUpdate {
	su.mutation.AddVirtualSalesCount(i)
	return su
}

// ClearVirtualSalesCount clears the value of the "virtual_sales_count" field.
func (su *SpuUpdate) ClearVirtualSalesCount() *SpuUpdate {
	su.mutation.ClearVirtualSalesCount()
	return su
}

// SetBrowseCount sets the "browse_count" field.
func (su *SpuUpdate) SetBrowseCount(i int32) *SpuUpdate {
	su.mutation.ResetBrowseCount()
	su.mutation.SetBrowseCount(i)
	return su
}

// SetNillableBrowseCount sets the "browse_count" field if the given value is not nil.
func (su *SpuUpdate) SetNillableBrowseCount(i *int32) *SpuUpdate {
	if i != nil {
		su.SetBrowseCount(*i)
	}
	return su
}

// AddBrowseCount adds i to the "browse_count" field.
func (su *SpuUpdate) AddBrowseCount(i int32) *SpuUpdate {
	su.mutation.AddBrowseCount(i)
	return su
}

// ClearBrowseCount clears the value of the "browse_count" field.
func (su *SpuUpdate) ClearBrowseCount() *SpuUpdate {
	su.mutation.ClearBrowseCount()
	return su
}

// AddSkuIDs adds the "skus" edge to the Sku entity by IDs.
func (su *SpuUpdate) AddSkuIDs(ids ...uint64) *SpuUpdate {
	su.mutation.AddSkuIDs(ids...)
	return su
}

// AddSkus adds the "skus" edges to the Sku entity.
func (su *SpuUpdate) AddSkus(s ...*Sku) *SpuUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSkuIDs(ids...)
}

// SetBrandsID sets the "brands" edge to the Brand entity by ID.
func (su *SpuUpdate) SetBrandsID(id uint64) *SpuUpdate {
	su.mutation.SetBrandsID(id)
	return su
}

// SetNillableBrandsID sets the "brands" edge to the Brand entity by ID if the given value is not nil.
func (su *SpuUpdate) SetNillableBrandsID(id *uint64) *SpuUpdate {
	if id != nil {
		su = su.SetBrandsID(*id)
	}
	return su
}

// SetBrands sets the "brands" edge to the Brand entity.
func (su *SpuUpdate) SetBrands(b *Brand) *SpuUpdate {
	return su.SetBrandsID(b.ID)
}

// SetCategorysID sets the "categorys" edge to the Category entity by ID.
func (su *SpuUpdate) SetCategorysID(id uint64) *SpuUpdate {
	su.mutation.SetCategorysID(id)
	return su
}

// SetNillableCategorysID sets the "categorys" edge to the Category entity by ID if the given value is not nil.
func (su *SpuUpdate) SetNillableCategorysID(id *uint64) *SpuUpdate {
	if id != nil {
		su = su.SetCategorysID(*id)
	}
	return su
}

// SetCategorys sets the "categorys" edge to the Category entity.
func (su *SpuUpdate) SetCategorys(c *Category) *SpuUpdate {
	return su.SetCategorysID(c.ID)
}

// Mutation returns the SpuMutation object of the builder.
func (su *SpuUpdate) Mutation() *SpuMutation {
	return su.mutation
}

// ClearSkus clears all "skus" edges to the Sku entity.
func (su *SpuUpdate) ClearSkus() *SpuUpdate {
	su.mutation.ClearSkus()
	return su
}

// RemoveSkuIDs removes the "skus" edge to Sku entities by IDs.
func (su *SpuUpdate) RemoveSkuIDs(ids ...uint64) *SpuUpdate {
	su.mutation.RemoveSkuIDs(ids...)
	return su
}

// RemoveSkus removes "skus" edges to Sku entities.
func (su *SpuUpdate) RemoveSkus(s ...*Sku) *SpuUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSkuIDs(ids...)
}

// ClearBrands clears the "brands" edge to the Brand entity.
func (su *SpuUpdate) ClearBrands() *SpuUpdate {
	su.mutation.ClearBrands()
	return su
}

// ClearCategorys clears the "categorys" edge to the Category entity.
func (su *SpuUpdate) ClearCategorys() *SpuUpdate {
	su.mutation.ClearCategorys()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SpuUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SpuUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SpuUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SpuUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SpuUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if spu.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized spu.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := spu.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (su *SpuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(spu.Table, spu.Columns, sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(spu.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(spu.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(spu.FieldStatus, field.TypeUint8, value)
	}
	if su.mutation.StatusCleared() {
		_spec.ClearField(spu.FieldStatus, field.TypeUint8)
	}
	if value, ok := su.mutation.Sort(); ok {
		_spec.SetField(spu.FieldSort, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedSort(); ok {
		_spec.AddField(spu.FieldSort, field.TypeUint32, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(spu.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(spu.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(spu.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Keyword(); ok {
		_spec.SetField(spu.FieldKeyword, field.TypeString, value)
	}
	if su.mutation.KeywordCleared() {
		_spec.ClearField(spu.FieldKeyword, field.TypeString)
	}
	if value, ok := su.mutation.Introduction(); ok {
		_spec.SetField(spu.FieldIntroduction, field.TypeString, value)
	}
	if su.mutation.IntroductionCleared() {
		_spec.ClearField(spu.FieldIntroduction, field.TypeString)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(spu.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(spu.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.BarCode(); ok {
		_spec.SetField(spu.FieldBarCode, field.TypeString, value)
	}
	if su.mutation.BarCodeCleared() {
		_spec.ClearField(spu.FieldBarCode, field.TypeString)
	}
	if value, ok := su.mutation.PicURL(); ok {
		_spec.SetField(spu.FieldPicURL, field.TypeString, value)
	}
	if value, ok := su.mutation.SliderPicUrls(); ok {
		_spec.SetField(spu.FieldSliderPicUrls, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedSliderPicUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, spu.FieldSliderPicUrls, value)
		})
	}
	if su.mutation.SliderPicUrlsCleared() {
		_spec.ClearField(spu.FieldSliderPicUrls, field.TypeJSON)
	}
	if value, ok := su.mutation.VideoURL(); ok {
		_spec.SetField(spu.FieldVideoURL, field.TypeString, value)
	}
	if su.mutation.VideoURLCleared() {
		_spec.ClearField(spu.FieldVideoURL, field.TypeString)
	}
	if value, ok := su.mutation.Unit(); ok {
		_spec.SetField(spu.FieldUnit, field.TypeUint8, value)
	}
	if value, ok := su.mutation.AddedUnit(); ok {
		_spec.AddField(spu.FieldUnit, field.TypeUint8, value)
	}
	if value, ok := su.mutation.SpecType(); ok {
		_spec.SetField(spu.FieldSpecType, field.TypeBool, value)
	}
	if su.mutation.SpecTypeCleared() {
		_spec.ClearField(spu.FieldSpecType, field.TypeBool)
	}
	if value, ok := su.mutation.Price(); ok {
		_spec.SetField(spu.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedPrice(); ok {
		_spec.AddField(spu.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := su.mutation.MarketPrice(); ok {
		_spec.SetField(spu.FieldMarketPrice, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedMarketPrice(); ok {
		_spec.AddField(spu.FieldMarketPrice, field.TypeInt32, value)
	}
	if su.mutation.MarketPriceCleared() {
		_spec.ClearField(spu.FieldMarketPrice, field.TypeInt32)
	}
	if value, ok := su.mutation.CostPrice(); ok {
		_spec.SetField(spu.FieldCostPrice, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedCostPrice(); ok {
		_spec.AddField(spu.FieldCostPrice, field.TypeInt32, value)
	}
	if value, ok := su.mutation.Stock(); ok {
		_spec.SetField(spu.FieldStock, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedStock(); ok {
		_spec.AddField(spu.FieldStock, field.TypeInt32, value)
	}
	if value, ok := su.mutation.DeliveryTemplateID(); ok {
		_spec.SetField(spu.FieldDeliveryTemplateID, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedDeliveryTemplateID(); ok {
		_spec.AddField(spu.FieldDeliveryTemplateID, field.TypeUint64, value)
	}
	if su.mutation.DeliveryTemplateIDCleared() {
		_spec.ClearField(spu.FieldDeliveryTemplateID, field.TypeUint64)
	}
	if value, ok := su.mutation.RecommendHot(); ok {
		_spec.SetField(spu.FieldRecommendHot, field.TypeBool, value)
	}
	if su.mutation.RecommendHotCleared() {
		_spec.ClearField(spu.FieldRecommendHot, field.TypeBool)
	}
	if value, ok := su.mutation.RecommendBenefit(); ok {
		_spec.SetField(spu.FieldRecommendBenefit, field.TypeBool, value)
	}
	if su.mutation.RecommendBenefitCleared() {
		_spec.ClearField(spu.FieldRecommendBenefit, field.TypeBool)
	}
	if value, ok := su.mutation.RecommendBest(); ok {
		_spec.SetField(spu.FieldRecommendBest, field.TypeBool, value)
	}
	if su.mutation.RecommendBestCleared() {
		_spec.ClearField(spu.FieldRecommendBest, field.TypeBool)
	}
	if value, ok := su.mutation.RecommendNew(); ok {
		_spec.SetField(spu.FieldRecommendNew, field.TypeBool, value)
	}
	if su.mutation.RecommendNewCleared() {
		_spec.ClearField(spu.FieldRecommendNew, field.TypeBool)
	}
	if value, ok := su.mutation.RecommendGood(); ok {
		_spec.SetField(spu.FieldRecommendGood, field.TypeBool, value)
	}
	if su.mutation.RecommendGoodCleared() {
		_spec.ClearField(spu.FieldRecommendGood, field.TypeBool)
	}
	if value, ok := su.mutation.GiveIntegral(); ok {
		_spec.SetField(spu.FieldGiveIntegral, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedGiveIntegral(); ok {
		_spec.AddField(spu.FieldGiveIntegral, field.TypeInt32, value)
	}
	if su.mutation.GiveIntegralCleared() {
		_spec.ClearField(spu.FieldGiveIntegral, field.TypeInt32)
	}
	if value, ok := su.mutation.GiveCouponTemplateIds(); ok {
		_spec.SetField(spu.FieldGiveCouponTemplateIds, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedGiveCouponTemplateIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, spu.FieldGiveCouponTemplateIds, value)
		})
	}
	if su.mutation.GiveCouponTemplateIdsCleared() {
		_spec.ClearField(spu.FieldGiveCouponTemplateIds, field.TypeJSON)
	}
	if value, ok := su.mutation.SubCommissionType(); ok {
		_spec.SetField(spu.FieldSubCommissionType, field.TypeBool, value)
	}
	if su.mutation.SubCommissionTypeCleared() {
		_spec.ClearField(spu.FieldSubCommissionType, field.TypeBool)
	}
	if value, ok := su.mutation.ActivityOrders(); ok {
		_spec.SetField(spu.FieldActivityOrders, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedActivityOrders(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, spu.FieldActivityOrders, value)
		})
	}
	if su.mutation.ActivityOrdersCleared() {
		_spec.ClearField(spu.FieldActivityOrders, field.TypeJSON)
	}
	if value, ok := su.mutation.SalesCount(); ok {
		_spec.SetField(spu.FieldSalesCount, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedSalesCount(); ok {
		_spec.AddField(spu.FieldSalesCount, field.TypeInt32, value)
	}
	if su.mutation.SalesCountCleared() {
		_spec.ClearField(spu.FieldSalesCount, field.TypeInt32)
	}
	if value, ok := su.mutation.VirtualSalesCount(); ok {
		_spec.SetField(spu.FieldVirtualSalesCount, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedVirtualSalesCount(); ok {
		_spec.AddField(spu.FieldVirtualSalesCount, field.TypeInt32, value)
	}
	if su.mutation.VirtualSalesCountCleared() {
		_spec.ClearField(spu.FieldVirtualSalesCount, field.TypeInt32)
	}
	if value, ok := su.mutation.BrowseCount(); ok {
		_spec.SetField(spu.FieldBrowseCount, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedBrowseCount(); ok {
		_spec.AddField(spu.FieldBrowseCount, field.TypeInt32, value)
	}
	if su.mutation.BrowseCountCleared() {
		_spec.ClearField(spu.FieldBrowseCount, field.TypeInt32)
	}
	if su.mutation.SkusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SkusTable,
			Columns: []string{spu.SkusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSkusIDs(); len(nodes) > 0 && !su.mutation.SkusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SkusTable,
			Columns: []string{spu.SkusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SkusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SkusTable,
			Columns: []string{spu.SkusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BrandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spu.BrandsTable,
			Columns: []string{spu.BrandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BrandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spu.BrandsTable,
			Columns: []string{spu.BrandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CategorysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spu.CategorysTable,
			Columns: []string{spu.CategorysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CategorysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spu.CategorysTable,
			Columns: []string{spu.CategorysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SpuUpdateOne is the builder for updating a single Spu entity.
type SpuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpuMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SpuUpdateOne) SetUpdatedAt(t time.Time) *SpuUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetStatus sets the "status" field.
func (suo *SpuUpdateOne) SetStatus(u uint8) *SpuUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(u)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableStatus(u *uint8) *SpuUpdateOne {
	if u != nil {
		suo.SetStatus(*u)
	}
	return suo
}

// AddStatus adds u to the "status" field.
func (suo *SpuUpdateOne) AddStatus(u int8) *SpuUpdateOne {
	suo.mutation.AddStatus(u)
	return suo
}

// ClearStatus clears the value of the "status" field.
func (suo *SpuUpdateOne) ClearStatus() *SpuUpdateOne {
	suo.mutation.ClearStatus()
	return suo
}

// SetSort sets the "sort" field.
func (suo *SpuUpdateOne) SetSort(u uint32) *SpuUpdateOne {
	suo.mutation.ResetSort()
	suo.mutation.SetSort(u)
	return suo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableSort(u *uint32) *SpuUpdateOne {
	if u != nil {
		suo.SetSort(*u)
	}
	return suo
}

// AddSort adds u to the "sort" field.
func (suo *SpuUpdateOne) AddSort(u int32) *SpuUpdateOne {
	suo.mutation.AddSort(u)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SpuUpdateOne) SetDeletedAt(t time.Time) *SpuUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableDeletedAt(t *time.Time) *SpuUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SpuUpdateOne) ClearDeletedAt() *SpuUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetName sets the "name" field.
func (suo *SpuUpdateOne) SetName(s string) *SpuUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetKeyword sets the "keyword" field.
func (suo *SpuUpdateOne) SetKeyword(s string) *SpuUpdateOne {
	suo.mutation.SetKeyword(s)
	return suo
}

// SetNillableKeyword sets the "keyword" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableKeyword(s *string) *SpuUpdateOne {
	if s != nil {
		suo.SetKeyword(*s)
	}
	return suo
}

// ClearKeyword clears the value of the "keyword" field.
func (suo *SpuUpdateOne) ClearKeyword() *SpuUpdateOne {
	suo.mutation.ClearKeyword()
	return suo
}

// SetIntroduction sets the "introduction" field.
func (suo *SpuUpdateOne) SetIntroduction(s string) *SpuUpdateOne {
	suo.mutation.SetIntroduction(s)
	return suo
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableIntroduction(s *string) *SpuUpdateOne {
	if s != nil {
		suo.SetIntroduction(*s)
	}
	return suo
}

// ClearIntroduction clears the value of the "introduction" field.
func (suo *SpuUpdateOne) ClearIntroduction() *SpuUpdateOne {
	suo.mutation.ClearIntroduction()
	return suo
}

// SetDescription sets the "description" field.
func (suo *SpuUpdateOne) SetDescription(s string) *SpuUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableDescription(s *string) *SpuUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SpuUpdateOne) ClearDescription() *SpuUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetBarCode sets the "bar_code" field.
func (suo *SpuUpdateOne) SetBarCode(s string) *SpuUpdateOne {
	suo.mutation.SetBarCode(s)
	return suo
}

// SetNillableBarCode sets the "bar_code" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableBarCode(s *string) *SpuUpdateOne {
	if s != nil {
		suo.SetBarCode(*s)
	}
	return suo
}

// ClearBarCode clears the value of the "bar_code" field.
func (suo *SpuUpdateOne) ClearBarCode() *SpuUpdateOne {
	suo.mutation.ClearBarCode()
	return suo
}

// SetCategoryID sets the "category_id" field.
func (suo *SpuUpdateOne) SetCategoryID(u uint64) *SpuUpdateOne {
	suo.mutation.SetCategoryID(u)
	return suo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableCategoryID(u *uint64) *SpuUpdateOne {
	if u != nil {
		suo.SetCategoryID(*u)
	}
	return suo
}

// ClearCategoryID clears the value of the "category_id" field.
func (suo *SpuUpdateOne) ClearCategoryID() *SpuUpdateOne {
	suo.mutation.ClearCategoryID()
	return suo
}

// SetBrandID sets the "brand_id" field.
func (suo *SpuUpdateOne) SetBrandID(u uint64) *SpuUpdateOne {
	suo.mutation.SetBrandID(u)
	return suo
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableBrandID(u *uint64) *SpuUpdateOne {
	if u != nil {
		suo.SetBrandID(*u)
	}
	return suo
}

// ClearBrandID clears the value of the "brand_id" field.
func (suo *SpuUpdateOne) ClearBrandID() *SpuUpdateOne {
	suo.mutation.ClearBrandID()
	return suo
}

// SetPicURL sets the "pic_url" field.
func (suo *SpuUpdateOne) SetPicURL(s string) *SpuUpdateOne {
	suo.mutation.SetPicURL(s)
	return suo
}

// SetSliderPicUrls sets the "slider_pic_urls" field.
func (suo *SpuUpdateOne) SetSliderPicUrls(s []string) *SpuUpdateOne {
	suo.mutation.SetSliderPicUrls(s)
	return suo
}

// AppendSliderPicUrls appends s to the "slider_pic_urls" field.
func (suo *SpuUpdateOne) AppendSliderPicUrls(s []string) *SpuUpdateOne {
	suo.mutation.AppendSliderPicUrls(s)
	return suo
}

// ClearSliderPicUrls clears the value of the "slider_pic_urls" field.
func (suo *SpuUpdateOne) ClearSliderPicUrls() *SpuUpdateOne {
	suo.mutation.ClearSliderPicUrls()
	return suo
}

// SetVideoURL sets the "video_url" field.
func (suo *SpuUpdateOne) SetVideoURL(s string) *SpuUpdateOne {
	suo.mutation.SetVideoURL(s)
	return suo
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableVideoURL(s *string) *SpuUpdateOne {
	if s != nil {
		suo.SetVideoURL(*s)
	}
	return suo
}

// ClearVideoURL clears the value of the "video_url" field.
func (suo *SpuUpdateOne) ClearVideoURL() *SpuUpdateOne {
	suo.mutation.ClearVideoURL()
	return suo
}

// SetUnit sets the "unit" field.
func (suo *SpuUpdateOne) SetUnit(u uint8) *SpuUpdateOne {
	suo.mutation.ResetUnit()
	suo.mutation.SetUnit(u)
	return suo
}

// AddUnit adds u to the "unit" field.
func (suo *SpuUpdateOne) AddUnit(u int8) *SpuUpdateOne {
	suo.mutation.AddUnit(u)
	return suo
}

// SetSpecType sets the "spec_type" field.
func (suo *SpuUpdateOne) SetSpecType(b bool) *SpuUpdateOne {
	suo.mutation.SetSpecType(b)
	return suo
}

// SetNillableSpecType sets the "spec_type" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableSpecType(b *bool) *SpuUpdateOne {
	if b != nil {
		suo.SetSpecType(*b)
	}
	return suo
}

// ClearSpecType clears the value of the "spec_type" field.
func (suo *SpuUpdateOne) ClearSpecType() *SpuUpdateOne {
	suo.mutation.ClearSpecType()
	return suo
}

// SetPrice sets the "price" field.
func (suo *SpuUpdateOne) SetPrice(i int32) *SpuUpdateOne {
	suo.mutation.ResetPrice()
	suo.mutation.SetPrice(i)
	return suo
}

// AddPrice adds i to the "price" field.
func (suo *SpuUpdateOne) AddPrice(i int32) *SpuUpdateOne {
	suo.mutation.AddPrice(i)
	return suo
}

// SetMarketPrice sets the "market_price" field.
func (suo *SpuUpdateOne) SetMarketPrice(i int32) *SpuUpdateOne {
	suo.mutation.ResetMarketPrice()
	suo.mutation.SetMarketPrice(i)
	return suo
}

// SetNillableMarketPrice sets the "market_price" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableMarketPrice(i *int32) *SpuUpdateOne {
	if i != nil {
		suo.SetMarketPrice(*i)
	}
	return suo
}

// AddMarketPrice adds i to the "market_price" field.
func (suo *SpuUpdateOne) AddMarketPrice(i int32) *SpuUpdateOne {
	suo.mutation.AddMarketPrice(i)
	return suo
}

// ClearMarketPrice clears the value of the "market_price" field.
func (suo *SpuUpdateOne) ClearMarketPrice() *SpuUpdateOne {
	suo.mutation.ClearMarketPrice()
	return suo
}

// SetCostPrice sets the "cost_price" field.
func (suo *SpuUpdateOne) SetCostPrice(i int32) *SpuUpdateOne {
	suo.mutation.ResetCostPrice()
	suo.mutation.SetCostPrice(i)
	return suo
}

// AddCostPrice adds i to the "cost_price" field.
func (suo *SpuUpdateOne) AddCostPrice(i int32) *SpuUpdateOne {
	suo.mutation.AddCostPrice(i)
	return suo
}

// SetStock sets the "stock" field.
func (suo *SpuUpdateOne) SetStock(i int32) *SpuUpdateOne {
	suo.mutation.ResetStock()
	suo.mutation.SetStock(i)
	return suo
}

// AddStock adds i to the "stock" field.
func (suo *SpuUpdateOne) AddStock(i int32) *SpuUpdateOne {
	suo.mutation.AddStock(i)
	return suo
}

// SetDeliveryTemplateID sets the "deliveryTemplate_id" field.
func (suo *SpuUpdateOne) SetDeliveryTemplateID(u uint64) *SpuUpdateOne {
	suo.mutation.ResetDeliveryTemplateID()
	suo.mutation.SetDeliveryTemplateID(u)
	return suo
}

// SetNillableDeliveryTemplateID sets the "deliveryTemplate_id" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableDeliveryTemplateID(u *uint64) *SpuUpdateOne {
	if u != nil {
		suo.SetDeliveryTemplateID(*u)
	}
	return suo
}

// AddDeliveryTemplateID adds u to the "deliveryTemplate_id" field.
func (suo *SpuUpdateOne) AddDeliveryTemplateID(u int64) *SpuUpdateOne {
	suo.mutation.AddDeliveryTemplateID(u)
	return suo
}

// ClearDeliveryTemplateID clears the value of the "deliveryTemplate_id" field.
func (suo *SpuUpdateOne) ClearDeliveryTemplateID() *SpuUpdateOne {
	suo.mutation.ClearDeliveryTemplateID()
	return suo
}

// SetRecommendHot sets the "recommend_hot" field.
func (suo *SpuUpdateOne) SetRecommendHot(b bool) *SpuUpdateOne {
	suo.mutation.SetRecommendHot(b)
	return suo
}

// SetNillableRecommendHot sets the "recommend_hot" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableRecommendHot(b *bool) *SpuUpdateOne {
	if b != nil {
		suo.SetRecommendHot(*b)
	}
	return suo
}

// ClearRecommendHot clears the value of the "recommend_hot" field.
func (suo *SpuUpdateOne) ClearRecommendHot() *SpuUpdateOne {
	suo.mutation.ClearRecommendHot()
	return suo
}

// SetRecommendBenefit sets the "recommend_benefit" field.
func (suo *SpuUpdateOne) SetRecommendBenefit(b bool) *SpuUpdateOne {
	suo.mutation.SetRecommendBenefit(b)
	return suo
}

// SetNillableRecommendBenefit sets the "recommend_benefit" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableRecommendBenefit(b *bool) *SpuUpdateOne {
	if b != nil {
		suo.SetRecommendBenefit(*b)
	}
	return suo
}

// ClearRecommendBenefit clears the value of the "recommend_benefit" field.
func (suo *SpuUpdateOne) ClearRecommendBenefit() *SpuUpdateOne {
	suo.mutation.ClearRecommendBenefit()
	return suo
}

// SetRecommendBest sets the "recommend_best" field.
func (suo *SpuUpdateOne) SetRecommendBest(b bool) *SpuUpdateOne {
	suo.mutation.SetRecommendBest(b)
	return suo
}

// SetNillableRecommendBest sets the "recommend_best" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableRecommendBest(b *bool) *SpuUpdateOne {
	if b != nil {
		suo.SetRecommendBest(*b)
	}
	return suo
}

// ClearRecommendBest clears the value of the "recommend_best" field.
func (suo *SpuUpdateOne) ClearRecommendBest() *SpuUpdateOne {
	suo.mutation.ClearRecommendBest()
	return suo
}

// SetRecommendNew sets the "recommend_new" field.
func (suo *SpuUpdateOne) SetRecommendNew(b bool) *SpuUpdateOne {
	suo.mutation.SetRecommendNew(b)
	return suo
}

// SetNillableRecommendNew sets the "recommend_new" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableRecommendNew(b *bool) *SpuUpdateOne {
	if b != nil {
		suo.SetRecommendNew(*b)
	}
	return suo
}

// ClearRecommendNew clears the value of the "recommend_new" field.
func (suo *SpuUpdateOne) ClearRecommendNew() *SpuUpdateOne {
	suo.mutation.ClearRecommendNew()
	return suo
}

// SetRecommendGood sets the "recommend_good" field.
func (suo *SpuUpdateOne) SetRecommendGood(b bool) *SpuUpdateOne {
	suo.mutation.SetRecommendGood(b)
	return suo
}

// SetNillableRecommendGood sets the "recommend_good" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableRecommendGood(b *bool) *SpuUpdateOne {
	if b != nil {
		suo.SetRecommendGood(*b)
	}
	return suo
}

// ClearRecommendGood clears the value of the "recommend_good" field.
func (suo *SpuUpdateOne) ClearRecommendGood() *SpuUpdateOne {
	suo.mutation.ClearRecommendGood()
	return suo
}

// SetGiveIntegral sets the "give_integral" field.
func (suo *SpuUpdateOne) SetGiveIntegral(i int32) *SpuUpdateOne {
	suo.mutation.ResetGiveIntegral()
	suo.mutation.SetGiveIntegral(i)
	return suo
}

// SetNillableGiveIntegral sets the "give_integral" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableGiveIntegral(i *int32) *SpuUpdateOne {
	if i != nil {
		suo.SetGiveIntegral(*i)
	}
	return suo
}

// AddGiveIntegral adds i to the "give_integral" field.
func (suo *SpuUpdateOne) AddGiveIntegral(i int32) *SpuUpdateOne {
	suo.mutation.AddGiveIntegral(i)
	return suo
}

// ClearGiveIntegral clears the value of the "give_integral" field.
func (suo *SpuUpdateOne) ClearGiveIntegral() *SpuUpdateOne {
	suo.mutation.ClearGiveIntegral()
	return suo
}

// SetGiveCouponTemplateIds sets the "give_coupon_template_ids" field.
func (suo *SpuUpdateOne) SetGiveCouponTemplateIds(u []uint64) *SpuUpdateOne {
	suo.mutation.SetGiveCouponTemplateIds(u)
	return suo
}

// AppendGiveCouponTemplateIds appends u to the "give_coupon_template_ids" field.
func (suo *SpuUpdateOne) AppendGiveCouponTemplateIds(u []uint64) *SpuUpdateOne {
	suo.mutation.AppendGiveCouponTemplateIds(u)
	return suo
}

// ClearGiveCouponTemplateIds clears the value of the "give_coupon_template_ids" field.
func (suo *SpuUpdateOne) ClearGiveCouponTemplateIds() *SpuUpdateOne {
	suo.mutation.ClearGiveCouponTemplateIds()
	return suo
}

// SetSubCommissionType sets the "sub_commission_type" field.
func (suo *SpuUpdateOne) SetSubCommissionType(b bool) *SpuUpdateOne {
	suo.mutation.SetSubCommissionType(b)
	return suo
}

// SetNillableSubCommissionType sets the "sub_commission_type" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableSubCommissionType(b *bool) *SpuUpdateOne {
	if b != nil {
		suo.SetSubCommissionType(*b)
	}
	return suo
}

// ClearSubCommissionType clears the value of the "sub_commission_type" field.
func (suo *SpuUpdateOne) ClearSubCommissionType() *SpuUpdateOne {
	suo.mutation.ClearSubCommissionType()
	return suo
}

// SetActivityOrders sets the "activity_orders" field.
func (suo *SpuUpdateOne) SetActivityOrders(i []int32) *SpuUpdateOne {
	suo.mutation.SetActivityOrders(i)
	return suo
}

// AppendActivityOrders appends i to the "activity_orders" field.
func (suo *SpuUpdateOne) AppendActivityOrders(i []int32) *SpuUpdateOne {
	suo.mutation.AppendActivityOrders(i)
	return suo
}

// ClearActivityOrders clears the value of the "activity_orders" field.
func (suo *SpuUpdateOne) ClearActivityOrders() *SpuUpdateOne {
	suo.mutation.ClearActivityOrders()
	return suo
}

// SetSalesCount sets the "sales_count" field.
func (suo *SpuUpdateOne) SetSalesCount(i int32) *SpuUpdateOne {
	suo.mutation.ResetSalesCount()
	suo.mutation.SetSalesCount(i)
	return suo
}

// SetNillableSalesCount sets the "sales_count" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableSalesCount(i *int32) *SpuUpdateOne {
	if i != nil {
		suo.SetSalesCount(*i)
	}
	return suo
}

// AddSalesCount adds i to the "sales_count" field.
func (suo *SpuUpdateOne) AddSalesCount(i int32) *SpuUpdateOne {
	suo.mutation.AddSalesCount(i)
	return suo
}

// ClearSalesCount clears the value of the "sales_count" field.
func (suo *SpuUpdateOne) ClearSalesCount() *SpuUpdateOne {
	suo.mutation.ClearSalesCount()
	return suo
}

// SetVirtualSalesCount sets the "virtual_sales_count" field.
func (suo *SpuUpdateOne) SetVirtualSalesCount(i int32) *SpuUpdateOne {
	suo.mutation.ResetVirtualSalesCount()
	suo.mutation.SetVirtualSalesCount(i)
	return suo
}

// SetNillableVirtualSalesCount sets the "virtual_sales_count" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableVirtualSalesCount(i *int32) *SpuUpdateOne {
	if i != nil {
		suo.SetVirtualSalesCount(*i)
	}
	return suo
}

// AddVirtualSalesCount adds i to the "virtual_sales_count" field.
func (suo *SpuUpdateOne) AddVirtualSalesCount(i int32) *SpuUpdateOne {
	suo.mutation.AddVirtualSalesCount(i)
	return suo
}

// ClearVirtualSalesCount clears the value of the "virtual_sales_count" field.
func (suo *SpuUpdateOne) ClearVirtualSalesCount() *SpuUpdateOne {
	suo.mutation.ClearVirtualSalesCount()
	return suo
}

// SetBrowseCount sets the "browse_count" field.
func (suo *SpuUpdateOne) SetBrowseCount(i int32) *SpuUpdateOne {
	suo.mutation.ResetBrowseCount()
	suo.mutation.SetBrowseCount(i)
	return suo
}

// SetNillableBrowseCount sets the "browse_count" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableBrowseCount(i *int32) *SpuUpdateOne {
	if i != nil {
		suo.SetBrowseCount(*i)
	}
	return suo
}

// AddBrowseCount adds i to the "browse_count" field.
func (suo *SpuUpdateOne) AddBrowseCount(i int32) *SpuUpdateOne {
	suo.mutation.AddBrowseCount(i)
	return suo
}

// ClearBrowseCount clears the value of the "browse_count" field.
func (suo *SpuUpdateOne) ClearBrowseCount() *SpuUpdateOne {
	suo.mutation.ClearBrowseCount()
	return suo
}

// AddSkuIDs adds the "skus" edge to the Sku entity by IDs.
func (suo *SpuUpdateOne) AddSkuIDs(ids ...uint64) *SpuUpdateOne {
	suo.mutation.AddSkuIDs(ids...)
	return suo
}

// AddSkus adds the "skus" edges to the Sku entity.
func (suo *SpuUpdateOne) AddSkus(s ...*Sku) *SpuUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSkuIDs(ids...)
}

// SetBrandsID sets the "brands" edge to the Brand entity by ID.
func (suo *SpuUpdateOne) SetBrandsID(id uint64) *SpuUpdateOne {
	suo.mutation.SetBrandsID(id)
	return suo
}

// SetNillableBrandsID sets the "brands" edge to the Brand entity by ID if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableBrandsID(id *uint64) *SpuUpdateOne {
	if id != nil {
		suo = suo.SetBrandsID(*id)
	}
	return suo
}

// SetBrands sets the "brands" edge to the Brand entity.
func (suo *SpuUpdateOne) SetBrands(b *Brand) *SpuUpdateOne {
	return suo.SetBrandsID(b.ID)
}

// SetCategorysID sets the "categorys" edge to the Category entity by ID.
func (suo *SpuUpdateOne) SetCategorysID(id uint64) *SpuUpdateOne {
	suo.mutation.SetCategorysID(id)
	return suo
}

// SetNillableCategorysID sets the "categorys" edge to the Category entity by ID if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableCategorysID(id *uint64) *SpuUpdateOne {
	if id != nil {
		suo = suo.SetCategorysID(*id)
	}
	return suo
}

// SetCategorys sets the "categorys" edge to the Category entity.
func (suo *SpuUpdateOne) SetCategorys(c *Category) *SpuUpdateOne {
	return suo.SetCategorysID(c.ID)
}

// Mutation returns the SpuMutation object of the builder.
func (suo *SpuUpdateOne) Mutation() *SpuMutation {
	return suo.mutation
}

// ClearSkus clears all "skus" edges to the Sku entity.
func (suo *SpuUpdateOne) ClearSkus() *SpuUpdateOne {
	suo.mutation.ClearSkus()
	return suo
}

// RemoveSkuIDs removes the "skus" edge to Sku entities by IDs.
func (suo *SpuUpdateOne) RemoveSkuIDs(ids ...uint64) *SpuUpdateOne {
	suo.mutation.RemoveSkuIDs(ids...)
	return suo
}

// RemoveSkus removes "skus" edges to Sku entities.
func (suo *SpuUpdateOne) RemoveSkus(s ...*Sku) *SpuUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSkuIDs(ids...)
}

// ClearBrands clears the "brands" edge to the Brand entity.
func (suo *SpuUpdateOne) ClearBrands() *SpuUpdateOne {
	suo.mutation.ClearBrands()
	return suo
}

// ClearCategorys clears the "categorys" edge to the Category entity.
func (suo *SpuUpdateOne) ClearCategorys() *SpuUpdateOne {
	suo.mutation.ClearCategorys()
	return suo
}

// Where appends a list predicates to the SpuUpdate builder.
func (suo *SpuUpdateOne) Where(ps ...predicate.Spu) *SpuUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SpuUpdateOne) Select(field string, fields ...string) *SpuUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Spu entity.
func (suo *SpuUpdateOne) Save(ctx context.Context) (*Spu, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SpuUpdateOne) SaveX(ctx context.Context) *Spu {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SpuUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SpuUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SpuUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if spu.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized spu.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := spu.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (suo *SpuUpdateOne) sqlSave(ctx context.Context) (_node *Spu, err error) {
	_spec := sqlgraph.NewUpdateSpec(spu.Table, spu.Columns, sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Spu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spu.FieldID)
		for _, f := range fields {
			if !spu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(spu.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(spu.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(spu.FieldStatus, field.TypeUint8, value)
	}
	if suo.mutation.StatusCleared() {
		_spec.ClearField(spu.FieldStatus, field.TypeUint8)
	}
	if value, ok := suo.mutation.Sort(); ok {
		_spec.SetField(spu.FieldSort, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedSort(); ok {
		_spec.AddField(spu.FieldSort, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(spu.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(spu.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(spu.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Keyword(); ok {
		_spec.SetField(spu.FieldKeyword, field.TypeString, value)
	}
	if suo.mutation.KeywordCleared() {
		_spec.ClearField(spu.FieldKeyword, field.TypeString)
	}
	if value, ok := suo.mutation.Introduction(); ok {
		_spec.SetField(spu.FieldIntroduction, field.TypeString, value)
	}
	if suo.mutation.IntroductionCleared() {
		_spec.ClearField(spu.FieldIntroduction, field.TypeString)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(spu.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(spu.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.BarCode(); ok {
		_spec.SetField(spu.FieldBarCode, field.TypeString, value)
	}
	if suo.mutation.BarCodeCleared() {
		_spec.ClearField(spu.FieldBarCode, field.TypeString)
	}
	if value, ok := suo.mutation.PicURL(); ok {
		_spec.SetField(spu.FieldPicURL, field.TypeString, value)
	}
	if value, ok := suo.mutation.SliderPicUrls(); ok {
		_spec.SetField(spu.FieldSliderPicUrls, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedSliderPicUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, spu.FieldSliderPicUrls, value)
		})
	}
	if suo.mutation.SliderPicUrlsCleared() {
		_spec.ClearField(spu.FieldSliderPicUrls, field.TypeJSON)
	}
	if value, ok := suo.mutation.VideoURL(); ok {
		_spec.SetField(spu.FieldVideoURL, field.TypeString, value)
	}
	if suo.mutation.VideoURLCleared() {
		_spec.ClearField(spu.FieldVideoURL, field.TypeString)
	}
	if value, ok := suo.mutation.Unit(); ok {
		_spec.SetField(spu.FieldUnit, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.AddedUnit(); ok {
		_spec.AddField(spu.FieldUnit, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.SpecType(); ok {
		_spec.SetField(spu.FieldSpecType, field.TypeBool, value)
	}
	if suo.mutation.SpecTypeCleared() {
		_spec.ClearField(spu.FieldSpecType, field.TypeBool)
	}
	if value, ok := suo.mutation.Price(); ok {
		_spec.SetField(spu.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedPrice(); ok {
		_spec.AddField(spu.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.MarketPrice(); ok {
		_spec.SetField(spu.FieldMarketPrice, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedMarketPrice(); ok {
		_spec.AddField(spu.FieldMarketPrice, field.TypeInt32, value)
	}
	if suo.mutation.MarketPriceCleared() {
		_spec.ClearField(spu.FieldMarketPrice, field.TypeInt32)
	}
	if value, ok := suo.mutation.CostPrice(); ok {
		_spec.SetField(spu.FieldCostPrice, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedCostPrice(); ok {
		_spec.AddField(spu.FieldCostPrice, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.Stock(); ok {
		_spec.SetField(spu.FieldStock, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedStock(); ok {
		_spec.AddField(spu.FieldStock, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.DeliveryTemplateID(); ok {
		_spec.SetField(spu.FieldDeliveryTemplateID, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedDeliveryTemplateID(); ok {
		_spec.AddField(spu.FieldDeliveryTemplateID, field.TypeUint64, value)
	}
	if suo.mutation.DeliveryTemplateIDCleared() {
		_spec.ClearField(spu.FieldDeliveryTemplateID, field.TypeUint64)
	}
	if value, ok := suo.mutation.RecommendHot(); ok {
		_spec.SetField(spu.FieldRecommendHot, field.TypeBool, value)
	}
	if suo.mutation.RecommendHotCleared() {
		_spec.ClearField(spu.FieldRecommendHot, field.TypeBool)
	}
	if value, ok := suo.mutation.RecommendBenefit(); ok {
		_spec.SetField(spu.FieldRecommendBenefit, field.TypeBool, value)
	}
	if suo.mutation.RecommendBenefitCleared() {
		_spec.ClearField(spu.FieldRecommendBenefit, field.TypeBool)
	}
	if value, ok := suo.mutation.RecommendBest(); ok {
		_spec.SetField(spu.FieldRecommendBest, field.TypeBool, value)
	}
	if suo.mutation.RecommendBestCleared() {
		_spec.ClearField(spu.FieldRecommendBest, field.TypeBool)
	}
	if value, ok := suo.mutation.RecommendNew(); ok {
		_spec.SetField(spu.FieldRecommendNew, field.TypeBool, value)
	}
	if suo.mutation.RecommendNewCleared() {
		_spec.ClearField(spu.FieldRecommendNew, field.TypeBool)
	}
	if value, ok := suo.mutation.RecommendGood(); ok {
		_spec.SetField(spu.FieldRecommendGood, field.TypeBool, value)
	}
	if suo.mutation.RecommendGoodCleared() {
		_spec.ClearField(spu.FieldRecommendGood, field.TypeBool)
	}
	if value, ok := suo.mutation.GiveIntegral(); ok {
		_spec.SetField(spu.FieldGiveIntegral, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedGiveIntegral(); ok {
		_spec.AddField(spu.FieldGiveIntegral, field.TypeInt32, value)
	}
	if suo.mutation.GiveIntegralCleared() {
		_spec.ClearField(spu.FieldGiveIntegral, field.TypeInt32)
	}
	if value, ok := suo.mutation.GiveCouponTemplateIds(); ok {
		_spec.SetField(spu.FieldGiveCouponTemplateIds, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedGiveCouponTemplateIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, spu.FieldGiveCouponTemplateIds, value)
		})
	}
	if suo.mutation.GiveCouponTemplateIdsCleared() {
		_spec.ClearField(spu.FieldGiveCouponTemplateIds, field.TypeJSON)
	}
	if value, ok := suo.mutation.SubCommissionType(); ok {
		_spec.SetField(spu.FieldSubCommissionType, field.TypeBool, value)
	}
	if suo.mutation.SubCommissionTypeCleared() {
		_spec.ClearField(spu.FieldSubCommissionType, field.TypeBool)
	}
	if value, ok := suo.mutation.ActivityOrders(); ok {
		_spec.SetField(spu.FieldActivityOrders, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedActivityOrders(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, spu.FieldActivityOrders, value)
		})
	}
	if suo.mutation.ActivityOrdersCleared() {
		_spec.ClearField(spu.FieldActivityOrders, field.TypeJSON)
	}
	if value, ok := suo.mutation.SalesCount(); ok {
		_spec.SetField(spu.FieldSalesCount, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedSalesCount(); ok {
		_spec.AddField(spu.FieldSalesCount, field.TypeInt32, value)
	}
	if suo.mutation.SalesCountCleared() {
		_spec.ClearField(spu.FieldSalesCount, field.TypeInt32)
	}
	if value, ok := suo.mutation.VirtualSalesCount(); ok {
		_spec.SetField(spu.FieldVirtualSalesCount, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedVirtualSalesCount(); ok {
		_spec.AddField(spu.FieldVirtualSalesCount, field.TypeInt32, value)
	}
	if suo.mutation.VirtualSalesCountCleared() {
		_spec.ClearField(spu.FieldVirtualSalesCount, field.TypeInt32)
	}
	if value, ok := suo.mutation.BrowseCount(); ok {
		_spec.SetField(spu.FieldBrowseCount, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedBrowseCount(); ok {
		_spec.AddField(spu.FieldBrowseCount, field.TypeInt32, value)
	}
	if suo.mutation.BrowseCountCleared() {
		_spec.ClearField(spu.FieldBrowseCount, field.TypeInt32)
	}
	if suo.mutation.SkusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SkusTable,
			Columns: []string{spu.SkusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSkusIDs(); len(nodes) > 0 && !suo.mutation.SkusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SkusTable,
			Columns: []string{spu.SkusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SkusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SkusTable,
			Columns: []string{spu.SkusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BrandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spu.BrandsTable,
			Columns: []string{spu.BrandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BrandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spu.BrandsTable,
			Columns: []string{spu.BrandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CategorysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spu.CategorysTable,
			Columns: []string{spu.CategorysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CategorysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spu.CategorysTable,
			Columns: []string{spu.CategorysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Spu{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
