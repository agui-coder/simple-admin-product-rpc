// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/agui-coder/simple-admin-product-rpc/ent/brand"
	"github.com/agui-coder/simple-admin-product-rpc/ent/category"
	"github.com/agui-coder/simple-admin-product-rpc/ent/sku"
	"github.com/agui-coder/simple-admin-product-rpc/ent/spu"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpuCreate is the builder for creating a Spu entity.
type SpuCreate struct {
	config
	mutation *SpuMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SpuCreate) SetCreatedAt(t time.Time) *SpuCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SpuCreate) SetNillableCreatedAt(t *time.Time) *SpuCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SpuCreate) SetUpdatedAt(t time.Time) *SpuCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SpuCreate) SetNillableUpdatedAt(t *time.Time) *SpuCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *SpuCreate) SetStatus(u uint8) *SpuCreate {
	sc.mutation.SetStatus(u)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *SpuCreate) SetNillableStatus(u *uint8) *SpuCreate {
	if u != nil {
		sc.SetStatus(*u)
	}
	return sc
}

// SetSort sets the "sort" field.
func (sc *SpuCreate) SetSort(u uint32) *SpuCreate {
	sc.mutation.SetSort(u)
	return sc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sc *SpuCreate) SetNillableSort(u *uint32) *SpuCreate {
	if u != nil {
		sc.SetSort(*u)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SpuCreate) SetDeletedAt(t time.Time) *SpuCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SpuCreate) SetNillableDeletedAt(t *time.Time) *SpuCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SpuCreate) SetName(s string) *SpuCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetKeyword sets the "keyword" field.
func (sc *SpuCreate) SetKeyword(s string) *SpuCreate {
	sc.mutation.SetKeyword(s)
	return sc
}

// SetNillableKeyword sets the "keyword" field if the given value is not nil.
func (sc *SpuCreate) SetNillableKeyword(s *string) *SpuCreate {
	if s != nil {
		sc.SetKeyword(*s)
	}
	return sc
}

// SetIntroduction sets the "introduction" field.
func (sc *SpuCreate) SetIntroduction(s string) *SpuCreate {
	sc.mutation.SetIntroduction(s)
	return sc
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (sc *SpuCreate) SetNillableIntroduction(s *string) *SpuCreate {
	if s != nil {
		sc.SetIntroduction(*s)
	}
	return sc
}

// SetDescription sets the "description" field.
func (sc *SpuCreate) SetDescription(s string) *SpuCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *SpuCreate) SetNillableDescription(s *string) *SpuCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetBarCode sets the "bar_code" field.
func (sc *SpuCreate) SetBarCode(s string) *SpuCreate {
	sc.mutation.SetBarCode(s)
	return sc
}

// SetNillableBarCode sets the "bar_code" field if the given value is not nil.
func (sc *SpuCreate) SetNillableBarCode(s *string) *SpuCreate {
	if s != nil {
		sc.SetBarCode(*s)
	}
	return sc
}

// SetCategoryID sets the "category_id" field.
func (sc *SpuCreate) SetCategoryID(u uint64) *SpuCreate {
	sc.mutation.SetCategoryID(u)
	return sc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (sc *SpuCreate) SetNillableCategoryID(u *uint64) *SpuCreate {
	if u != nil {
		sc.SetCategoryID(*u)
	}
	return sc
}

// SetBrandID sets the "brand_id" field.
func (sc *SpuCreate) SetBrandID(u uint64) *SpuCreate {
	sc.mutation.SetBrandID(u)
	return sc
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (sc *SpuCreate) SetNillableBrandID(u *uint64) *SpuCreate {
	if u != nil {
		sc.SetBrandID(*u)
	}
	return sc
}

// SetPicURL sets the "pic_url" field.
func (sc *SpuCreate) SetPicURL(s string) *SpuCreate {
	sc.mutation.SetPicURL(s)
	return sc
}

// SetSliderPicUrls sets the "slider_pic_urls" field.
func (sc *SpuCreate) SetSliderPicUrls(s []string) *SpuCreate {
	sc.mutation.SetSliderPicUrls(s)
	return sc
}

// SetVideoURL sets the "video_url" field.
func (sc *SpuCreate) SetVideoURL(s string) *SpuCreate {
	sc.mutation.SetVideoURL(s)
	return sc
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (sc *SpuCreate) SetNillableVideoURL(s *string) *SpuCreate {
	if s != nil {
		sc.SetVideoURL(*s)
	}
	return sc
}

// SetUnit sets the "unit" field.
func (sc *SpuCreate) SetUnit(u uint8) *SpuCreate {
	sc.mutation.SetUnit(u)
	return sc
}

// SetSpecType sets the "spec_type" field.
func (sc *SpuCreate) SetSpecType(b bool) *SpuCreate {
	sc.mutation.SetSpecType(b)
	return sc
}

// SetNillableSpecType sets the "spec_type" field if the given value is not nil.
func (sc *SpuCreate) SetNillableSpecType(b *bool) *SpuCreate {
	if b != nil {
		sc.SetSpecType(*b)
	}
	return sc
}

// SetPrice sets the "price" field.
func (sc *SpuCreate) SetPrice(i int32) *SpuCreate {
	sc.mutation.SetPrice(i)
	return sc
}

// SetMarketPrice sets the "market_price" field.
func (sc *SpuCreate) SetMarketPrice(i int32) *SpuCreate {
	sc.mutation.SetMarketPrice(i)
	return sc
}

// SetNillableMarketPrice sets the "market_price" field if the given value is not nil.
func (sc *SpuCreate) SetNillableMarketPrice(i *int32) *SpuCreate {
	if i != nil {
		sc.SetMarketPrice(*i)
	}
	return sc
}

// SetCostPrice sets the "cost_price" field.
func (sc *SpuCreate) SetCostPrice(i int32) *SpuCreate {
	sc.mutation.SetCostPrice(i)
	return sc
}

// SetStock sets the "stock" field.
func (sc *SpuCreate) SetStock(i int32) *SpuCreate {
	sc.mutation.SetStock(i)
	return sc
}

// SetDeliveryTemplateID sets the "deliveryTemplate_id" field.
func (sc *SpuCreate) SetDeliveryTemplateID(u uint64) *SpuCreate {
	sc.mutation.SetDeliveryTemplateID(u)
	return sc
}

// SetNillableDeliveryTemplateID sets the "deliveryTemplate_id" field if the given value is not nil.
func (sc *SpuCreate) SetNillableDeliveryTemplateID(u *uint64) *SpuCreate {
	if u != nil {
		sc.SetDeliveryTemplateID(*u)
	}
	return sc
}

// SetRecommendHot sets the "recommend_hot" field.
func (sc *SpuCreate) SetRecommendHot(b bool) *SpuCreate {
	sc.mutation.SetRecommendHot(b)
	return sc
}

// SetNillableRecommendHot sets the "recommend_hot" field if the given value is not nil.
func (sc *SpuCreate) SetNillableRecommendHot(b *bool) *SpuCreate {
	if b != nil {
		sc.SetRecommendHot(*b)
	}
	return sc
}

// SetRecommendBenefit sets the "recommend_benefit" field.
func (sc *SpuCreate) SetRecommendBenefit(b bool) *SpuCreate {
	sc.mutation.SetRecommendBenefit(b)
	return sc
}

// SetNillableRecommendBenefit sets the "recommend_benefit" field if the given value is not nil.
func (sc *SpuCreate) SetNillableRecommendBenefit(b *bool) *SpuCreate {
	if b != nil {
		sc.SetRecommendBenefit(*b)
	}
	return sc
}

// SetRecommendBest sets the "recommend_best" field.
func (sc *SpuCreate) SetRecommendBest(b bool) *SpuCreate {
	sc.mutation.SetRecommendBest(b)
	return sc
}

// SetNillableRecommendBest sets the "recommend_best" field if the given value is not nil.
func (sc *SpuCreate) SetNillableRecommendBest(b *bool) *SpuCreate {
	if b != nil {
		sc.SetRecommendBest(*b)
	}
	return sc
}

// SetRecommendNew sets the "recommend_new" field.
func (sc *SpuCreate) SetRecommendNew(b bool) *SpuCreate {
	sc.mutation.SetRecommendNew(b)
	return sc
}

// SetNillableRecommendNew sets the "recommend_new" field if the given value is not nil.
func (sc *SpuCreate) SetNillableRecommendNew(b *bool) *SpuCreate {
	if b != nil {
		sc.SetRecommendNew(*b)
	}
	return sc
}

// SetRecommendGood sets the "recommend_good" field.
func (sc *SpuCreate) SetRecommendGood(b bool) *SpuCreate {
	sc.mutation.SetRecommendGood(b)
	return sc
}

// SetNillableRecommendGood sets the "recommend_good" field if the given value is not nil.
func (sc *SpuCreate) SetNillableRecommendGood(b *bool) *SpuCreate {
	if b != nil {
		sc.SetRecommendGood(*b)
	}
	return sc
}

// SetGiveIntegral sets the "give_integral" field.
func (sc *SpuCreate) SetGiveIntegral(i int32) *SpuCreate {
	sc.mutation.SetGiveIntegral(i)
	return sc
}

// SetNillableGiveIntegral sets the "give_integral" field if the given value is not nil.
func (sc *SpuCreate) SetNillableGiveIntegral(i *int32) *SpuCreate {
	if i != nil {
		sc.SetGiveIntegral(*i)
	}
	return sc
}

// SetGiveCouponTemplateIds sets the "give_coupon_template_ids" field.
func (sc *SpuCreate) SetGiveCouponTemplateIds(u []uint64) *SpuCreate {
	sc.mutation.SetGiveCouponTemplateIds(u)
	return sc
}

// SetSubCommissionType sets the "sub_commission_type" field.
func (sc *SpuCreate) SetSubCommissionType(b bool) *SpuCreate {
	sc.mutation.SetSubCommissionType(b)
	return sc
}

// SetNillableSubCommissionType sets the "sub_commission_type" field if the given value is not nil.
func (sc *SpuCreate) SetNillableSubCommissionType(b *bool) *SpuCreate {
	if b != nil {
		sc.SetSubCommissionType(*b)
	}
	return sc
}

// SetActivityOrders sets the "activity_orders" field.
func (sc *SpuCreate) SetActivityOrders(i []int32) *SpuCreate {
	sc.mutation.SetActivityOrders(i)
	return sc
}

// SetSalesCount sets the "sales_count" field.
func (sc *SpuCreate) SetSalesCount(i int32) *SpuCreate {
	sc.mutation.SetSalesCount(i)
	return sc
}

// SetNillableSalesCount sets the "sales_count" field if the given value is not nil.
func (sc *SpuCreate) SetNillableSalesCount(i *int32) *SpuCreate {
	if i != nil {
		sc.SetSalesCount(*i)
	}
	return sc
}

// SetVirtualSalesCount sets the "virtual_sales_count" field.
func (sc *SpuCreate) SetVirtualSalesCount(i int32) *SpuCreate {
	sc.mutation.SetVirtualSalesCount(i)
	return sc
}

// SetNillableVirtualSalesCount sets the "virtual_sales_count" field if the given value is not nil.
func (sc *SpuCreate) SetNillableVirtualSalesCount(i *int32) *SpuCreate {
	if i != nil {
		sc.SetVirtualSalesCount(*i)
	}
	return sc
}

// SetBrowseCount sets the "browse_count" field.
func (sc *SpuCreate) SetBrowseCount(i int32) *SpuCreate {
	sc.mutation.SetBrowseCount(i)
	return sc
}

// SetNillableBrowseCount sets the "browse_count" field if the given value is not nil.
func (sc *SpuCreate) SetNillableBrowseCount(i *int32) *SpuCreate {
	if i != nil {
		sc.SetBrowseCount(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SpuCreate) SetID(u uint64) *SpuCreate {
	sc.mutation.SetID(u)
	return sc
}

// AddSkuIDs adds the "skus" edge to the Sku entity by IDs.
func (sc *SpuCreate) AddSkuIDs(ids ...uint64) *SpuCreate {
	sc.mutation.AddSkuIDs(ids...)
	return sc
}

// AddSkus adds the "skus" edges to the Sku entity.
func (sc *SpuCreate) AddSkus(s ...*Sku) *SpuCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSkuIDs(ids...)
}

// SetBrandsID sets the "brands" edge to the Brand entity by ID.
func (sc *SpuCreate) SetBrandsID(id uint64) *SpuCreate {
	sc.mutation.SetBrandsID(id)
	return sc
}

// SetNillableBrandsID sets the "brands" edge to the Brand entity by ID if the given value is not nil.
func (sc *SpuCreate) SetNillableBrandsID(id *uint64) *SpuCreate {
	if id != nil {
		sc = sc.SetBrandsID(*id)
	}
	return sc
}

// SetBrands sets the "brands" edge to the Brand entity.
func (sc *SpuCreate) SetBrands(b *Brand) *SpuCreate {
	return sc.SetBrandsID(b.ID)
}

// SetCategorysID sets the "categorys" edge to the Category entity by ID.
func (sc *SpuCreate) SetCategorysID(id uint64) *SpuCreate {
	sc.mutation.SetCategorysID(id)
	return sc
}

// SetNillableCategorysID sets the "categorys" edge to the Category entity by ID if the given value is not nil.
func (sc *SpuCreate) SetNillableCategorysID(id *uint64) *SpuCreate {
	if id != nil {
		sc = sc.SetCategorysID(*id)
	}
	return sc
}

// SetCategorys sets the "categorys" edge to the Category entity.
func (sc *SpuCreate) SetCategorys(c *Category) *SpuCreate {
	return sc.SetCategorysID(c.ID)
}

// Mutation returns the SpuMutation object of the builder.
func (sc *SpuCreate) Mutation() *SpuMutation {
	return sc.mutation
}

// Save creates the Spu in the database.
func (sc *SpuCreate) Save(ctx context.Context) (*Spu, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SpuCreate) SaveX(ctx context.Context) *Spu {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SpuCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SpuCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SpuCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if spu.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized spu.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := spu.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if spu.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized spu.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := spu.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := spu.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.Sort(); !ok {
		v := spu.DefaultSort
		sc.mutation.SetSort(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SpuCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Spu.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Spu.updated_at"`)}
	}
	if _, ok := sc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Spu.sort"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Spu.name"`)}
	}
	if _, ok := sc.mutation.PicURL(); !ok {
		return &ValidationError{Name: "pic_url", err: errors.New(`ent: missing required field "Spu.pic_url"`)}
	}
	if _, ok := sc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "Spu.unit"`)}
	}
	if _, ok := sc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Spu.price"`)}
	}
	if _, ok := sc.mutation.CostPrice(); !ok {
		return &ValidationError{Name: "cost_price", err: errors.New(`ent: missing required field "Spu.cost_price"`)}
	}
	if _, ok := sc.mutation.Stock(); !ok {
		return &ValidationError{Name: "stock", err: errors.New(`ent: missing required field "Spu.stock"`)}
	}
	return nil
}

func (sc *SpuCreate) sqlSave(ctx context.Context) (*Spu, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SpuCreate) createSpec() (*Spu, *sqlgraph.CreateSpec) {
	var (
		_node = &Spu{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(spu.Table, sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(spu.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(spu.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(spu.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.Sort(); ok {
		_spec.SetField(spu.FieldSort, field.TypeUint32, value)
		_node.Sort = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(spu.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(spu.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Keyword(); ok {
		_spec.SetField(spu.FieldKeyword, field.TypeString, value)
		_node.Keyword = value
	}
	if value, ok := sc.mutation.Introduction(); ok {
		_spec.SetField(spu.FieldIntroduction, field.TypeString, value)
		_node.Introduction = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(spu.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.BarCode(); ok {
		_spec.SetField(spu.FieldBarCode, field.TypeString, value)
		_node.BarCode = value
	}
	if value, ok := sc.mutation.PicURL(); ok {
		_spec.SetField(spu.FieldPicURL, field.TypeString, value)
		_node.PicURL = value
	}
	if value, ok := sc.mutation.SliderPicUrls(); ok {
		_spec.SetField(spu.FieldSliderPicUrls, field.TypeJSON, value)
		_node.SliderPicUrls = value
	}
	if value, ok := sc.mutation.VideoURL(); ok {
		_spec.SetField(spu.FieldVideoURL, field.TypeString, value)
		_node.VideoURL = value
	}
	if value, ok := sc.mutation.Unit(); ok {
		_spec.SetField(spu.FieldUnit, field.TypeUint8, value)
		_node.Unit = value
	}
	if value, ok := sc.mutation.SpecType(); ok {
		_spec.SetField(spu.FieldSpecType, field.TypeBool, value)
		_node.SpecType = value
	}
	if value, ok := sc.mutation.Price(); ok {
		_spec.SetField(spu.FieldPrice, field.TypeInt32, value)
		_node.Price = value
	}
	if value, ok := sc.mutation.MarketPrice(); ok {
		_spec.SetField(spu.FieldMarketPrice, field.TypeInt32, value)
		_node.MarketPrice = value
	}
	if value, ok := sc.mutation.CostPrice(); ok {
		_spec.SetField(spu.FieldCostPrice, field.TypeInt32, value)
		_node.CostPrice = value
	}
	if value, ok := sc.mutation.Stock(); ok {
		_spec.SetField(spu.FieldStock, field.TypeInt32, value)
		_node.Stock = value
	}
	if value, ok := sc.mutation.DeliveryTemplateID(); ok {
		_spec.SetField(spu.FieldDeliveryTemplateID, field.TypeUint64, value)
		_node.DeliveryTemplateID = value
	}
	if value, ok := sc.mutation.RecommendHot(); ok {
		_spec.SetField(spu.FieldRecommendHot, field.TypeBool, value)
		_node.RecommendHot = value
	}
	if value, ok := sc.mutation.RecommendBenefit(); ok {
		_spec.SetField(spu.FieldRecommendBenefit, field.TypeBool, value)
		_node.RecommendBenefit = value
	}
	if value, ok := sc.mutation.RecommendBest(); ok {
		_spec.SetField(spu.FieldRecommendBest, field.TypeBool, value)
		_node.RecommendBest = value
	}
	if value, ok := sc.mutation.RecommendNew(); ok {
		_spec.SetField(spu.FieldRecommendNew, field.TypeBool, value)
		_node.RecommendNew = value
	}
	if value, ok := sc.mutation.RecommendGood(); ok {
		_spec.SetField(spu.FieldRecommendGood, field.TypeBool, value)
		_node.RecommendGood = value
	}
	if value, ok := sc.mutation.GiveIntegral(); ok {
		_spec.SetField(spu.FieldGiveIntegral, field.TypeInt32, value)
		_node.GiveIntegral = value
	}
	if value, ok := sc.mutation.GiveCouponTemplateIds(); ok {
		_spec.SetField(spu.FieldGiveCouponTemplateIds, field.TypeJSON, value)
		_node.GiveCouponTemplateIds = value
	}
	if value, ok := sc.mutation.SubCommissionType(); ok {
		_spec.SetField(spu.FieldSubCommissionType, field.TypeBool, value)
		_node.SubCommissionType = value
	}
	if value, ok := sc.mutation.ActivityOrders(); ok {
		_spec.SetField(spu.FieldActivityOrders, field.TypeJSON, value)
		_node.ActivityOrders = value
	}
	if value, ok := sc.mutation.SalesCount(); ok {
		_spec.SetField(spu.FieldSalesCount, field.TypeInt32, value)
		_node.SalesCount = value
	}
	if value, ok := sc.mutation.VirtualSalesCount(); ok {
		_spec.SetField(spu.FieldVirtualSalesCount, field.TypeInt32, value)
		_node.VirtualSalesCount = value
	}
	if value, ok := sc.mutation.BrowseCount(); ok {
		_spec.SetField(spu.FieldBrowseCount, field.TypeInt32, value)
		_node.BrowseCount = value
	}
	if nodes := sc.mutation.SkusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SkusTable,
			Columns: []string{spu.SkusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sku.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.BrandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spu.BrandsTable,
			Columns: []string{spu.BrandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BrandID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CategorysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spu.CategorysTable,
			Columns: []string{spu.CategorysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SpuCreateBulk is the builder for creating many Spu entities in bulk.
type SpuCreateBulk struct {
	config
	err      error
	builders []*SpuCreate
}

// Save creates the Spu entities in the database.
func (scb *SpuCreateBulk) Save(ctx context.Context) ([]*Spu, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Spu, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SpuCreateBulk) SaveX(ctx context.Context) []*Spu {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SpuCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SpuCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
