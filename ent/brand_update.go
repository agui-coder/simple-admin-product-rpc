// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/agui-coder/simple-admin-product-rpc/ent/brand"
	"github.com/agui-coder/simple-admin-product-rpc/ent/predicate"
	"github.com/agui-coder/simple-admin-product-rpc/ent/spu"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BrandUpdate is the builder for updating Brand entities.
type BrandUpdate struct {
	config
	hooks    []Hook
	mutation *BrandMutation
}

// Where appends a list predicates to the BrandUpdate builder.
func (bu *BrandUpdate) Where(ps ...predicate.Brand) *BrandUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BrandUpdate) SetUpdatedAt(t time.Time) *BrandUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetStatus sets the "status" field.
func (bu *BrandUpdate) SetStatus(u uint8) *BrandUpdate {
	bu.mutation.ResetStatus()
	bu.mutation.SetStatus(u)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BrandUpdate) SetNillableStatus(u *uint8) *BrandUpdate {
	if u != nil {
		bu.SetStatus(*u)
	}
	return bu
}

// AddStatus adds u to the "status" field.
func (bu *BrandUpdate) AddStatus(u int8) *BrandUpdate {
	bu.mutation.AddStatus(u)
	return bu
}

// ClearStatus clears the value of the "status" field.
func (bu *BrandUpdate) ClearStatus() *BrandUpdate {
	bu.mutation.ClearStatus()
	return bu
}

// SetSort sets the "sort" field.
func (bu *BrandUpdate) SetSort(u uint32) *BrandUpdate {
	bu.mutation.ResetSort()
	bu.mutation.SetSort(u)
	return bu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (bu *BrandUpdate) SetNillableSort(u *uint32) *BrandUpdate {
	if u != nil {
		bu.SetSort(*u)
	}
	return bu
}

// AddSort adds u to the "sort" field.
func (bu *BrandUpdate) AddSort(u int32) *BrandUpdate {
	bu.mutation.AddSort(u)
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BrandUpdate) SetDeletedAt(t time.Time) *BrandUpdate {
	bu.mutation.SetDeletedAt(t)
	return bu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bu *BrandUpdate) SetNillableDeletedAt(t *time.Time) *BrandUpdate {
	if t != nil {
		bu.SetDeletedAt(*t)
	}
	return bu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bu *BrandUpdate) ClearDeletedAt() *BrandUpdate {
	bu.mutation.ClearDeletedAt()
	return bu
}

// SetName sets the "name" field.
func (bu *BrandUpdate) SetName(s string) *BrandUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetPicURL sets the "pic_url" field.
func (bu *BrandUpdate) SetPicURL(s string) *BrandUpdate {
	bu.mutation.SetPicURL(s)
	return bu
}

// SetDescription sets the "description" field.
func (bu *BrandUpdate) SetDescription(s string) *BrandUpdate {
	bu.mutation.SetDescription(s)
	return bu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bu *BrandUpdate) SetNillableDescription(s *string) *BrandUpdate {
	if s != nil {
		bu.SetDescription(*s)
	}
	return bu
}

// ClearDescription clears the value of the "description" field.
func (bu *BrandUpdate) ClearDescription() *BrandUpdate {
	bu.mutation.ClearDescription()
	return bu
}

// AddSpuIDs adds the "spus" edge to the Spu entity by IDs.
func (bu *BrandUpdate) AddSpuIDs(ids ...uint64) *BrandUpdate {
	bu.mutation.AddSpuIDs(ids...)
	return bu
}

// AddSpus adds the "spus" edges to the Spu entity.
func (bu *BrandUpdate) AddSpus(s ...*Spu) *BrandUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.AddSpuIDs(ids...)
}

// Mutation returns the BrandMutation object of the builder.
func (bu *BrandUpdate) Mutation() *BrandMutation {
	return bu.mutation
}

// ClearSpus clears all "spus" edges to the Spu entity.
func (bu *BrandUpdate) ClearSpus() *BrandUpdate {
	bu.mutation.ClearSpus()
	return bu
}

// RemoveSpuIDs removes the "spus" edge to Spu entities by IDs.
func (bu *BrandUpdate) RemoveSpuIDs(ids ...uint64) *BrandUpdate {
	bu.mutation.RemoveSpuIDs(ids...)
	return bu
}

// RemoveSpus removes "spus" edges to Spu entities.
func (bu *BrandUpdate) RemoveSpus(s ...*Spu) *BrandUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.RemoveSpuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BrandUpdate) Save(ctx context.Context) (int, error) {
	if err := bu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BrandUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BrandUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BrandUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BrandUpdate) defaults() error {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		if brand.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized brand.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := brand.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (bu *BrandUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(brand.Table, brand.Columns, sqlgraph.NewFieldSpec(brand.FieldID, field.TypeUint64))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(brand.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(brand.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := bu.mutation.AddedStatus(); ok {
		_spec.AddField(brand.FieldStatus, field.TypeUint8, value)
	}
	if bu.mutation.StatusCleared() {
		_spec.ClearField(brand.FieldStatus, field.TypeUint8)
	}
	if value, ok := bu.mutation.Sort(); ok {
		_spec.SetField(brand.FieldSort, field.TypeUint32, value)
	}
	if value, ok := bu.mutation.AddedSort(); ok {
		_spec.AddField(brand.FieldSort, field.TypeUint32, value)
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.SetField(brand.FieldDeletedAt, field.TypeTime, value)
	}
	if bu.mutation.DeletedAtCleared() {
		_spec.ClearField(brand.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(brand.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.PicURL(); ok {
		_spec.SetField(brand.FieldPicURL, field.TypeString, value)
	}
	if value, ok := bu.mutation.Description(); ok {
		_spec.SetField(brand.FieldDescription, field.TypeString, value)
	}
	if bu.mutation.DescriptionCleared() {
		_spec.ClearField(brand.FieldDescription, field.TypeString)
	}
	if bu.mutation.SpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.SpusTable,
			Columns: []string{brand.SpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedSpusIDs(); len(nodes) > 0 && !bu.mutation.SpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.SpusTable,
			Columns: []string{brand.SpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.SpusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.SpusTable,
			Columns: []string{brand.SpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{brand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BrandUpdateOne is the builder for updating a single Brand entity.
type BrandUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BrandMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BrandUpdateOne) SetUpdatedAt(t time.Time) *BrandUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetStatus sets the "status" field.
func (buo *BrandUpdateOne) SetStatus(u uint8) *BrandUpdateOne {
	buo.mutation.ResetStatus()
	buo.mutation.SetStatus(u)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BrandUpdateOne) SetNillableStatus(u *uint8) *BrandUpdateOne {
	if u != nil {
		buo.SetStatus(*u)
	}
	return buo
}

// AddStatus adds u to the "status" field.
func (buo *BrandUpdateOne) AddStatus(u int8) *BrandUpdateOne {
	buo.mutation.AddStatus(u)
	return buo
}

// ClearStatus clears the value of the "status" field.
func (buo *BrandUpdateOne) ClearStatus() *BrandUpdateOne {
	buo.mutation.ClearStatus()
	return buo
}

// SetSort sets the "sort" field.
func (buo *BrandUpdateOne) SetSort(u uint32) *BrandUpdateOne {
	buo.mutation.ResetSort()
	buo.mutation.SetSort(u)
	return buo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (buo *BrandUpdateOne) SetNillableSort(u *uint32) *BrandUpdateOne {
	if u != nil {
		buo.SetSort(*u)
	}
	return buo
}

// AddSort adds u to the "sort" field.
func (buo *BrandUpdateOne) AddSort(u int32) *BrandUpdateOne {
	buo.mutation.AddSort(u)
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BrandUpdateOne) SetDeletedAt(t time.Time) *BrandUpdateOne {
	buo.mutation.SetDeletedAt(t)
	return buo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (buo *BrandUpdateOne) SetNillableDeletedAt(t *time.Time) *BrandUpdateOne {
	if t != nil {
		buo.SetDeletedAt(*t)
	}
	return buo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (buo *BrandUpdateOne) ClearDeletedAt() *BrandUpdateOne {
	buo.mutation.ClearDeletedAt()
	return buo
}

// SetName sets the "name" field.
func (buo *BrandUpdateOne) SetName(s string) *BrandUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetPicURL sets the "pic_url" field.
func (buo *BrandUpdateOne) SetPicURL(s string) *BrandUpdateOne {
	buo.mutation.SetPicURL(s)
	return buo
}

// SetDescription sets the "description" field.
func (buo *BrandUpdateOne) SetDescription(s string) *BrandUpdateOne {
	buo.mutation.SetDescription(s)
	return buo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buo *BrandUpdateOne) SetNillableDescription(s *string) *BrandUpdateOne {
	if s != nil {
		buo.SetDescription(*s)
	}
	return buo
}

// ClearDescription clears the value of the "description" field.
func (buo *BrandUpdateOne) ClearDescription() *BrandUpdateOne {
	buo.mutation.ClearDescription()
	return buo
}

// AddSpuIDs adds the "spus" edge to the Spu entity by IDs.
func (buo *BrandUpdateOne) AddSpuIDs(ids ...uint64) *BrandUpdateOne {
	buo.mutation.AddSpuIDs(ids...)
	return buo
}

// AddSpus adds the "spus" edges to the Spu entity.
func (buo *BrandUpdateOne) AddSpus(s ...*Spu) *BrandUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.AddSpuIDs(ids...)
}

// Mutation returns the BrandMutation object of the builder.
func (buo *BrandUpdateOne) Mutation() *BrandMutation {
	return buo.mutation
}

// ClearSpus clears all "spus" edges to the Spu entity.
func (buo *BrandUpdateOne) ClearSpus() *BrandUpdateOne {
	buo.mutation.ClearSpus()
	return buo
}

// RemoveSpuIDs removes the "spus" edge to Spu entities by IDs.
func (buo *BrandUpdateOne) RemoveSpuIDs(ids ...uint64) *BrandUpdateOne {
	buo.mutation.RemoveSpuIDs(ids...)
	return buo
}

// RemoveSpus removes "spus" edges to Spu entities.
func (buo *BrandUpdateOne) RemoveSpus(s ...*Spu) *BrandUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.RemoveSpuIDs(ids...)
}

// Where appends a list predicates to the BrandUpdate builder.
func (buo *BrandUpdateOne) Where(ps ...predicate.Brand) *BrandUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BrandUpdateOne) Select(field string, fields ...string) *BrandUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Brand entity.
func (buo *BrandUpdateOne) Save(ctx context.Context) (*Brand, error) {
	if err := buo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BrandUpdateOne) SaveX(ctx context.Context) *Brand {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BrandUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BrandUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BrandUpdateOne) defaults() error {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		if brand.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized brand.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := brand.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (buo *BrandUpdateOne) sqlSave(ctx context.Context) (_node *Brand, err error) {
	_spec := sqlgraph.NewUpdateSpec(brand.Table, brand.Columns, sqlgraph.NewFieldSpec(brand.FieldID, field.TypeUint64))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Brand.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, brand.FieldID)
		for _, f := range fields {
			if !brand.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != brand.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(brand.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(brand.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := buo.mutation.AddedStatus(); ok {
		_spec.AddField(brand.FieldStatus, field.TypeUint8, value)
	}
	if buo.mutation.StatusCleared() {
		_spec.ClearField(brand.FieldStatus, field.TypeUint8)
	}
	if value, ok := buo.mutation.Sort(); ok {
		_spec.SetField(brand.FieldSort, field.TypeUint32, value)
	}
	if value, ok := buo.mutation.AddedSort(); ok {
		_spec.AddField(brand.FieldSort, field.TypeUint32, value)
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.SetField(brand.FieldDeletedAt, field.TypeTime, value)
	}
	if buo.mutation.DeletedAtCleared() {
		_spec.ClearField(brand.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(brand.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.PicURL(); ok {
		_spec.SetField(brand.FieldPicURL, field.TypeString, value)
	}
	if value, ok := buo.mutation.Description(); ok {
		_spec.SetField(brand.FieldDescription, field.TypeString, value)
	}
	if buo.mutation.DescriptionCleared() {
		_spec.ClearField(brand.FieldDescription, field.TypeString)
	}
	if buo.mutation.SpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.SpusTable,
			Columns: []string{brand.SpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedSpusIDs(); len(nodes) > 0 && !buo.mutation.SpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.SpusTable,
			Columns: []string{brand.SpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.SpusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.SpusTable,
			Columns: []string{brand.SpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Brand{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{brand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
