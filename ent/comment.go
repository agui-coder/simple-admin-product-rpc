// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"github.com/agui-coder/simple-admin-product-rpc/ent/comment"
	entType "github.com/agui-coder/simple-admin-product-rpc/ent/schema/enttype"
	"github.com/agui-coder/simple-admin-product-rpc/ent/sku"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Delete Time | 删除日期
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 评价人的用户编号，关联 MemberUserDO 的 id 编号
	UserID uint64 `json:"user_id,omitempty"`
	// 评价人名称
	UserNickname string `json:"user_nickname,omitempty"`
	// 评价人头像
	UserAvatar string `json:"user_avatar,omitempty"`
	// 是否匿名
	Anonymous bool `json:"anonymous,omitempty"`
	// 交易订单编号，关联 TradeOrderDO 的 id 编号
	OrderID uint64 `json:"order_id,omitempty"`
	// 交易订单项编号，关联 TradeOrderItemDO 的 id 编号
	OrderItemID uint64 `json:"order_item_id,omitempty"`
	// 商品 SPU 编号，关联 ProductSpuDO 的 id
	SpuID uint64 `json:"spu_id,omitempty"`
	// 商品 SPU 名称
	SpuName string `json:"spu_name,omitempty"`
	// 商品 SKU 编号，关联 ProductSkuDO 的 id 编号
	SkuID uint64 `json:"sku_id,omitempty"`
	// 图片地址
	SkuPicURL string `json:"sku_pic_url,omitempty"`
	// 属性数组，JSON 格式 [{propertId: , valueId: }, {propertId: , valueId: }]
	SkuProperties []entType.SkuProperty `json:"sku_properties,omitempty"`
	// 是否可见，true:显示false:隐藏
	Visible bool `json:"visible,omitempty"`
	// 评分星级1-5分
	Scores int8 `json:"scores,omitempty"`
	// 描述星级 1-5 星
	DescriptionScores int8 `json:"description_scores,omitempty"`
	// 服务星级 1-5 星
	BenefitScores int8 `json:"benefit_scores,omitempty"`
	// 评论内容
	Content string `json:"content,omitempty"`
	// 评论图片地址数组
	PicUrls string `json:"pic_urls,omitempty"`
	// 商家是否回复
	ReplyStatus bool `json:"reply_status,omitempty"`
	// 回复管理员编号，关联 AdminUserDO 的 id 编号
	ReplyUserID int `json:"reply_user_id,omitempty"`
	// 商家回复内容
	ReplyContent string `json:"reply_content,omitempty"`
	// 商家回复时间
	ReplyTime time.Time `json:"reply_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentQuery when eager-loading is set.
	Edges        CommentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommentEdges holds the relations/edges for other nodes in the graph.
type CommentEdges struct {
	// Skus holds the value of the skus edge.
	Skus *Sku `json:"skus,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SkusOrErr returns the Skus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) SkusOrErr() (*Sku, error) {
	if e.loadedTypes[0] {
		if e.Skus == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sku.Label}
		}
		return e.Skus, nil
	}
	return nil, &NotLoadedError{edge: "skus"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldSkuProperties:
			values[i] = new([]byte)
		case comment.FieldAnonymous, comment.FieldVisible, comment.FieldReplyStatus:
			values[i] = new(sql.NullBool)
		case comment.FieldID, comment.FieldUserID, comment.FieldOrderID, comment.FieldOrderItemID, comment.FieldSpuID, comment.FieldSkuID, comment.FieldScores, comment.FieldDescriptionScores, comment.FieldBenefitScores, comment.FieldReplyUserID:
			values[i] = new(sql.NullInt64)
		case comment.FieldUserNickname, comment.FieldUserAvatar, comment.FieldSpuName, comment.FieldSkuPicURL, comment.FieldContent, comment.FieldPicUrls, comment.FieldReplyContent:
			values[i] = new(sql.NullString)
		case comment.FieldCreatedAt, comment.FieldUpdatedAt, comment.FieldDeletedAt, comment.FieldReplyTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (c *Comment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case comment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case comment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case comment.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = value.Time
			}
		case comment.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = uint64(value.Int64)
			}
		case comment.FieldUserNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_nickname", values[i])
			} else if value.Valid {
				c.UserNickname = value.String
			}
		case comment.FieldUserAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_avatar", values[i])
			} else if value.Valid {
				c.UserAvatar = value.String
			}
		case comment.FieldAnonymous:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field anonymous", values[i])
			} else if value.Valid {
				c.Anonymous = value.Bool
			}
		case comment.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				c.OrderID = uint64(value.Int64)
			}
		case comment.FieldOrderItemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_item_id", values[i])
			} else if value.Valid {
				c.OrderItemID = uint64(value.Int64)
			}
		case comment.FieldSpuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spu_id", values[i])
			} else if value.Valid {
				c.SpuID = uint64(value.Int64)
			}
		case comment.FieldSpuName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_name", values[i])
			} else if value.Valid {
				c.SpuName = value.String
			}
		case comment.FieldSkuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sku_id", values[i])
			} else if value.Valid {
				c.SkuID = uint64(value.Int64)
			}
		case comment.FieldSkuPicURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sku_pic_url", values[i])
			} else if value.Valid {
				c.SkuPicURL = value.String
			}
		case comment.FieldSkuProperties:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sku_properties", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.SkuProperties); err != nil {
					return fmt.Errorf("unmarshal field sku_properties: %w", err)
				}
			}
		case comment.FieldVisible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field visible", values[i])
			} else if value.Valid {
				c.Visible = value.Bool
			}
		case comment.FieldScores:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scores", values[i])
			} else if value.Valid {
				c.Scores = int8(value.Int64)
			}
		case comment.FieldDescriptionScores:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field description_scores", values[i])
			} else if value.Valid {
				c.DescriptionScores = int8(value.Int64)
			}
		case comment.FieldBenefitScores:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_scores", values[i])
			} else if value.Valid {
				c.BenefitScores = int8(value.Int64)
			}
		case comment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				c.Content = value.String
			}
		case comment.FieldPicUrls:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic_urls", values[i])
			} else if value.Valid {
				c.PicUrls = value.String
			}
		case comment.FieldReplyStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field reply_status", values[i])
			} else if value.Valid {
				c.ReplyStatus = value.Bool
			}
		case comment.FieldReplyUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reply_user_id", values[i])
			} else if value.Valid {
				c.ReplyUserID = int(value.Int64)
			}
		case comment.FieldReplyContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reply_content", values[i])
			} else if value.Valid {
				c.ReplyContent = value.String
			}
		case comment.FieldReplyTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reply_time", values[i])
			} else if value.Valid {
				c.ReplyTime = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Comment.
// This includes values selected through modifiers, order, etc.
func (c *Comment) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QuerySkus queries the "skus" edge of the Comment entity.
func (c *Comment) QuerySkus() *SkuQuery {
	return NewCommentClient(c.config).QuerySkus(c)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comment) Update() *CommentUpdateOne {
	return NewCommentClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comment) Unwrap() *Comment {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comment is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(c.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", ")
	builder.WriteString("user_nickname=")
	builder.WriteString(c.UserNickname)
	builder.WriteString(", ")
	builder.WriteString("user_avatar=")
	builder.WriteString(c.UserAvatar)
	builder.WriteString(", ")
	builder.WriteString("anonymous=")
	builder.WriteString(fmt.Sprintf("%v", c.Anonymous))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", c.OrderID))
	builder.WriteString(", ")
	builder.WriteString("order_item_id=")
	builder.WriteString(fmt.Sprintf("%v", c.OrderItemID))
	builder.WriteString(", ")
	builder.WriteString("spu_id=")
	builder.WriteString(fmt.Sprintf("%v", c.SpuID))
	builder.WriteString(", ")
	builder.WriteString("spu_name=")
	builder.WriteString(c.SpuName)
	builder.WriteString(", ")
	builder.WriteString("sku_id=")
	builder.WriteString(fmt.Sprintf("%v", c.SkuID))
	builder.WriteString(", ")
	builder.WriteString("sku_pic_url=")
	builder.WriteString(c.SkuPicURL)
	builder.WriteString(", ")
	builder.WriteString("sku_properties=")
	builder.WriteString(fmt.Sprintf("%v", c.SkuProperties))
	builder.WriteString(", ")
	builder.WriteString("visible=")
	builder.WriteString(fmt.Sprintf("%v", c.Visible))
	builder.WriteString(", ")
	builder.WriteString("scores=")
	builder.WriteString(fmt.Sprintf("%v", c.Scores))
	builder.WriteString(", ")
	builder.WriteString("description_scores=")
	builder.WriteString(fmt.Sprintf("%v", c.DescriptionScores))
	builder.WriteString(", ")
	builder.WriteString("benefit_scores=")
	builder.WriteString(fmt.Sprintf("%v", c.BenefitScores))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(c.Content)
	builder.WriteString(", ")
	builder.WriteString("pic_urls=")
	builder.WriteString(c.PicUrls)
	builder.WriteString(", ")
	builder.WriteString("reply_status=")
	builder.WriteString(fmt.Sprintf("%v", c.ReplyStatus))
	builder.WriteString(", ")
	builder.WriteString("reply_user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ReplyUserID))
	builder.WriteString(", ")
	builder.WriteString("reply_content=")
	builder.WriteString(c.ReplyContent)
	builder.WriteString(", ")
	builder.WriteString("reply_time=")
	builder.WriteString(c.ReplyTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Comments is a parsable slice of Comment.
type Comments []*Comment
