// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/agui-coder/simple-admin-product-rpc/ent/property"
	"github.com/agui-coder/simple-admin-product-rpc/ent/propertyvalue"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PropertyValueCreate is the builder for creating a PropertyValue entity.
type PropertyValueCreate struct {
	config
	mutation *PropertyValueMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pvc *PropertyValueCreate) SetCreatedAt(t time.Time) *PropertyValueCreate {
	pvc.mutation.SetCreatedAt(t)
	return pvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pvc *PropertyValueCreate) SetNillableCreatedAt(t *time.Time) *PropertyValueCreate {
	if t != nil {
		pvc.SetCreatedAt(*t)
	}
	return pvc
}

// SetUpdatedAt sets the "updated_at" field.
func (pvc *PropertyValueCreate) SetUpdatedAt(t time.Time) *PropertyValueCreate {
	pvc.mutation.SetUpdatedAt(t)
	return pvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pvc *PropertyValueCreate) SetNillableUpdatedAt(t *time.Time) *PropertyValueCreate {
	if t != nil {
		pvc.SetUpdatedAt(*t)
	}
	return pvc
}

// SetDeletedAt sets the "deleted_at" field.
func (pvc *PropertyValueCreate) SetDeletedAt(t time.Time) *PropertyValueCreate {
	pvc.mutation.SetDeletedAt(t)
	return pvc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pvc *PropertyValueCreate) SetNillableDeletedAt(t *time.Time) *PropertyValueCreate {
	if t != nil {
		pvc.SetDeletedAt(*t)
	}
	return pvc
}

// SetPropertyID sets the "property_id" field.
func (pvc *PropertyValueCreate) SetPropertyID(u uint64) *PropertyValueCreate {
	pvc.mutation.SetPropertyID(u)
	return pvc
}

// SetNillablePropertyID sets the "property_id" field if the given value is not nil.
func (pvc *PropertyValueCreate) SetNillablePropertyID(u *uint64) *PropertyValueCreate {
	if u != nil {
		pvc.SetPropertyID(*u)
	}
	return pvc
}

// SetName sets the "name" field.
func (pvc *PropertyValueCreate) SetName(s string) *PropertyValueCreate {
	pvc.mutation.SetName(s)
	return pvc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pvc *PropertyValueCreate) SetNillableName(s *string) *PropertyValueCreate {
	if s != nil {
		pvc.SetName(*s)
	}
	return pvc
}

// SetRemark sets the "remark" field.
func (pvc *PropertyValueCreate) SetRemark(s string) *PropertyValueCreate {
	pvc.mutation.SetRemark(s)
	return pvc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pvc *PropertyValueCreate) SetNillableRemark(s *string) *PropertyValueCreate {
	if s != nil {
		pvc.SetRemark(*s)
	}
	return pvc
}

// SetID sets the "id" field.
func (pvc *PropertyValueCreate) SetID(u uint64) *PropertyValueCreate {
	pvc.mutation.SetID(u)
	return pvc
}

// SetPropertysID sets the "propertys" edge to the Property entity by ID.
func (pvc *PropertyValueCreate) SetPropertysID(id uint64) *PropertyValueCreate {
	pvc.mutation.SetPropertysID(id)
	return pvc
}

// SetNillablePropertysID sets the "propertys" edge to the Property entity by ID if the given value is not nil.
func (pvc *PropertyValueCreate) SetNillablePropertysID(id *uint64) *PropertyValueCreate {
	if id != nil {
		pvc = pvc.SetPropertysID(*id)
	}
	return pvc
}

// SetPropertys sets the "propertys" edge to the Property entity.
func (pvc *PropertyValueCreate) SetPropertys(p *Property) *PropertyValueCreate {
	return pvc.SetPropertysID(p.ID)
}

// Mutation returns the PropertyValueMutation object of the builder.
func (pvc *PropertyValueCreate) Mutation() *PropertyValueMutation {
	return pvc.mutation
}

// Save creates the PropertyValue in the database.
func (pvc *PropertyValueCreate) Save(ctx context.Context) (*PropertyValue, error) {
	if err := pvc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pvc.sqlSave, pvc.mutation, pvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *PropertyValueCreate) SaveX(ctx context.Context) *PropertyValue {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *PropertyValueCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *PropertyValueCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvc *PropertyValueCreate) defaults() error {
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		if propertyvalue.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized propertyvalue.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := propertyvalue.DefaultCreatedAt()
		pvc.mutation.SetCreatedAt(v)
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		if propertyvalue.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized propertyvalue.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := propertyvalue.DefaultUpdatedAt()
		pvc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pvc *PropertyValueCreate) check() error {
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PropertyValue.created_at"`)}
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PropertyValue.updated_at"`)}
	}
	return nil
}

func (pvc *PropertyValueCreate) sqlSave(ctx context.Context) (*PropertyValue, error) {
	if err := pvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	pvc.mutation.id = &_node.ID
	pvc.mutation.done = true
	return _node, nil
}

func (pvc *PropertyValueCreate) createSpec() (*PropertyValue, *sqlgraph.CreateSpec) {
	var (
		_node = &PropertyValue{config: pvc.config}
		_spec = sqlgraph.NewCreateSpec(propertyvalue.Table, sqlgraph.NewFieldSpec(propertyvalue.FieldID, field.TypeUint64))
	)
	if id, ok := pvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pvc.mutation.CreatedAt(); ok {
		_spec.SetField(propertyvalue.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pvc.mutation.UpdatedAt(); ok {
		_spec.SetField(propertyvalue.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pvc.mutation.DeletedAt(); ok {
		_spec.SetField(propertyvalue.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pvc.mutation.Name(); ok {
		_spec.SetField(propertyvalue.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pvc.mutation.Remark(); ok {
		_spec.SetField(propertyvalue.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if nodes := pvc.mutation.PropertysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertysTable,
			Columns: []string{propertyvalue.PropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PropertyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PropertyValueCreateBulk is the builder for creating many PropertyValue entities in bulk.
type PropertyValueCreateBulk struct {
	config
	err      error
	builders []*PropertyValueCreate
}

// Save creates the PropertyValue entities in the database.
func (pvcb *PropertyValueCreateBulk) Save(ctx context.Context) ([]*PropertyValue, error) {
	if pvcb.err != nil {
		return nil, pvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pvcb.builders))
	nodes := make([]*PropertyValue, len(pvcb.builders))
	mutators := make([]Mutator, len(pvcb.builders))
	for i := range pvcb.builders {
		func(i int, root context.Context) {
			builder := pvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PropertyValueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvcb *PropertyValueCreateBulk) SaveX(ctx context.Context) []*PropertyValue {
	v, err := pvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcb *PropertyValueCreateBulk) Exec(ctx context.Context) error {
	_, err := pvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcb *PropertyValueCreateBulk) ExecX(ctx context.Context) {
	if err := pvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
