// Code generated by goctl. DO NOT EDIT.
// Source: product.proto

package server

import (
	"context"

	"github.com/agui-coder/simple-admin-product-rpc/internal/logic/base"
	"github.com/agui-coder/simple-admin-product-rpc/internal/logic/brand"
	"github.com/agui-coder/simple-admin-product-rpc/internal/logic/category"
	"github.com/agui-coder/simple-admin-product-rpc/internal/logic/comment"
	"github.com/agui-coder/simple-admin-product-rpc/internal/logic/property"
	"github.com/agui-coder/simple-admin-product-rpc/internal/logic/propertyvalue"
	"github.com/agui-coder/simple-admin-product-rpc/internal/logic/sku"
	"github.com/agui-coder/simple-admin-product-rpc/internal/logic/spu"
	"github.com/agui-coder/simple-admin-product-rpc/internal/svc"
	"github.com/agui-coder/simple-admin-product-rpc/product"
)

type ProductServer struct {
	svcCtx *svc.ServiceContext
	product.UnimplementedProductServer
}

func NewProductServer(svcCtx *svc.ServiceContext) *ProductServer {
	return &ProductServer{
		svcCtx: svcCtx,
	}
}

func (s *ProductServer) InitDatabase(ctx context.Context, in *product.Empty) (*product.BaseResp, error) {
	l := base.NewInitDatabaseLogic(ctx, s.svcCtx)
	return l.InitDatabase(in)
}

// Brand management
func (s *ProductServer) CreateBrand(ctx context.Context, in *product.BrandCreateReq) (*product.BaseIDResp, error) {
	l := brand.NewCreateBrandLogic(ctx, s.svcCtx)
	return l.CreateBrand(in)
}

func (s *ProductServer) UpdateBrand(ctx context.Context, in *product.BrandUpdateReq) (*product.BaseResp, error) {
	l := brand.NewUpdateBrandLogic(ctx, s.svcCtx)
	return l.UpdateBrand(in)
}

func (s *ProductServer) GetBrandList(ctx context.Context, in *product.BrandListReq) (*product.BrandListResp, error) {
	l := brand.NewGetBrandListLogic(ctx, s.svcCtx)
	return l.GetBrandList(in)
}

func (s *ProductServer) GetBrandById(ctx context.Context, in *product.IDReq) (*product.BrandInfo, error) {
	l := brand.NewGetBrandByIdLogic(ctx, s.svcCtx)
	return l.GetBrandById(in)
}

func (s *ProductServer) DeleteBrand(ctx context.Context, in *product.IDReq) (*product.BaseResp, error) {
	l := brand.NewDeleteBrandLogic(ctx, s.svcCtx)
	return l.DeleteBrand(in)
}

func (s *ProductServer) GetBrandPage(ctx context.Context, in *product.BrandPageReq) (*product.BrandListResp, error) {
	l := brand.NewGetBrandPageLogic(ctx, s.svcCtx)
	return l.GetBrandPage(in)
}

// Category management
func (s *ProductServer) CreateCategory(ctx context.Context, in *product.CategoryCreateReq) (*product.BaseIDResp, error) {
	l := category.NewCreateCategoryLogic(ctx, s.svcCtx)
	return l.CreateCategory(in)
}

func (s *ProductServer) UpdateCategory(ctx context.Context, in *product.CategoryUpdateReq) (*product.BaseResp, error) {
	l := category.NewUpdateCategoryLogic(ctx, s.svcCtx)
	return l.UpdateCategory(in)
}

func (s *ProductServer) DeleteCategory(ctx context.Context, in *product.IDReq) (*product.BaseResp, error) {
	l := category.NewDeleteCategoryLogic(ctx, s.svcCtx)
	return l.DeleteCategory(in)
}

func (s *ProductServer) GetCategoryById(ctx context.Context, in *product.IDReq) (*product.CategoryInfo, error) {
	l := category.NewGetCategoryByIdLogic(ctx, s.svcCtx)
	return l.GetCategoryById(in)
}

func (s *ProductServer) GetCategoryLevel(ctx context.Context, in *product.IDReq) (*product.CategoryLevelResp, error) {
	l := category.NewGetCategoryLevelLogic(ctx, s.svcCtx)
	return l.GetCategoryLevel(in)
}

func (s *ProductServer) GetEnableCategoryList(ctx context.Context, in *product.CategoryListReq) (*product.CategoryListResp, error) {
	l := category.NewGetEnableCategoryListLogic(ctx, s.svcCtx)
	return l.GetEnableCategoryList(in)
}

// Comment management
func (s *ProductServer) CreateComment(ctx context.Context, in *product.CommentInfo) (*product.BaseIDResp, error) {
	l := comment.NewCreateCommentLogic(ctx, s.svcCtx)
	return l.CreateComment(in)
}

func (s *ProductServer) UpdateComment(ctx context.Context, in *product.CommentInfo) (*product.BaseResp, error) {
	l := comment.NewUpdateCommentLogic(ctx, s.svcCtx)
	return l.UpdateComment(in)
}

func (s *ProductServer) GetCommentList(ctx context.Context, in *product.CommentListReq) (*product.CommentListResp, error) {
	l := comment.NewGetCommentListLogic(ctx, s.svcCtx)
	return l.GetCommentList(in)
}

func (s *ProductServer) GetCommentById(ctx context.Context, in *product.IDReq) (*product.CommentInfo, error) {
	l := comment.NewGetCommentByIdLogic(ctx, s.svcCtx)
	return l.GetCommentById(in)
}

func (s *ProductServer) DeleteComment(ctx context.Context, in *product.IDReq) (*product.BaseResp, error) {
	l := comment.NewDeleteCommentLogic(ctx, s.svcCtx)
	return l.DeleteComment(in)
}

// Property management
func (s *ProductServer) CreateProperty(ctx context.Context, in *product.PropertyCreateReq) (*product.BaseIDResp, error) {
	l := property.NewCreatePropertyLogic(ctx, s.svcCtx)
	return l.CreateProperty(in)
}

func (s *ProductServer) UpdateProperty(ctx context.Context, in *product.PropertyUpdateReq) (*product.BaseResp, error) {
	l := property.NewUpdatePropertyLogic(ctx, s.svcCtx)
	return l.UpdateProperty(in)
}

func (s *ProductServer) DeleteProperty(ctx context.Context, in *product.IDReq) (*product.BaseResp, error) {
	l := property.NewDeletePropertyLogic(ctx, s.svcCtx)
	return l.DeleteProperty(in)
}

func (s *ProductServer) GetPropertyListByName(ctx context.Context, in *product.PropertyListByNameReq) (*product.PropertyListResp, error) {
	l := property.NewGetPropertyListByNameLogic(ctx, s.svcCtx)
	return l.GetPropertyListByName(in)
}

func (s *ProductServer) GetPropertyPage(ctx context.Context, in *product.PropertyPageReq) (*product.PropertyListResp, error) {
	l := property.NewGetPropertyPageLogic(ctx, s.svcCtx)
	return l.GetPropertyPage(in)
}

func (s *ProductServer) GetPropertyById(ctx context.Context, in *product.IDReq) (*product.PropertyInfo, error) {
	l := property.NewGetPropertyByIdLogic(ctx, s.svcCtx)
	return l.GetPropertyById(in)
}

func (s *ProductServer) GetPropertyListByIds(ctx context.Context, in *product.PropertyListByIdsReq) (*product.PropertyListResp, error) {
	l := property.NewGetPropertyListByIdsLogic(ctx, s.svcCtx)
	return l.GetPropertyListByIds(in)
}

// PropertyValue management
func (s *ProductServer) CreatePropertyValue(ctx context.Context, in *product.PropertyValueCreateReq) (*product.BaseIDResp, error) {
	l := propertyvalue.NewCreatePropertyValueLogic(ctx, s.svcCtx)
	return l.CreatePropertyValue(in)
}

func (s *ProductServer) DeletePropertyValue(ctx context.Context, in *product.IDReq) (*product.BaseResp, error) {
	l := propertyvalue.NewDeletePropertyValueLogic(ctx, s.svcCtx)
	return l.DeletePropertyValue(in)
}

func (s *ProductServer) GetPropertyValueById(ctx context.Context, in *product.IDReq) (*product.PropertyValueInfo, error) {
	l := propertyvalue.NewGetPropertyValueByIdLogic(ctx, s.svcCtx)
	return l.GetPropertyValueById(in)
}

func (s *ProductServer) GetPropertyValueDetailList(ctx context.Context, in *product.IDsReq) (*product.PropertyValueDetailResp, error) {
	l := propertyvalue.NewGetPropertyValueDetailListLogic(ctx, s.svcCtx)
	return l.GetPropertyValueDetailList(in)
}

func (s *ProductServer) GetPropertyValueListByPropertyId(ctx context.Context, in *product.IDsReq) (*product.PropertyValueListResp, error) {
	l := propertyvalue.NewGetPropertyValueListByPropertyIdLogic(ctx, s.svcCtx)
	return l.GetPropertyValueListByPropertyId(in)
}

func (s *ProductServer) GetPropertyValuePage(ctx context.Context, in *product.PropertyValuePageReq) (*product.PropertyValueListResp, error) {
	l := propertyvalue.NewGetPropertyValuePageLogic(ctx, s.svcCtx)
	return l.GetPropertyValuePage(in)
}

func (s *ProductServer) UpdatePropertyValue(ctx context.Context, in *product.PropertyValueUpdateReq) (*product.BaseResp, error) {
	l := propertyvalue.NewUpdatePropertyValueLogic(ctx, s.svcCtx)
	return l.UpdatePropertyValue(in)
}

// Sku management
func (s *ProductServer) DeleteSku(ctx context.Context, in *product.IDReq) (*product.BaseResp, error) {
	l := sku.NewDeleteSkuLogic(ctx, s.svcCtx)
	return l.DeleteSku(in)
}

func (s *ProductServer) GetSkuList(ctx context.Context, in *product.IDsReq) (*product.SkuListResp, error) {
	l := sku.NewGetSkuListLogic(ctx, s.svcCtx)
	return l.GetSkuList(in)
}

func (s *ProductServer) GetSkuById(ctx context.Context, in *product.IDReq) (*product.SkuInfo, error) {
	l := sku.NewGetSkuByIdLogic(ctx, s.svcCtx)
	return l.GetSkuById(in)
}

func (s *ProductServer) GetSkuListBySpuId(ctx context.Context, in *product.IDReq) (*product.SkuListResp, error) {
	l := sku.NewGetSkuListBySpuIdLogic(ctx, s.svcCtx)
	return l.GetSkuListBySpuId(in)
}

// Spu management
func (s *ProductServer) CreateSpu(ctx context.Context, in *product.SpuCreateReq) (*product.BaseIDResp, error) {
	l := spu.NewCreateSpuLogic(ctx, s.svcCtx)
	return l.CreateSpu(in)
}

func (s *ProductServer) UpdateSpu(ctx context.Context, in *product.SpuUpdateReqVO) (*product.BaseResp, error) {
	l := spu.NewUpdateSpuLogic(ctx, s.svcCtx)
	return l.UpdateSpu(in)
}

func (s *ProductServer) UpdateStatus(ctx context.Context, in *product.SpuUpdateStatusReq) (*product.BaseResp, error) {
	l := spu.NewUpdateStatusLogic(ctx, s.svcCtx)
	return l.UpdateStatus(in)
}

func (s *ProductServer) GetSpuList(ctx context.Context, in *product.SpuListReq) (*product.SpuListResp, error) {
	l := spu.NewGetSpuListLogic(ctx, s.svcCtx)
	return l.GetSpuList(in)
}

func (s *ProductServer) GetSpuById(ctx context.Context, in *product.IDReq) (*product.SpuInfo, error) {
	l := spu.NewGetSpuByIdLogic(ctx, s.svcCtx)
	return l.GetSpuById(in)
}

func (s *ProductServer) DeleteSpu(ctx context.Context, in *product.IDReq) (*product.BaseResp, error) {
	l := spu.NewDeleteSpuLogic(ctx, s.svcCtx)
	return l.DeleteSpu(in)
}

func (s *ProductServer) ValidateSpuList(ctx context.Context, in *product.IDsReq) (*product.SpuListResp, error) {
	l := spu.NewValidateSpuListLogic(ctx, s.svcCtx)
	return l.ValidateSpuList(in)
}
