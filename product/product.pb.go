// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: product.proto

package product

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BrandListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *BrandListReq) Reset() {
	*x = BrandListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandListReq) ProtoMessage() {}

func (x *BrandListReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandListReq.ProtoReflect.Descriptor instead.
func (*BrandListReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{0}
}

func (x *BrandListReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type BaseIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BaseIDResp) Reset() {
	*x = BaseIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseIDResp) ProtoMessage() {}

func (x *BaseIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseIDResp.ProtoReflect.Descriptor instead.
func (*BaseIDResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{1}
}

func (x *BaseIDResp) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseIDResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BrandCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      uint32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PicUrl      string  `protobuf:"bytes,3,opt,name=picUrl,proto3" json:"picUrl,omitempty"`
	Sort        uint32  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Description *string `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *BrandCreateReq) Reset() {
	*x = BrandCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandCreateReq) ProtoMessage() {}

func (x *BrandCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandCreateReq.ProtoReflect.Descriptor instead.
func (*BrandCreateReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{2}
}

func (x *BrandCreateReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BrandCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrandCreateReq) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

func (x *BrandCreateReq) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *BrandCreateReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type BrandListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*BrandInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrandListResp) Reset() {
	*x = BrandListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandListResp) ProtoMessage() {}

func (x *BrandListResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandListResp.ProtoReflect.Descriptor instead.
func (*BrandListResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{3}
}

func (x *BrandListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BrandListResp) GetData() []*BrandInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status    *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ParentId  *uint64 `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Name      *string `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	PicUrl    *string `protobuf:"bytes,7,opt,name=pic_url,json=picUrl,proto3,oneof" json:"pic_url,omitempty"`
	BigPicUrl *string `protobuf:"bytes,8,opt,name=big_pic_url,json=bigPicUrl,proto3,oneof" json:"big_pic_url,omitempty"`
	Sort      *uint32 `protobuf:"varint,9,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
}

func (x *CategoryInfo) Reset() {
	*x = CategoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfo) ProtoMessage() {}

func (x *CategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfo.ProtoReflect.Descriptor instead.
func (*CategoryInfo) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{4}
}

func (x *CategoryInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CategoryInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *CategoryInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *CategoryInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CategoryInfo) GetParentId() uint64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *CategoryInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CategoryInfo) GetPicUrl() string {
	if x != nil && x.PicUrl != nil {
		return *x.PicUrl
	}
	return ""
}

func (x *CategoryInfo) GetBigPicUrl() string {
	if x != nil && x.BigPicUrl != nil {
		return *x.BigPicUrl
	}
	return ""
}

func (x *CategoryInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

type SpuUpdateReqVO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword             string                  `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Introduction        string                  `protobuf:"bytes,2,opt,name=introduction,proto3" json:"introduction,omitempty"`
	Description         string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	BarCode             *string                 `protobuf:"bytes,4,opt,name=barCode,proto3,oneof" json:"barCode,omitempty"`
	CategoryId          uint64                  `protobuf:"varint,5,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	BrandId             uint64                  `protobuf:"varint,6,opt,name=brandId,proto3" json:"brandId,omitempty"`
	PicUrl              string                  `protobuf:"bytes,7,opt,name=picUrl,proto3" json:"picUrl,omitempty"`
	SliderPicUrls       []string                `protobuf:"bytes,8,rep,name=sliderPicUrls,proto3" json:"sliderPicUrls,omitempty"`
	VideoUrl            *string                 `protobuf:"bytes,9,opt,name=videoUrl,proto3,oneof" json:"videoUrl,omitempty"`
	Unit                uint32                  `protobuf:"varint,10,opt,name=unit,proto3" json:"unit,omitempty"`
	Sort                uint32                  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`
	SpecType            bool                    `protobuf:"varint,12,opt,name=specType,proto3" json:"specType,omitempty"`
	DeliveryTemplateId  uint64                  `protobuf:"varint,14,opt,name=deliveryTemplateId,proto3" json:"deliveryTemplateId,omitempty"`
	RecommendHot        bool                    `protobuf:"varint,15,opt,name=recommendHot,proto3" json:"recommendHot,omitempty"`
	RecommendBenefit    bool                    `protobuf:"varint,16,opt,name=recommendBenefit,proto3" json:"recommendBenefit,omitempty"`
	RecommendBest       bool                    `protobuf:"varint,17,opt,name=recommendBest,proto3" json:"recommendBest,omitempty"`
	RecommendNew        bool                    `protobuf:"varint,18,opt,name=recommendNew,proto3" json:"recommendNew,omitempty"`
	RecommendGood       bool                    `protobuf:"varint,19,opt,name=recommendGood,proto3" json:"recommendGood,omitempty"`
	GiveIntegral        int32                   `protobuf:"varint,20,opt,name=giveIntegral,proto3" json:"giveIntegral,omitempty"`
	GiveCouponTemplates []*GiveCouponTemplate   `protobuf:"bytes,21,rep,name=giveCouponTemplates,proto3" json:"giveCouponTemplates,omitempty"`
	SubCommissionType   bool                    `protobuf:"varint,22,opt,name=subCommissionType,proto3" json:"subCommissionType,omitempty"`
	ActivityOrders      []int32                 `protobuf:"varint,23,rep,packed,name=activityOrders,proto3" json:"activityOrders,omitempty"`
	VirtualSalesCount   *int32                  `protobuf:"varint,24,opt,name=virtualSalesCount,proto3,oneof" json:"virtualSalesCount,omitempty"`
	Skus                []*SkuCreateOrUpdateReq `protobuf:"bytes,25,rep,name=skus,proto3" json:"skus,omitempty"`
	Id                  uint64                  `protobuf:"varint,26,opt,name=id,proto3" json:"id,omitempty"`
	SalesCount          int32                   `protobuf:"varint,27,opt,name=salesCount,proto3" json:"salesCount,omitempty"`
	BrowseCount         int32                   `protobuf:"varint,28,opt,name=browseCount,proto3" json:"browseCount,omitempty"`
	Status              uint32                  `protobuf:"varint,29,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SpuUpdateReqVO) Reset() {
	*x = SpuUpdateReqVO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuUpdateReqVO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuUpdateReqVO) ProtoMessage() {}

func (x *SpuUpdateReqVO) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuUpdateReqVO.ProtoReflect.Descriptor instead.
func (*SpuUpdateReqVO) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{5}
}

func (x *SpuUpdateReqVO) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SpuUpdateReqVO) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *SpuUpdateReqVO) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpuUpdateReqVO) GetBarCode() string {
	if x != nil && x.BarCode != nil {
		return *x.BarCode
	}
	return ""
}

func (x *SpuUpdateReqVO) GetCategoryId() uint64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SpuUpdateReqVO) GetBrandId() uint64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *SpuUpdateReqVO) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

func (x *SpuUpdateReqVO) GetSliderPicUrls() []string {
	if x != nil {
		return x.SliderPicUrls
	}
	return nil
}

func (x *SpuUpdateReqVO) GetVideoUrl() string {
	if x != nil && x.VideoUrl != nil {
		return *x.VideoUrl
	}
	return ""
}

func (x *SpuUpdateReqVO) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *SpuUpdateReqVO) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SpuUpdateReqVO) GetSpecType() bool {
	if x != nil {
		return x.SpecType
	}
	return false
}

func (x *SpuUpdateReqVO) GetDeliveryTemplateId() uint64 {
	if x != nil {
		return x.DeliveryTemplateId
	}
	return 0
}

func (x *SpuUpdateReqVO) GetRecommendHot() bool {
	if x != nil {
		return x.RecommendHot
	}
	return false
}

func (x *SpuUpdateReqVO) GetRecommendBenefit() bool {
	if x != nil {
		return x.RecommendBenefit
	}
	return false
}

func (x *SpuUpdateReqVO) GetRecommendBest() bool {
	if x != nil {
		return x.RecommendBest
	}
	return false
}

func (x *SpuUpdateReqVO) GetRecommendNew() bool {
	if x != nil {
		return x.RecommendNew
	}
	return false
}

func (x *SpuUpdateReqVO) GetRecommendGood() bool {
	if x != nil {
		return x.RecommendGood
	}
	return false
}

func (x *SpuUpdateReqVO) GetGiveIntegral() int32 {
	if x != nil {
		return x.GiveIntegral
	}
	return 0
}

func (x *SpuUpdateReqVO) GetGiveCouponTemplates() []*GiveCouponTemplate {
	if x != nil {
		return x.GiveCouponTemplates
	}
	return nil
}

func (x *SpuUpdateReqVO) GetSubCommissionType() bool {
	if x != nil {
		return x.SubCommissionType
	}
	return false
}

func (x *SpuUpdateReqVO) GetActivityOrders() []int32 {
	if x != nil {
		return x.ActivityOrders
	}
	return nil
}

func (x *SpuUpdateReqVO) GetVirtualSalesCount() int32 {
	if x != nil && x.VirtualSalesCount != nil {
		return *x.VirtualSalesCount
	}
	return 0
}

func (x *SpuUpdateReqVO) GetSkus() []*SkuCreateOrUpdateReq {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *SpuUpdateReqVO) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuUpdateReqVO) GetSalesCount() int32 {
	if x != nil {
		return x.SalesCount
	}
	return 0
}

func (x *SpuUpdateReqVO) GetBrowseCount() int32 {
	if x != nil {
		return x.BrowseCount
	}
	return 0
}

func (x *SpuUpdateReqVO) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UUIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *UUIDsReq) Reset() {
	*x = UUIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDsReq) ProtoMessage() {}

func (x *UUIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDsReq.ProtoReflect.Descriptor instead.
func (*UUIDsReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{6}
}

func (x *UUIDsReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type BaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BaseResp) Reset() {
	*x = BaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResp) ProtoMessage() {}

func (x *BaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResp.ProtoReflect.Descriptor instead.
func (*BaseResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{7}
}

func (x *BaseResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BrandUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      uint32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PicUrl      string  `protobuf:"bytes,3,opt,name=picUrl,proto3" json:"picUrl,omitempty"`
	Sort        uint32  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Description *string `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Id          uint64  `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BrandUpdateReq) Reset() {
	*x = BrandUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandUpdateReq) ProtoMessage() {}

func (x *BrandUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandUpdateReq.ProtoReflect.Descriptor instead.
func (*BrandUpdateReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{8}
}

func (x *BrandUpdateReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BrandUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrandUpdateReq) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

func (x *BrandUpdateReq) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *BrandUpdateReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *BrandUpdateReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PropertyListByIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []uint64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *PropertyListByIdsReq) Reset() {
	*x = PropertyListByIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyListByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyListByIdsReq) ProtoMessage() {}

func (x *PropertyListByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyListByIdsReq.ProtoReflect.Descriptor instead.
func (*PropertyListByIdsReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{9}
}

func (x *PropertyListByIdsReq) GetId() []uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type BrandInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt   *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt   *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status      *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Name        *string `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
	PicUrl      *string `protobuf:"bytes,6,opt,name=pic_url,json=picUrl,proto3,oneof" json:"pic_url,omitempty"`
	Sort        *uint32 `protobuf:"varint,7,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Description *string `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *BrandInfo) Reset() {
	*x = BrandInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandInfo) ProtoMessage() {}

func (x *BrandInfo) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandInfo.ProtoReflect.Descriptor instead.
func (*BrandInfo) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{10}
}

func (x *BrandInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BrandInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *BrandInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *BrandInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *BrandInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BrandInfo) GetPicUrl() string {
	if x != nil && x.PicUrl != nil {
		return *x.PicUrl
	}
	return ""
}

func (x *BrandInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *BrandInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CategoryBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId    uint64  `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PicUrl      string  `protobuf:"bytes,3,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`
	Sort        *uint32 `protobuf:"varint,4,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Description *string `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Status      uint32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CategoryBase) Reset() {
	*x = CategoryBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBase) ProtoMessage() {}

func (x *CategoryBase) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBase.ProtoReflect.Descriptor instead.
func (*CategoryBase) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{11}
}

func (x *CategoryBase) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CategoryBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryBase) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

func (x *CategoryBase) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *CategoryBase) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CategoryBase) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type CategoryUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId    uint64  `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PicUrl      string  `protobuf:"bytes,3,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`
	BigPicUrl   *string `protobuf:"bytes,4,opt,name=big_pic_url,json=bigPicUrl,proto3,oneof" json:"big_pic_url,omitempty"`
	Sort        *uint32 `protobuf:"varint,5,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Status      uint32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Id          uint64  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	Description *string `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *CategoryUpdateReq) Reset() {
	*x = CategoryUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryUpdateReq) ProtoMessage() {}

func (x *CategoryUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryUpdateReq.ProtoReflect.Descriptor instead.
func (*CategoryUpdateReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{12}
}

func (x *CategoryUpdateReq) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CategoryUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryUpdateReq) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

func (x *CategoryUpdateReq) GetBigPicUrl() string {
	if x != nil && x.BigPicUrl != nil {
		return *x.BigPicUrl
	}
	return ""
}

func (x *CategoryUpdateReq) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *CategoryUpdateReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CategoryUpdateReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryUpdateReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CategoryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Status   *uint32 `protobuf:"varint,2,opt,name=status,proto3,oneof" json:"status,omitempty"`
	ParentId *uint64 `protobuf:"varint,3,opt,name=parentId,proto3,oneof" json:"parentId,omitempty"`
}

func (x *CategoryListReq) Reset() {
	*x = CategoryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryListReq) ProtoMessage() {}

func (x *CategoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryListReq.ProtoReflect.Descriptor instead.
func (*CategoryListReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{13}
}

func (x *CategoryListReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CategoryListReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CategoryListReq) GetParentId() uint64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

type CommentListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*CommentInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CommentListResp) Reset() {
	*x = CommentListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentListResp) ProtoMessage() {}

func (x *CommentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentListResp.ProtoReflect.Descriptor instead.
func (*CommentListResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{14}
}

func (x *CommentListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommentListResp) GetData() []*CommentInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CommentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	UserNickname *string `protobuf:"bytes,3,opt,name=user_nickname,json=userNickname,proto3,oneof" json:"user_nickname,omitempty"`
	UserAvatar   *string `protobuf:"bytes,4,opt,name=user_avatar,json=userAvatar,proto3,oneof" json:"user_avatar,omitempty"`
	SpuName      *string `protobuf:"bytes,5,opt,name=spu_name,json=spuName,proto3,oneof" json:"spu_name,omitempty"`
}

func (x *CommentListReq) Reset() {
	*x = CommentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentListReq) ProtoMessage() {}

func (x *CommentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentListReq.ProtoReflect.Descriptor instead.
func (*CommentListReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{15}
}

func (x *CommentListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CommentListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommentListReq) GetUserNickname() string {
	if x != nil && x.UserNickname != nil {
		return *x.UserNickname
	}
	return ""
}

func (x *CommentListReq) GetUserAvatar() string {
	if x != nil && x.UserAvatar != nil {
		return *x.UserAvatar
	}
	return ""
}

func (x *CommentListReq) GetSpuName() string {
	if x != nil && x.SpuName != nil {
		return *x.SpuName
	}
	return ""
}

type PropertyValueListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*PropertyValueInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PropertyValueListResp) Reset() {
	*x = PropertyValueListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValueListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValueListResp) ProtoMessage() {}

func (x *PropertyValueListResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValueListResp.ProtoReflect.Descriptor instead.
func (*PropertyValueListResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{16}
}

func (x *PropertyValueListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PropertyValueListResp) GetData() []*PropertyValueInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type IDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IDsReq) Reset() {
	*x = IDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsReq) ProtoMessage() {}

func (x *IDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsReq.ProtoReflect.Descriptor instead.
func (*IDsReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{17}
}

func (x *IDsReq) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type PropertyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status    *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Name      *string `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Remark    *string `protobuf:"bytes,6,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *PropertyInfo) Reset() {
	*x = PropertyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyInfo) ProtoMessage() {}

func (x *PropertyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyInfo.ProtoReflect.Descriptor instead.
func (*PropertyInfo) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{18}
}

func (x *PropertyInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PropertyInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *PropertyInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *PropertyInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *PropertyInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PropertyInfo) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type PropertyValueDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuProperty []*SkuProperty `protobuf:"bytes,1,rep,name=skuProperty,proto3" json:"skuProperty,omitempty"`
}

func (x *PropertyValueDetailResp) Reset() {
	*x = PropertyValueDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValueDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValueDetailResp) ProtoMessage() {}

func (x *PropertyValueDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValueDetailResp.ProtoReflect.Descriptor instead.
func (*PropertyValueDetailResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{19}
}

func (x *PropertyValueDetailResp) GetSkuProperty() []*SkuProperty {
	if x != nil {
		return x.SkuProperty
	}
	return nil
}

type BrandPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name      *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Status    *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	CreatedAt []int64 `protobuf:"varint,5,rep,packed,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *BrandPageReq) Reset() {
	*x = BrandPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandPageReq) ProtoMessage() {}

func (x *BrandPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandPageReq.ProtoReflect.Descriptor instead.
func (*BrandPageReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{20}
}

func (x *BrandPageReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BrandPageReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *BrandPageReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BrandPageReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *BrandPageReq) GetCreatedAt() []int64 {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type CategoryListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CategoryInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CategoryListResp) Reset() {
	*x = CategoryListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryListResp) ProtoMessage() {}

func (x *CategoryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryListResp.ProtoReflect.Descriptor instead.
func (*CategoryListResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{21}
}

func (x *CategoryListResp) GetData() []*CategoryInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CommentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt         *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt         *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	UserId            *int64  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	UserNickname      *string `protobuf:"bytes,5,opt,name=user_nickname,json=userNickname,proto3,oneof" json:"user_nickname,omitempty"`
	UserAvatar        *string `protobuf:"bytes,6,opt,name=user_avatar,json=userAvatar,proto3,oneof" json:"user_avatar,omitempty"`
	Anonymous         *bool   `protobuf:"varint,7,opt,name=anonymous,proto3,oneof" json:"anonymous,omitempty"`
	OrderId           *int64  `protobuf:"varint,8,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	OrderItemId       *int64  `protobuf:"varint,9,opt,name=order_item_id,json=orderItemId,proto3,oneof" json:"order_item_id,omitempty"`
	SpuId             *int64  `protobuf:"varint,10,opt,name=spu_id,json=spuId,proto3,oneof" json:"spu_id,omitempty"`
	SpuName           *string `protobuf:"bytes,11,opt,name=spu_name,json=spuName,proto3,oneof" json:"spu_name,omitempty"`
	SkuId             *int64  `protobuf:"varint,12,opt,name=sku_id,json=skuId,proto3,oneof" json:"sku_id,omitempty"`
	SkuPicUrl         *string `protobuf:"bytes,13,opt,name=sku_pic_url,json=skuPicUrl,proto3,oneof" json:"sku_pic_url,omitempty"`
	SkuProperties     *string `protobuf:"bytes,14,opt,name=sku_properties,json=skuProperties,proto3,oneof" json:"sku_properties,omitempty"`
	Visible           *bool   `protobuf:"varint,15,opt,name=visible,proto3,oneof" json:"visible,omitempty"`
	Scores            *int32  `protobuf:"varint,16,opt,name=scores,proto3,oneof" json:"scores,omitempty"`
	DescriptionScores *int32  `protobuf:"varint,17,opt,name=description_scores,json=descriptionScores,proto3,oneof" json:"description_scores,omitempty"`
	BenefitScores     *int32  `protobuf:"varint,18,opt,name=benefit_scores,json=benefitScores,proto3,oneof" json:"benefit_scores,omitempty"`
	Content           *string `protobuf:"bytes,19,opt,name=content,proto3,oneof" json:"content,omitempty"`
	PicUrls           *string `protobuf:"bytes,20,opt,name=pic_urls,json=picUrls,proto3,oneof" json:"pic_urls,omitempty"`
	ReplyStatus       *bool   `protobuf:"varint,21,opt,name=reply_status,json=replyStatus,proto3,oneof" json:"reply_status,omitempty"`
	ReplyUserId       *int64  `protobuf:"varint,22,opt,name=reply_user_id,json=replyUserId,proto3,oneof" json:"reply_user_id,omitempty"`
	ReplyContent      *string `protobuf:"bytes,23,opt,name=reply_content,json=replyContent,proto3,oneof" json:"reply_content,omitempty"`
	ReplyTime         *int64  `protobuf:"varint,24,opt,name=reply_time,json=replyTime,proto3,oneof" json:"reply_time,omitempty"`
}

func (x *CommentInfo) Reset() {
	*x = CommentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentInfo) ProtoMessage() {}

func (x *CommentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentInfo.ProtoReflect.Descriptor instead.
func (*CommentInfo) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{22}
}

func (x *CommentInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CommentInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *CommentInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *CommentInfo) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *CommentInfo) GetUserNickname() string {
	if x != nil && x.UserNickname != nil {
		return *x.UserNickname
	}
	return ""
}

func (x *CommentInfo) GetUserAvatar() string {
	if x != nil && x.UserAvatar != nil {
		return *x.UserAvatar
	}
	return ""
}

func (x *CommentInfo) GetAnonymous() bool {
	if x != nil && x.Anonymous != nil {
		return *x.Anonymous
	}
	return false
}

func (x *CommentInfo) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *CommentInfo) GetOrderItemId() int64 {
	if x != nil && x.OrderItemId != nil {
		return *x.OrderItemId
	}
	return 0
}

func (x *CommentInfo) GetSpuId() int64 {
	if x != nil && x.SpuId != nil {
		return *x.SpuId
	}
	return 0
}

func (x *CommentInfo) GetSpuName() string {
	if x != nil && x.SpuName != nil {
		return *x.SpuName
	}
	return ""
}

func (x *CommentInfo) GetSkuId() int64 {
	if x != nil && x.SkuId != nil {
		return *x.SkuId
	}
	return 0
}

func (x *CommentInfo) GetSkuPicUrl() string {
	if x != nil && x.SkuPicUrl != nil {
		return *x.SkuPicUrl
	}
	return ""
}

func (x *CommentInfo) GetSkuProperties() string {
	if x != nil && x.SkuProperties != nil {
		return *x.SkuProperties
	}
	return ""
}

func (x *CommentInfo) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *CommentInfo) GetScores() int32 {
	if x != nil && x.Scores != nil {
		return *x.Scores
	}
	return 0
}

func (x *CommentInfo) GetDescriptionScores() int32 {
	if x != nil && x.DescriptionScores != nil {
		return *x.DescriptionScores
	}
	return 0
}

func (x *CommentInfo) GetBenefitScores() int32 {
	if x != nil && x.BenefitScores != nil {
		return *x.BenefitScores
	}
	return 0
}

func (x *CommentInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *CommentInfo) GetPicUrls() string {
	if x != nil && x.PicUrls != nil {
		return *x.PicUrls
	}
	return ""
}

func (x *CommentInfo) GetReplyStatus() bool {
	if x != nil && x.ReplyStatus != nil {
		return *x.ReplyStatus
	}
	return false
}

func (x *CommentInfo) GetReplyUserId() int64 {
	if x != nil && x.ReplyUserId != nil {
		return *x.ReplyUserId
	}
	return 0
}

func (x *CommentInfo) GetReplyContent() string {
	if x != nil && x.ReplyContent != nil {
		return *x.ReplyContent
	}
	return ""
}

func (x *CommentInfo) GetReplyTime() int64 {
	if x != nil && x.ReplyTime != nil {
		return *x.ReplyTime
	}
	return 0
}

type PropertyListByNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *PropertyListByNameReq) Reset() {
	*x = PropertyListByNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyListByNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyListByNameReq) ProtoMessage() {}

func (x *PropertyListByNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyListByNameReq.ProtoReflect.Descriptor instead.
func (*PropertyListByNameReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{23}
}

func (x *PropertyListByNameReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type PropertyValueListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name     *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Remark   *string `protobuf:"bytes,4,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *PropertyValueListReq) Reset() {
	*x = PropertyValueListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValueListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValueListReq) ProtoMessage() {}

func (x *PropertyValueListReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValueListReq.ProtoReflect.Descriptor instead.
func (*PropertyValueListReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{24}
}

func (x *PropertyValueListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PropertyValueListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PropertyValueListReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PropertyValueListReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type SkuListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SkuInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SkuListResp) Reset() {
	*x = SkuListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuListResp) ProtoMessage() {}

func (x *SkuListResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuListResp.ProtoReflect.Descriptor instead.
func (*SkuListResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{25}
}

func (x *SkuListResp) GetData() []*SkuInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UUIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UUIDReq) Reset() {
	*x = UUIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDReq) ProtoMessage() {}

func (x *UUIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDReq.ProtoReflect.Descriptor instead.
func (*UUIDReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{26}
}

func (x *UUIDReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CategoryCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId    uint64  `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PicUrl      string  `protobuf:"bytes,3,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`
	BigPicUrl   *string `protobuf:"bytes,4,opt,name=big_pic_url,json=bigPicUrl,proto3,oneof" json:"big_pic_url,omitempty"`
	Sort        *uint32 `protobuf:"varint,5,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Status      uint32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Description *string `protobuf:"bytes,7,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *CategoryCreateReq) Reset() {
	*x = CategoryCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryCreateReq) ProtoMessage() {}

func (x *CategoryCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryCreateReq.ProtoReflect.Descriptor instead.
func (*CategoryCreateReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{27}
}

func (x *CategoryCreateReq) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CategoryCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryCreateReq) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

func (x *CategoryCreateReq) GetBigPicUrl() string {
	if x != nil && x.BigPicUrl != nil {
		return *x.BigPicUrl
	}
	return ""
}

func (x *CategoryCreateReq) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *CategoryCreateReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CategoryCreateReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type PropertyValueUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyId uint64  `protobuf:"varint,1,opt,name=propertyId,proto3" json:"propertyId,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Remark     *string `protobuf:"bytes,3,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Id         uint64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PropertyValueUpdateReq) Reset() {
	*x = PropertyValueUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValueUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValueUpdateReq) ProtoMessage() {}

func (x *PropertyValueUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValueUpdateReq.ProtoReflect.Descriptor instead.
func (*PropertyValueUpdateReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{28}
}

func (x *PropertyValueUpdateReq) GetPropertyId() uint64 {
	if x != nil {
		return x.PropertyId
	}
	return 0
}

func (x *PropertyValueUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PropertyValueUpdateReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *PropertyValueUpdateReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SkuCreateOrUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price       int32          `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	MarketPrice *int32         `protobuf:"varint,2,opt,name=marketPrice,proto3,oneof" json:"marketPrice,omitempty"`
	CostPrice   *int32         `protobuf:"varint,3,opt,name=costPrice,proto3,oneof" json:"costPrice,omitempty"`
	BarCode     *string        `protobuf:"bytes,4,opt,name=barCode,proto3,oneof" json:"barCode,omitempty"`
	PicUrl      string         `protobuf:"bytes,5,opt,name=picUrl,proto3" json:"picUrl,omitempty"`
	Stock       int32          `protobuf:"varint,6,opt,name=stock,proto3" json:"stock,omitempty"`
	Weight      *float64       `protobuf:"fixed64,7,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Volume      *float64       `protobuf:"fixed64,8,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
	Properties  []*SkuProperty `protobuf:"bytes,9,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *SkuCreateOrUpdateReq) Reset() {
	*x = SkuCreateOrUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuCreateOrUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuCreateOrUpdateReq) ProtoMessage() {}

func (x *SkuCreateOrUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuCreateOrUpdateReq.ProtoReflect.Descriptor instead.
func (*SkuCreateOrUpdateReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{29}
}

func (x *SkuCreateOrUpdateReq) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SkuCreateOrUpdateReq) GetMarketPrice() int32 {
	if x != nil && x.MarketPrice != nil {
		return *x.MarketPrice
	}
	return 0
}

func (x *SkuCreateOrUpdateReq) GetCostPrice() int32 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *SkuCreateOrUpdateReq) GetBarCode() string {
	if x != nil && x.BarCode != nil {
		return *x.BarCode
	}
	return ""
}

func (x *SkuCreateOrUpdateReq) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

func (x *SkuCreateOrUpdateReq) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *SkuCreateOrUpdateReq) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *SkuCreateOrUpdateReq) GetVolume() float64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *SkuCreateOrUpdateReq) GetProperties() []*SkuProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

// base message
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{30}
}

type SkuProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyId   uint64 `protobuf:"varint,1,opt,name=propertyId,proto3" json:"propertyId,omitempty"`
	PropertyName string `protobuf:"bytes,2,opt,name=propertyName,proto3" json:"propertyName,omitempty"`
	ValueId      uint64 `protobuf:"varint,3,opt,name=valueId,proto3" json:"valueId,omitempty"`
	ValueName    string `protobuf:"bytes,4,opt,name=valueName,proto3" json:"valueName,omitempty"`
}

func (x *SkuProperty) Reset() {
	*x = SkuProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuProperty) ProtoMessage() {}

func (x *SkuProperty) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuProperty.ProtoReflect.Descriptor instead.
func (*SkuProperty) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{31}
}

func (x *SkuProperty) GetPropertyId() uint64 {
	if x != nil {
		return x.PropertyId
	}
	return 0
}

func (x *SkuProperty) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *SkuProperty) GetValueId() uint64 {
	if x != nil {
		return x.ValueId
	}
	return 0
}

func (x *SkuProperty) GetValueName() string {
	if x != nil {
		return x.ValueName
	}
	return ""
}

type CategoryLevelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *int64 `protobuf:"varint,1,opt,name=level,proto3,oneof" json:"level,omitempty"`
}

func (x *CategoryLevelResp) Reset() {
	*x = CategoryLevelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryLevelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryLevelResp) ProtoMessage() {}

func (x *CategoryLevelResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryLevelResp.ProtoReflect.Descriptor instead.
func (*CategoryLevelResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{32}
}

func (x *CategoryLevelResp) GetLevel() int64 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type PropertyValueCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyId uint64  `protobuf:"varint,1,opt,name=propertyId,proto3" json:"propertyId,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Remark     *string `protobuf:"bytes,3,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *PropertyValueCreateReq) Reset() {
	*x = PropertyValueCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValueCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValueCreateReq) ProtoMessage() {}

func (x *PropertyValueCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValueCreateReq.ProtoReflect.Descriptor instead.
func (*PropertyValueCreateReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{33}
}

func (x *PropertyValueCreateReq) GetPropertyId() uint64 {
	if x != nil {
		return x.PropertyId
	}
	return 0
}

func (x *PropertyValueCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PropertyValueCreateReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type PropertyUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Remark *string `protobuf:"bytes,2,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Id     uint64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PropertyUpdateReq) Reset() {
	*x = PropertyUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyUpdateReq) ProtoMessage() {}

func (x *PropertyUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyUpdateReq.ProtoReflect.Descriptor instead.
func (*PropertyUpdateReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{34}
}

func (x *PropertyUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PropertyUpdateReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *PropertyUpdateReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PropertyValueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt  *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt  *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	PropertyId *uint64 `protobuf:"varint,4,opt,name=property_id,json=propertyId,proto3,oneof" json:"property_id,omitempty"`
	Name       *string `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Remark     *string `protobuf:"bytes,6,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *PropertyValueInfo) Reset() {
	*x = PropertyValueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValueInfo) ProtoMessage() {}

func (x *PropertyValueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValueInfo.ProtoReflect.Descriptor instead.
func (*PropertyValueInfo) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{35}
}

func (x *PropertyValueInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PropertyValueInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *PropertyValueInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *PropertyValueInfo) GetPropertyId() uint64 {
	if x != nil && x.PropertyId != nil {
		return *x.PropertyId
	}
	return 0
}

func (x *PropertyValueInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PropertyValueInfo) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type Ids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []uint64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *Ids) Reset() {
	*x = Ids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ids) ProtoMessage() {}

func (x *Ids) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ids.ProtoReflect.Descriptor instead.
func (*Ids) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{36}
}

func (x *Ids) GetId() []uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type PropertyValuePageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name       *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	PropertyId *string `protobuf:"bytes,4,opt,name=propertyId,proto3,oneof" json:"propertyId,omitempty"`
}

func (x *PropertyValuePageReq) Reset() {
	*x = PropertyValuePageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValuePageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValuePageReq) ProtoMessage() {}

func (x *PropertyValuePageReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValuePageReq.ProtoReflect.Descriptor instead.
func (*PropertyValuePageReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{37}
}

func (x *PropertyValuePageReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PropertyValuePageReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PropertyValuePageReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PropertyValuePageReq) GetPropertyId() string {
	if x != nil && x.PropertyId != nil {
		return *x.PropertyId
	}
	return ""
}

type SpuCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Keyword             string                  `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Introduction        string                  `protobuf:"bytes,3,opt,name=introduction,proto3" json:"introduction,omitempty"`
	Description         string                  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	BarCode             *string                 `protobuf:"bytes,5,opt,name=barCode,proto3,oneof" json:"barCode,omitempty"`
	CategoryId          uint64                  `protobuf:"varint,6,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	BrandId             uint64                  `protobuf:"varint,7,opt,name=brandId,proto3" json:"brandId,omitempty"`
	PicUrl              string                  `protobuf:"bytes,8,opt,name=picUrl,proto3" json:"picUrl,omitempty"`
	SliderPicUrls       []string                `protobuf:"bytes,9,rep,name=sliderPicUrls,proto3" json:"sliderPicUrls,omitempty"`
	VideoUrl            *string                 `protobuf:"bytes,10,opt,name=videoUrl,proto3,oneof" json:"videoUrl,omitempty"`
	Unit                uint32                  `protobuf:"varint,11,opt,name=unit,proto3" json:"unit,omitempty"`
	Sort                uint32                  `protobuf:"varint,12,opt,name=sort,proto3" json:"sort,omitempty"`
	SpecType            bool                    `protobuf:"varint,13,opt,name=specType,proto3" json:"specType,omitempty"`
	DeliveryTemplateId  uint64                  `protobuf:"varint,14,opt,name=deliveryTemplateId,proto3" json:"deliveryTemplateId,omitempty"`
	RecommendHot        bool                    `protobuf:"varint,15,opt,name=recommendHot,proto3" json:"recommendHot,omitempty"`
	RecommendBenefit    bool                    `protobuf:"varint,16,opt,name=recommendBenefit,proto3" json:"recommendBenefit,omitempty"`
	RecommendBest       bool                    `protobuf:"varint,17,opt,name=recommendBest,proto3" json:"recommendBest,omitempty"`
	RecommendNew        bool                    `protobuf:"varint,18,opt,name=recommendNew,proto3" json:"recommendNew,omitempty"`
	RecommendGood       bool                    `protobuf:"varint,19,opt,name=recommendGood,proto3" json:"recommendGood,omitempty"`
	GiveIntegral        int32                   `protobuf:"varint,20,opt,name=giveIntegral,proto3" json:"giveIntegral,omitempty"`
	GiveCouponTemplates []*GiveCouponTemplate   `protobuf:"bytes,21,rep,name=giveCouponTemplates,proto3" json:"giveCouponTemplates,omitempty"`
	SubCommissionType   bool                    `protobuf:"varint,22,opt,name=subCommissionType,proto3" json:"subCommissionType,omitempty"`
	ActivityOrders      []int32                 `protobuf:"varint,23,rep,packed,name=activityOrders,proto3" json:"activityOrders,omitempty"`
	VirtualSalesCount   *int32                  `protobuf:"varint,24,opt,name=virtualSalesCount,proto3,oneof" json:"virtualSalesCount,omitempty"`
	Skus                []*SkuCreateOrUpdateReq `protobuf:"bytes,25,rep,name=skus,proto3" json:"skus,omitempty"`
}

func (x *SpuCreateReq) Reset() {
	*x = SpuCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuCreateReq) ProtoMessage() {}

func (x *SpuCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuCreateReq.ProtoReflect.Descriptor instead.
func (*SpuCreateReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{38}
}

func (x *SpuCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpuCreateReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SpuCreateReq) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *SpuCreateReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpuCreateReq) GetBarCode() string {
	if x != nil && x.BarCode != nil {
		return *x.BarCode
	}
	return ""
}

func (x *SpuCreateReq) GetCategoryId() uint64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SpuCreateReq) GetBrandId() uint64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *SpuCreateReq) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

func (x *SpuCreateReq) GetSliderPicUrls() []string {
	if x != nil {
		return x.SliderPicUrls
	}
	return nil
}

func (x *SpuCreateReq) GetVideoUrl() string {
	if x != nil && x.VideoUrl != nil {
		return *x.VideoUrl
	}
	return ""
}

func (x *SpuCreateReq) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *SpuCreateReq) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SpuCreateReq) GetSpecType() bool {
	if x != nil {
		return x.SpecType
	}
	return false
}

func (x *SpuCreateReq) GetDeliveryTemplateId() uint64 {
	if x != nil {
		return x.DeliveryTemplateId
	}
	return 0
}

func (x *SpuCreateReq) GetRecommendHot() bool {
	if x != nil {
		return x.RecommendHot
	}
	return false
}

func (x *SpuCreateReq) GetRecommendBenefit() bool {
	if x != nil {
		return x.RecommendBenefit
	}
	return false
}

func (x *SpuCreateReq) GetRecommendBest() bool {
	if x != nil {
		return x.RecommendBest
	}
	return false
}

func (x *SpuCreateReq) GetRecommendNew() bool {
	if x != nil {
		return x.RecommendNew
	}
	return false
}

func (x *SpuCreateReq) GetRecommendGood() bool {
	if x != nil {
		return x.RecommendGood
	}
	return false
}

func (x *SpuCreateReq) GetGiveIntegral() int32 {
	if x != nil {
		return x.GiveIntegral
	}
	return 0
}

func (x *SpuCreateReq) GetGiveCouponTemplates() []*GiveCouponTemplate {
	if x != nil {
		return x.GiveCouponTemplates
	}
	return nil
}

func (x *SpuCreateReq) GetSubCommissionType() bool {
	if x != nil {
		return x.SubCommissionType
	}
	return false
}

func (x *SpuCreateReq) GetActivityOrders() []int32 {
	if x != nil {
		return x.ActivityOrders
	}
	return nil
}

func (x *SpuCreateReq) GetVirtualSalesCount() int32 {
	if x != nil && x.VirtualSalesCount != nil {
		return *x.VirtualSalesCount
	}
	return 0
}

func (x *SpuCreateReq) GetSkus() []*SkuCreateOrUpdateReq {
	if x != nil {
		return x.Skus
	}
	return nil
}

type SpuUpdateStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SpuUpdateStatusReq) Reset() {
	*x = SpuUpdateStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuUpdateStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuUpdateStatusReq) ProtoMessage() {}

func (x *SpuUpdateStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuUpdateStatusReq.ProtoReflect.Descriptor instead.
func (*SpuUpdateStatusReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{39}
}

func (x *SpuUpdateStatusReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuUpdateStatusReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type PageInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *PageInfoReq) Reset() {
	*x = PageInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfoReq) ProtoMessage() {}

func (x *PageInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfoReq.ProtoReflect.Descriptor instead.
func (*PageInfoReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{40}
}

func (x *PageInfoReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageInfoReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type BrandResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *uint32 `protobuf:"varint,1,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Name        *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	PicUrl      *string `protobuf:"bytes,3,opt,name=picUrl,proto3,oneof" json:"picUrl,omitempty"`
	Sort        *uint32 `protobuf:"varint,4,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Description *string `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Id          *uint64 `protobuf:"varint,6,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt   *int64  `protobuf:"varint,7,opt,name=createdAt,proto3,oneof" json:"createdAt,omitempty"`
}

func (x *BrandResp) Reset() {
	*x = BrandResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandResp) ProtoMessage() {}

func (x *BrandResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandResp.ProtoReflect.Descriptor instead.
func (*BrandResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{41}
}

func (x *BrandResp) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *BrandResp) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BrandResp) GetPicUrl() string {
	if x != nil && x.PicUrl != nil {
		return *x.PicUrl
	}
	return ""
}

func (x *BrandResp) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *BrandResp) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *BrandResp) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BrandResp) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

type PropertyListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*PropertyInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PropertyListResp) Reset() {
	*x = PropertyListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyListResp) ProtoMessage() {}

func (x *PropertyListResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyListResp.ProtoReflect.Descriptor instead.
func (*PropertyListResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{42}
}

func (x *PropertyListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PropertyListResp) GetData() []*PropertyInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type PropertyCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Remark *string `protobuf:"bytes,2,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *PropertyCreateReq) Reset() {
	*x = PropertyCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyCreateReq) ProtoMessage() {}

func (x *PropertyCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyCreateReq.ProtoReflect.Descriptor instead.
func (*PropertyCreateReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{43}
}

func (x *PropertyCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PropertyCreateReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type IDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IDReq) Reset() {
	*x = IDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDReq) ProtoMessage() {}

func (x *IDReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDReq.ProtoReflect.Descriptor instead.
func (*IDReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{44}
}

func (x *IDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BaseMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BaseMsg) Reset() {
	*x = BaseMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseMsg) ProtoMessage() {}

func (x *BaseMsg) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseMsg.ProtoReflect.Descriptor instead.
func (*BaseMsg) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{45}
}

func (x *BaseMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SpuListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name         *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Keyword      *string `protobuf:"bytes,4,opt,name=keyword,proto3,oneof" json:"keyword,omitempty"`
	Introduction *string `protobuf:"bytes,5,opt,name=introduction,proto3,oneof" json:"introduction,omitempty"`
}

func (x *SpuListReq) Reset() {
	*x = SpuListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuListReq) ProtoMessage() {}

func (x *SpuListReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuListReq.ProtoReflect.Descriptor instead.
func (*SpuListReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{46}
}

func (x *SpuListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SpuListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SpuListReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SpuListReq) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *SpuListReq) GetIntroduction() string {
	if x != nil && x.Introduction != nil {
		return *x.Introduction
	}
	return ""
}

type SkuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint64        `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt   *int64         `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt   *int64         `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	SpuId       *uint64        `protobuf:"varint,4,opt,name=spu_id,json=spuId,proto3,oneof" json:"spu_id,omitempty"`
	Properties  []*SkuProperty `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty"`
	Price       *int32         `protobuf:"varint,6,opt,name=price,proto3,oneof" json:"price,omitempty"`
	MarketPrice *int32         `protobuf:"varint,7,opt,name=market_price,json=marketPrice,proto3,oneof" json:"market_price,omitempty"`
	CostPrice   *int32         `protobuf:"varint,8,opt,name=cost_price,json=costPrice,proto3,oneof" json:"cost_price,omitempty"`
	BarCode     *string        `protobuf:"bytes,9,opt,name=bar_code,json=barCode,proto3,oneof" json:"bar_code,omitempty"`
	PicUrl      *string        `protobuf:"bytes,10,opt,name=pic_url,json=picUrl,proto3,oneof" json:"pic_url,omitempty"`
	Stock       *int32         `protobuf:"varint,11,opt,name=stock,proto3,oneof" json:"stock,omitempty"`
	Weight      *float64       `protobuf:"fixed64,12,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Volume      *float64       `protobuf:"fixed64,13,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
	SalesCount  *int32         `protobuf:"varint,16,opt,name=sales_count,json=salesCount,proto3,oneof" json:"sales_count,omitempty"`
}

func (x *SkuInfo) Reset() {
	*x = SkuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuInfo) ProtoMessage() {}

func (x *SkuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuInfo.ProtoReflect.Descriptor instead.
func (*SkuInfo) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{47}
}

func (x *SkuInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SkuInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *SkuInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *SkuInfo) GetSpuId() uint64 {
	if x != nil && x.SpuId != nil {
		return *x.SpuId
	}
	return 0
}

func (x *SkuInfo) GetProperties() []*SkuProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *SkuInfo) GetPrice() int32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *SkuInfo) GetMarketPrice() int32 {
	if x != nil && x.MarketPrice != nil {
		return *x.MarketPrice
	}
	return 0
}

func (x *SkuInfo) GetCostPrice() int32 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *SkuInfo) GetBarCode() string {
	if x != nil && x.BarCode != nil {
		return *x.BarCode
	}
	return ""
}

func (x *SkuInfo) GetPicUrl() string {
	if x != nil && x.PicUrl != nil {
		return *x.PicUrl
	}
	return ""
}

func (x *SkuInfo) GetStock() int32 {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return 0
}

func (x *SkuInfo) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *SkuInfo) GetVolume() float64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *SkuInfo) GetSalesCount() int32 {
	if x != nil && x.SalesCount != nil {
		return *x.SalesCount
	}
	return 0
}

type SpuListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*SpuInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SpuListResp) Reset() {
	*x = SpuListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuListResp) ProtoMessage() {}

func (x *SpuListResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuListResp.ProtoReflect.Descriptor instead.
func (*SpuListResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{48}
}

func (x *SpuListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SpuListResp) GetData() []*SpuInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type PropertyPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name      *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Status    *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	CreatedAt []int64 `protobuf:"varint,5,rep,packed,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *PropertyPageReq) Reset() {
	*x = PropertyPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyPageReq) ProtoMessage() {}

func (x *PropertyPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyPageReq.ProtoReflect.Descriptor instead.
func (*PropertyPageReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{49}
}

func (x *PropertyPageReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PropertyPageReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PropertyPageReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PropertyPageReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *PropertyPageReq) GetCreatedAt() []int64 {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type SpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *uint64  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt             *int64   `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt             *int64   `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status                *uint32  `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Sort                  *uint32  `protobuf:"varint,5,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Name                  *string  `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Keyword               *string  `protobuf:"bytes,7,opt,name=keyword,proto3,oneof" json:"keyword,omitempty"`
	Introduction          *string  `protobuf:"bytes,8,opt,name=introduction,proto3,oneof" json:"introduction,omitempty"`
	Description           *string  `protobuf:"bytes,9,opt,name=description,proto3,oneof" json:"description,omitempty"`
	BarCode               *string  `protobuf:"bytes,10,opt,name=bar_code,json=barCode,proto3,oneof" json:"bar_code,omitempty"`
	CategoryId            *uint64  `protobuf:"varint,11,opt,name=category_id,json=categoryId,proto3,oneof" json:"category_id,omitempty"`
	BrandId               *uint64  `protobuf:"varint,12,opt,name=brand_id,json=brandId,proto3,oneof" json:"brand_id,omitempty"`
	PicUrl                *string  `protobuf:"bytes,13,opt,name=pic_url,json=picUrl,proto3,oneof" json:"pic_url,omitempty"`
	SliderPicUrls         []string `protobuf:"bytes,14,rep,name=slider_pic_urls,json=sliderPicUrls,proto3" json:"slider_pic_urls,omitempty"`
	VideoUrl              *string  `protobuf:"bytes,15,opt,name=video_url,json=videoUrl,proto3,oneof" json:"video_url,omitempty"`
	Unit                  *uint32  `protobuf:"varint,16,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
	SpecType              *bool    `protobuf:"varint,17,opt,name=spec_type,json=specType,proto3,oneof" json:"spec_type,omitempty"`
	Price                 *int32   `protobuf:"varint,18,opt,name=price,proto3,oneof" json:"price,omitempty"`
	MarketPrice           *int32   `protobuf:"varint,19,opt,name=market_price,json=marketPrice,proto3,oneof" json:"market_price,omitempty"`
	CostPrice             *int32   `protobuf:"varint,20,opt,name=cost_price,json=costPrice,proto3,oneof" json:"cost_price,omitempty"`
	Stock                 *int32   `protobuf:"varint,21,opt,name=stock,proto3,oneof" json:"stock,omitempty"`
	DeliveryTemplateId    *uint64  `protobuf:"varint,22,opt,name=delivery_template_id,json=deliveryTemplateId,proto3,oneof" json:"delivery_template_id,omitempty"`
	RecommendHot          *bool    `protobuf:"varint,23,opt,name=recommend_hot,json=recommendHot,proto3,oneof" json:"recommend_hot,omitempty"`
	RecommendBenefit      *bool    `protobuf:"varint,24,opt,name=recommend_benefit,json=recommendBenefit,proto3,oneof" json:"recommend_benefit,omitempty"`
	RecommendBest         *bool    `protobuf:"varint,25,opt,name=recommend_best,json=recommendBest,proto3,oneof" json:"recommend_best,omitempty"`
	RecommendNew          *bool    `protobuf:"varint,26,opt,name=recommend_new,json=recommendNew,proto3,oneof" json:"recommend_new,omitempty"`
	RecommendGood         *bool    `protobuf:"varint,27,opt,name=recommend_good,json=recommendGood,proto3,oneof" json:"recommend_good,omitempty"`
	GiveIntegral          *int32   `protobuf:"varint,28,opt,name=give_integral,json=giveIntegral,proto3,oneof" json:"give_integral,omitempty"`
	GiveCouponTemplateIds []uint64 `protobuf:"varint,29,rep,packed,name=give_coupon_template_ids,json=giveCouponTemplateIds,proto3" json:"give_coupon_template_ids,omitempty"`
	SubCommissionType     *bool    `protobuf:"varint,30,opt,name=sub_commission_type,json=subCommissionType,proto3,oneof" json:"sub_commission_type,omitempty"`
	ActivityOrders        []int32  `protobuf:"varint,31,rep,packed,name=activity_orders,json=activityOrders,proto3" json:"activity_orders,omitempty"`
	SalesCount            *int32   `protobuf:"varint,32,opt,name=sales_count,json=salesCount,proto3,oneof" json:"sales_count,omitempty"`
	VirtualSalesCount     *int32   `protobuf:"varint,33,opt,name=virtual_sales_count,json=virtualSalesCount,proto3,oneof" json:"virtual_sales_count,omitempty"`
	BrowseCount           *int32   `protobuf:"varint,34,opt,name=browse_count,json=browseCount,proto3,oneof" json:"browse_count,omitempty"`
}

func (x *SpuInfo) Reset() {
	*x = SpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuInfo) ProtoMessage() {}

func (x *SpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuInfo.ProtoReflect.Descriptor instead.
func (*SpuInfo) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{50}
}

func (x *SpuInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SpuInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *SpuInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *SpuInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SpuInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *SpuInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SpuInfo) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *SpuInfo) GetIntroduction() string {
	if x != nil && x.Introduction != nil {
		return *x.Introduction
	}
	return ""
}

func (x *SpuInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SpuInfo) GetBarCode() string {
	if x != nil && x.BarCode != nil {
		return *x.BarCode
	}
	return ""
}

func (x *SpuInfo) GetCategoryId() uint64 {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return 0
}

func (x *SpuInfo) GetBrandId() uint64 {
	if x != nil && x.BrandId != nil {
		return *x.BrandId
	}
	return 0
}

func (x *SpuInfo) GetPicUrl() string {
	if x != nil && x.PicUrl != nil {
		return *x.PicUrl
	}
	return ""
}

func (x *SpuInfo) GetSliderPicUrls() []string {
	if x != nil {
		return x.SliderPicUrls
	}
	return nil
}

func (x *SpuInfo) GetVideoUrl() string {
	if x != nil && x.VideoUrl != nil {
		return *x.VideoUrl
	}
	return ""
}

func (x *SpuInfo) GetUnit() uint32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

func (x *SpuInfo) GetSpecType() bool {
	if x != nil && x.SpecType != nil {
		return *x.SpecType
	}
	return false
}

func (x *SpuInfo) GetPrice() int32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *SpuInfo) GetMarketPrice() int32 {
	if x != nil && x.MarketPrice != nil {
		return *x.MarketPrice
	}
	return 0
}

func (x *SpuInfo) GetCostPrice() int32 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *SpuInfo) GetStock() int32 {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return 0
}

func (x *SpuInfo) GetDeliveryTemplateId() uint64 {
	if x != nil && x.DeliveryTemplateId != nil {
		return *x.DeliveryTemplateId
	}
	return 0
}

func (x *SpuInfo) GetRecommendHot() bool {
	if x != nil && x.RecommendHot != nil {
		return *x.RecommendHot
	}
	return false
}

func (x *SpuInfo) GetRecommendBenefit() bool {
	if x != nil && x.RecommendBenefit != nil {
		return *x.RecommendBenefit
	}
	return false
}

func (x *SpuInfo) GetRecommendBest() bool {
	if x != nil && x.RecommendBest != nil {
		return *x.RecommendBest
	}
	return false
}

func (x *SpuInfo) GetRecommendNew() bool {
	if x != nil && x.RecommendNew != nil {
		return *x.RecommendNew
	}
	return false
}

func (x *SpuInfo) GetRecommendGood() bool {
	if x != nil && x.RecommendGood != nil {
		return *x.RecommendGood
	}
	return false
}

func (x *SpuInfo) GetGiveIntegral() int32 {
	if x != nil && x.GiveIntegral != nil {
		return *x.GiveIntegral
	}
	return 0
}

func (x *SpuInfo) GetGiveCouponTemplateIds() []uint64 {
	if x != nil {
		return x.GiveCouponTemplateIds
	}
	return nil
}

func (x *SpuInfo) GetSubCommissionType() bool {
	if x != nil && x.SubCommissionType != nil {
		return *x.SubCommissionType
	}
	return false
}

func (x *SpuInfo) GetActivityOrders() []int32 {
	if x != nil {
		return x.ActivityOrders
	}
	return nil
}

func (x *SpuInfo) GetSalesCount() int32 {
	if x != nil && x.SalesCount != nil {
		return *x.SalesCount
	}
	return 0
}

func (x *SpuInfo) GetVirtualSalesCount() int32 {
	if x != nil && x.VirtualSalesCount != nil {
		return *x.VirtualSalesCount
	}
	return 0
}

func (x *SpuInfo) GetBrowseCount() int32 {
	if x != nil && x.BrowseCount != nil {
		return *x.BrowseCount
	}
	return 0
}

type BaseUUIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BaseUUIDResp) Reset() {
	*x = BaseUUIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseUUIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseUUIDResp) ProtoMessage() {}

func (x *BaseUUIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseUUIDResp.ProtoReflect.Descriptor instead.
func (*BaseUUIDResp) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{51}
}

func (x *BaseUUIDResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BaseUUIDResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GiveCouponTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GiveCouponTemplate) Reset() {
	*x = GiveCouponTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveCouponTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveCouponTemplate) ProtoMessage() {}

func (x *GiveCouponTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveCouponTemplate.ProtoReflect.Descriptor instead.
func (*GiveCouponTemplate) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{52}
}

func (x *GiveCouponTemplate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GiveCouponTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_product_proto protoreflect.FileDescriptor

var file_product_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x30, 0x0a, 0x0c, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x0a, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x63,
	0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x0d,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x03, 0x0a, 0x0c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0b, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x62, 0x69, 0x67, 0x50, 0x69, 0x63, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xa4, 0x08, 0x0a, 0x0e, 0x53, 0x70,
	0x75, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x56, 0x4f, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07,
	0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x50, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x50, 0x69, 0x63, 0x55,
	0x72, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x42, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x42, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4e,
	0x65, 0x77, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x47,
	0x6f, 0x6f, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x67, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x13,
	0x67, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x67, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x31, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x11,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x6b, 0x75,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x1c, 0x0a, 0x08, 0x55, 0x55, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x1c,
	0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xaf, 0x01, 0x0a,
	0x0e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x69, 0x63, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xda, 0x02, 0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x93, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12,
	0x23, 0x0a, 0x0b, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x62, 0x69, 0x67, 0x50, 0x69, 0x63, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x02, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x73, 0x70,
	0x75, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1a, 0x0a, 0x06, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x51, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x6b, 0x75, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x53, 0x6b, 0x75, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0b, 0x73,
	0x6b, 0x75, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x3d, 0x0a, 0x10, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xcb, 0x09, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x06, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x70,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x05, 0x73, 0x70,
	0x75, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x73, 0x70, 0x75, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x73, 0x6b, 0x75, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x73, 0x6b, 0x75, 0x50, 0x69,
	0x63, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x6b, 0x75, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x0d, 0x73, 0x6b, 0x75, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0f, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x11, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x0d, 0x62,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x12, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x13, 0x52, 0x07, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x15, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x48, 0x17, 0x52,
	0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x70, 0x75,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x39, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a,
	0x14, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0x33, 0x0a, 0x0b, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x6b, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x19, 0x0a, 0x07, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x83, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c,
	0x12, 0x23, 0x0a, 0x0b, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x62, 0x69, 0x67, 0x50, 0x69, 0x63, 0x55,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xf3, 0x02,
	0x0a, 0x14, 0x53, 0x6b, 0x75, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x62, 0x61, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x6b, 0x75, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x89, 0x01, 0x0a,
	0x0b, 0x53, 0x6b, 0x75, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x74, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x5f, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x95, 0x02, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0x15, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0xcc, 0x07, 0x0a, 0x0c, 0x53, 0x70, 0x75,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x07, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x50, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x50, 0x69, 0x63,
	0x55, 0x72, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x42, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x42, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x4e, 0x65, 0x77, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x47, 0x6f, 0x6f, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x67, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x4d, 0x0a,
	0x13, 0x67, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x67, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x31, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x6b,
	0x75, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72,
	0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x12, 0x53, 0x70, 0x75, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3e, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x69, 0x63,
	0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x70, 0x69, 0x63,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x05, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x53, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x4f, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0x17, 0x0a, 0x05, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x07, 0x42, 0x61,
	0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc4, 0x01, 0x0a, 0x0a, 0x53, 0x70, 0x75, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfb,
	0x04, 0x0a, 0x07, 0x53, 0x6b, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x53, 0x6b, 0x75, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x06, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x0b,
	0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x70, 0x75, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xe2, 0x0d, 0x0a, 0x07, 0x53, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62,
	0x61, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x0a, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x0b, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x72,
	0x50, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x09, 0x63,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x05, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x14, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x15, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x48, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x16, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x17, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x42, 0x65,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x19, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x67,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x1a, 0x52, 0x0c, 0x67, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x67, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x33,
	0x0a, 0x13, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x11, 0x73,
	0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x1c, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x1d, 0x52, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1e, 0x52,
	0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x69, 0x63,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x73,
	0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f,
	0x6e, 0x65, 0x77, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x0c, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x38, 0x0a, 0x12, 0x47,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x89, 0x15, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x31, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x39, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c,
	0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0c, 0x67,
	0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x30, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x41, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0f, 0x67, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a,
	0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0e,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x52, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a,
	0x0f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x42, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x14, 0x67, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x49, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a,
	0x67, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x6b, 0x75, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x39, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x53, 0x70, 0x75, 0x49, 0x64, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x75, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x53, 0x70, 0x75, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x70, 0x75, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x70, 0x75,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x56, 0x4f, 0x1a, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e,
	0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x70, 0x75, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37,
	0x0a, 0x0a, 0x67, 0x65, 0x74, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x70, 0x75, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x53, 0x70,
	0x75, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x53, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x70, 0x75, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_product_proto_rawDescOnce sync.Once
	file_product_proto_rawDescData = file_product_proto_rawDesc
)

func file_product_proto_rawDescGZIP() []byte {
	file_product_proto_rawDescOnce.Do(func() {
		file_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_product_proto_rawDescData)
	})
	return file_product_proto_rawDescData
}

var file_product_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_product_proto_goTypes = []interface{}{
	(*BrandListReq)(nil),            // 0: product.BrandListReq
	(*BaseIDResp)(nil),              // 1: product.BaseIDResp
	(*BrandCreateReq)(nil),          // 2: product.BrandCreateReq
	(*BrandListResp)(nil),           // 3: product.BrandListResp
	(*CategoryInfo)(nil),            // 4: product.CategoryInfo
	(*SpuUpdateReqVO)(nil),          // 5: product.SpuUpdateReqVO
	(*UUIDsReq)(nil),                // 6: product.UUIDsReq
	(*BaseResp)(nil),                // 7: product.BaseResp
	(*BrandUpdateReq)(nil),          // 8: product.BrandUpdateReq
	(*PropertyListByIdsReq)(nil),    // 9: product.PropertyListByIdsReq
	(*BrandInfo)(nil),               // 10: product.BrandInfo
	(*CategoryBase)(nil),            // 11: product.CategoryBase
	(*CategoryUpdateReq)(nil),       // 12: product.CategoryUpdateReq
	(*CategoryListReq)(nil),         // 13: product.CategoryListReq
	(*CommentListResp)(nil),         // 14: product.CommentListResp
	(*CommentListReq)(nil),          // 15: product.CommentListReq
	(*PropertyValueListResp)(nil),   // 16: product.PropertyValueListResp
	(*IDsReq)(nil),                  // 17: product.IDsReq
	(*PropertyInfo)(nil),            // 18: product.PropertyInfo
	(*PropertyValueDetailResp)(nil), // 19: product.PropertyValueDetailResp
	(*BrandPageReq)(nil),            // 20: product.BrandPageReq
	(*CategoryListResp)(nil),        // 21: product.CategoryListResp
	(*CommentInfo)(nil),             // 22: product.CommentInfo
	(*PropertyListByNameReq)(nil),   // 23: product.PropertyListByNameReq
	(*PropertyValueListReq)(nil),    // 24: product.PropertyValueListReq
	(*SkuListResp)(nil),             // 25: product.SkuListResp
	(*UUIDReq)(nil),                 // 26: product.UUIDReq
	(*CategoryCreateReq)(nil),       // 27: product.CategoryCreateReq
	(*PropertyValueUpdateReq)(nil),  // 28: product.PropertyValueUpdateReq
	(*SkuCreateOrUpdateReq)(nil),    // 29: product.SkuCreateOrUpdateReq
	(*Empty)(nil),                   // 30: product.Empty
	(*SkuProperty)(nil),             // 31: product.SkuProperty
	(*CategoryLevelResp)(nil),       // 32: product.CategoryLevelResp
	(*PropertyValueCreateReq)(nil),  // 33: product.PropertyValueCreateReq
	(*PropertyUpdateReq)(nil),       // 34: product.PropertyUpdateReq
	(*PropertyValueInfo)(nil),       // 35: product.PropertyValueInfo
	(*Ids)(nil),                     // 36: product.Ids
	(*PropertyValuePageReq)(nil),    // 37: product.PropertyValuePageReq
	(*SpuCreateReq)(nil),            // 38: product.SpuCreateReq
	(*SpuUpdateStatusReq)(nil),      // 39: product.SpuUpdateStatusReq
	(*PageInfoReq)(nil),             // 40: product.PageInfoReq
	(*BrandResp)(nil),               // 41: product.BrandResp
	(*PropertyListResp)(nil),        // 42: product.PropertyListResp
	(*PropertyCreateReq)(nil),       // 43: product.PropertyCreateReq
	(*IDReq)(nil),                   // 44: product.IDReq
	(*BaseMsg)(nil),                 // 45: product.BaseMsg
	(*SpuListReq)(nil),              // 46: product.SpuListReq
	(*SkuInfo)(nil),                 // 47: product.SkuInfo
	(*SpuListResp)(nil),             // 48: product.SpuListResp
	(*PropertyPageReq)(nil),         // 49: product.PropertyPageReq
	(*SpuInfo)(nil),                 // 50: product.SpuInfo
	(*BaseUUIDResp)(nil),            // 51: product.BaseUUIDResp
	(*GiveCouponTemplate)(nil),      // 52: product.GiveCouponTemplate
}
var file_product_proto_depIdxs = []int32{
	10, // 0: product.BrandListResp.data:type_name -> product.BrandInfo
	52, // 1: product.SpuUpdateReqVO.giveCouponTemplates:type_name -> product.GiveCouponTemplate
	29, // 2: product.SpuUpdateReqVO.skus:type_name -> product.SkuCreateOrUpdateReq
	22, // 3: product.CommentListResp.data:type_name -> product.CommentInfo
	35, // 4: product.PropertyValueListResp.data:type_name -> product.PropertyValueInfo
	31, // 5: product.PropertyValueDetailResp.skuProperty:type_name -> product.SkuProperty
	4,  // 6: product.CategoryListResp.data:type_name -> product.CategoryInfo
	47, // 7: product.SkuListResp.data:type_name -> product.SkuInfo
	31, // 8: product.SkuCreateOrUpdateReq.properties:type_name -> product.SkuProperty
	52, // 9: product.SpuCreateReq.giveCouponTemplates:type_name -> product.GiveCouponTemplate
	29, // 10: product.SpuCreateReq.skus:type_name -> product.SkuCreateOrUpdateReq
	18, // 11: product.PropertyListResp.data:type_name -> product.PropertyInfo
	31, // 12: product.SkuInfo.properties:type_name -> product.SkuProperty
	50, // 13: product.SpuListResp.data:type_name -> product.SpuInfo
	30, // 14: product.Product.initDatabase:input_type -> product.Empty
	2,  // 15: product.Product.createBrand:input_type -> product.BrandCreateReq
	8,  // 16: product.Product.updateBrand:input_type -> product.BrandUpdateReq
	0,  // 17: product.Product.getBrandList:input_type -> product.BrandListReq
	44, // 18: product.Product.getBrandById:input_type -> product.IDReq
	44, // 19: product.Product.deleteBrand:input_type -> product.IDReq
	20, // 20: product.Product.getBrandPage:input_type -> product.BrandPageReq
	27, // 21: product.Product.createCategory:input_type -> product.CategoryCreateReq
	12, // 22: product.Product.updateCategory:input_type -> product.CategoryUpdateReq
	44, // 23: product.Product.deleteCategory:input_type -> product.IDReq
	44, // 24: product.Product.getCategoryById:input_type -> product.IDReq
	44, // 25: product.Product.getCategoryLevel:input_type -> product.IDReq
	13, // 26: product.Product.getEnableCategoryList:input_type -> product.CategoryListReq
	22, // 27: product.Product.createComment:input_type -> product.CommentInfo
	22, // 28: product.Product.updateComment:input_type -> product.CommentInfo
	15, // 29: product.Product.getCommentList:input_type -> product.CommentListReq
	44, // 30: product.Product.getCommentById:input_type -> product.IDReq
	44, // 31: product.Product.deleteComment:input_type -> product.IDReq
	43, // 32: product.Product.createProperty:input_type -> product.PropertyCreateReq
	34, // 33: product.Product.updateProperty:input_type -> product.PropertyUpdateReq
	44, // 34: product.Product.deleteProperty:input_type -> product.IDReq
	23, // 35: product.Product.getPropertyListByName:input_type -> product.PropertyListByNameReq
	49, // 36: product.Product.getPropertyPage:input_type -> product.PropertyPageReq
	44, // 37: product.Product.getPropertyById:input_type -> product.IDReq
	9,  // 38: product.Product.getPropertyListByIds:input_type -> product.PropertyListByIdsReq
	33, // 39: product.Product.createPropertyValue:input_type -> product.PropertyValueCreateReq
	44, // 40: product.Product.deletePropertyValue:input_type -> product.IDReq
	44, // 41: product.Product.getPropertyValueById:input_type -> product.IDReq
	17, // 42: product.Product.getPropertyValueDetailList:input_type -> product.IDsReq
	17, // 43: product.Product.getPropertyValueListByPropertyId:input_type -> product.IDsReq
	37, // 44: product.Product.getPropertyValuePage:input_type -> product.PropertyValuePageReq
	28, // 45: product.Product.updatePropertyValue:input_type -> product.PropertyValueUpdateReq
	44, // 46: product.Product.deleteSku:input_type -> product.IDReq
	17, // 47: product.Product.getSkuList:input_type -> product.IDsReq
	44, // 48: product.Product.getSkuById:input_type -> product.IDReq
	44, // 49: product.Product.getSkuListBySpuId:input_type -> product.IDReq
	38, // 50: product.Product.createSpu:input_type -> product.SpuCreateReq
	5,  // 51: product.Product.updateSpu:input_type -> product.SpuUpdateReqVO
	39, // 52: product.Product.updateStatus:input_type -> product.SpuUpdateStatusReq
	46, // 53: product.Product.getSpuList:input_type -> product.SpuListReq
	44, // 54: product.Product.getSpuById:input_type -> product.IDReq
	44, // 55: product.Product.deleteSpu:input_type -> product.IDReq
	17, // 56: product.Product.validateSpuList:input_type -> product.IDsReq
	7,  // 57: product.Product.initDatabase:output_type -> product.BaseResp
	1,  // 58: product.Product.createBrand:output_type -> product.BaseIDResp
	7,  // 59: product.Product.updateBrand:output_type -> product.BaseResp
	3,  // 60: product.Product.getBrandList:output_type -> product.BrandListResp
	10, // 61: product.Product.getBrandById:output_type -> product.BrandInfo
	7,  // 62: product.Product.deleteBrand:output_type -> product.BaseResp
	3,  // 63: product.Product.getBrandPage:output_type -> product.BrandListResp
	1,  // 64: product.Product.createCategory:output_type -> product.BaseIDResp
	7,  // 65: product.Product.updateCategory:output_type -> product.BaseResp
	7,  // 66: product.Product.deleteCategory:output_type -> product.BaseResp
	4,  // 67: product.Product.getCategoryById:output_type -> product.CategoryInfo
	32, // 68: product.Product.getCategoryLevel:output_type -> product.CategoryLevelResp
	21, // 69: product.Product.getEnableCategoryList:output_type -> product.CategoryListResp
	1,  // 70: product.Product.createComment:output_type -> product.BaseIDResp
	7,  // 71: product.Product.updateComment:output_type -> product.BaseResp
	14, // 72: product.Product.getCommentList:output_type -> product.CommentListResp
	22, // 73: product.Product.getCommentById:output_type -> product.CommentInfo
	7,  // 74: product.Product.deleteComment:output_type -> product.BaseResp
	1,  // 75: product.Product.createProperty:output_type -> product.BaseIDResp
	7,  // 76: product.Product.updateProperty:output_type -> product.BaseResp
	7,  // 77: product.Product.deleteProperty:output_type -> product.BaseResp
	42, // 78: product.Product.getPropertyListByName:output_type -> product.PropertyListResp
	42, // 79: product.Product.getPropertyPage:output_type -> product.PropertyListResp
	18, // 80: product.Product.getPropertyById:output_type -> product.PropertyInfo
	42, // 81: product.Product.getPropertyListByIds:output_type -> product.PropertyListResp
	1,  // 82: product.Product.createPropertyValue:output_type -> product.BaseIDResp
	7,  // 83: product.Product.deletePropertyValue:output_type -> product.BaseResp
	35, // 84: product.Product.getPropertyValueById:output_type -> product.PropertyValueInfo
	19, // 85: product.Product.getPropertyValueDetailList:output_type -> product.PropertyValueDetailResp
	16, // 86: product.Product.getPropertyValueListByPropertyId:output_type -> product.PropertyValueListResp
	16, // 87: product.Product.getPropertyValuePage:output_type -> product.PropertyValueListResp
	7,  // 88: product.Product.updatePropertyValue:output_type -> product.BaseResp
	7,  // 89: product.Product.deleteSku:output_type -> product.BaseResp
	25, // 90: product.Product.getSkuList:output_type -> product.SkuListResp
	47, // 91: product.Product.getSkuById:output_type -> product.SkuInfo
	25, // 92: product.Product.getSkuListBySpuId:output_type -> product.SkuListResp
	1,  // 93: product.Product.createSpu:output_type -> product.BaseIDResp
	7,  // 94: product.Product.updateSpu:output_type -> product.BaseResp
	7,  // 95: product.Product.updateStatus:output_type -> product.BaseResp
	48, // 96: product.Product.getSpuList:output_type -> product.SpuListResp
	50, // 97: product.Product.getSpuById:output_type -> product.SpuInfo
	7,  // 98: product.Product.deleteSpu:output_type -> product.BaseResp
	48, // 99: product.Product.validateSpuList:output_type -> product.SpuListResp
	57, // [57:100] is the sub-list for method output_type
	14, // [14:57] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_product_proto_init() }
func file_product_proto_init() {
	if File_product_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuUpdateReqVO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyListByIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValueListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValueDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyListByNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValueListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValueUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuCreateOrUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryLevelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValueCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValuePageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuUpdateStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseUUIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveCouponTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_product_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_product_proto_msgTypes[50].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_product_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_product_proto_goTypes,
		DependencyIndexes: file_product_proto_depIdxs,
		MessageInfos:      file_product_proto_msgTypes,
	}.Build()
	File_product_proto = out.File
	file_product_proto_rawDesc = nil
	file_product_proto_goTypes = nil
	file_product_proto_depIdxs = nil
}
