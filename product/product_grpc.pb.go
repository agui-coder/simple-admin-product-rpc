// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Product_InitDatabase_FullMethodName                     = "/product.Product/initDatabase"
	Product_CreateBrand_FullMethodName                      = "/product.Product/createBrand"
	Product_UpdateBrand_FullMethodName                      = "/product.Product/updateBrand"
	Product_GetBrandList_FullMethodName                     = "/product.Product/getBrandList"
	Product_GetBrandById_FullMethodName                     = "/product.Product/getBrandById"
	Product_DeleteBrand_FullMethodName                      = "/product.Product/deleteBrand"
	Product_GetBrandPage_FullMethodName                     = "/product.Product/getBrandPage"
	Product_CreateCategory_FullMethodName                   = "/product.Product/createCategory"
	Product_UpdateCategory_FullMethodName                   = "/product.Product/updateCategory"
	Product_DeleteCategory_FullMethodName                   = "/product.Product/deleteCategory"
	Product_GetCategoryById_FullMethodName                  = "/product.Product/getCategoryById"
	Product_GetCategoryLevel_FullMethodName                 = "/product.Product/getCategoryLevel"
	Product_GetEnableCategoryList_FullMethodName            = "/product.Product/getEnableCategoryList"
	Product_CreateComment_FullMethodName                    = "/product.Product/createComment"
	Product_UpdateComment_FullMethodName                    = "/product.Product/updateComment"
	Product_GetCommentList_FullMethodName                   = "/product.Product/getCommentList"
	Product_GetCommentById_FullMethodName                   = "/product.Product/getCommentById"
	Product_DeleteComment_FullMethodName                    = "/product.Product/deleteComment"
	Product_CreateProperty_FullMethodName                   = "/product.Product/createProperty"
	Product_UpdateProperty_FullMethodName                   = "/product.Product/updateProperty"
	Product_DeleteProperty_FullMethodName                   = "/product.Product/deleteProperty"
	Product_GetPropertyListByName_FullMethodName            = "/product.Product/getPropertyListByName"
	Product_GetPropertyPage_FullMethodName                  = "/product.Product/getPropertyPage"
	Product_GetPropertyById_FullMethodName                  = "/product.Product/getPropertyById"
	Product_GetPropertyListByIds_FullMethodName             = "/product.Product/getPropertyListByIds"
	Product_CreatePropertyValue_FullMethodName              = "/product.Product/createPropertyValue"
	Product_DeletePropertyValue_FullMethodName              = "/product.Product/deletePropertyValue"
	Product_GetPropertyValueById_FullMethodName             = "/product.Product/getPropertyValueById"
	Product_GetPropertyValueDetailList_FullMethodName       = "/product.Product/getPropertyValueDetailList"
	Product_GetPropertyValueListByPropertyId_FullMethodName = "/product.Product/getPropertyValueListByPropertyId"
	Product_GetPropertyValuePage_FullMethodName             = "/product.Product/getPropertyValuePage"
	Product_UpdatePropertyValue_FullMethodName              = "/product.Product/updatePropertyValue"
	Product_DeleteSku_FullMethodName                        = "/product.Product/deleteSku"
	Product_GetSkuList_FullMethodName                       = "/product.Product/getSkuList"
	Product_GetSkuById_FullMethodName                       = "/product.Product/getSkuById"
	Product_GetSkuListBySpuId_FullMethodName                = "/product.Product/getSkuListBySpuId"
	Product_CreateSpu_FullMethodName                        = "/product.Product/createSpu"
	Product_UpdateSpu_FullMethodName                        = "/product.Product/updateSpu"
	Product_UpdateStatus_FullMethodName                     = "/product.Product/updateStatus"
	Product_GetSpuList_FullMethodName                       = "/product.Product/getSpuList"
	Product_GetSpuById_FullMethodName                       = "/product.Product/getSpuById"
	Product_DeleteSpu_FullMethodName                        = "/product.Product/deleteSpu"
	Product_ValidateSpuList_FullMethodName                  = "/product.Product/validateSpuList"
)

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// Brand management
	// group: brand
	CreateBrand(ctx context.Context, in *BrandCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: brand
	UpdateBrand(ctx context.Context, in *BrandUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: brand
	GetBrandList(ctx context.Context, in *BrandListReq, opts ...grpc.CallOption) (*BrandListResp, error)
	// group: brand
	GetBrandById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BrandInfo, error)
	// group: brand
	DeleteBrand(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: brand
	GetBrandPage(ctx context.Context, in *BrandPageReq, opts ...grpc.CallOption) (*BrandListResp, error)
	// Category management
	// group: category
	CreateCategory(ctx context.Context, in *CategoryCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: category
	UpdateCategory(ctx context.Context, in *CategoryUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: category
	DeleteCategory(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: category
	GetCategoryById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CategoryInfo, error)
	// group: category
	GetCategoryLevel(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CategoryLevelResp, error)
	// group: category
	GetEnableCategoryList(ctx context.Context, in *CategoryListReq, opts ...grpc.CallOption) (*CategoryListResp, error)
	// Comment management
	// group: comment
	CreateComment(ctx context.Context, in *CommentInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: comment
	UpdateComment(ctx context.Context, in *CommentInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: comment
	GetCommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
	// group: comment
	GetCommentById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CommentInfo, error)
	// group: comment
	DeleteComment(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Property management
	// group: property
	CreateProperty(ctx context.Context, in *PropertyCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: property
	UpdateProperty(ctx context.Context, in *PropertyUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: property
	DeleteProperty(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: property
	GetPropertyListByName(ctx context.Context, in *PropertyListByNameReq, opts ...grpc.CallOption) (*PropertyListResp, error)
	// group: property
	GetPropertyPage(ctx context.Context, in *PropertyPageReq, opts ...grpc.CallOption) (*PropertyListResp, error)
	// group: property
	GetPropertyById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*PropertyInfo, error)
	// group: property
	GetPropertyListByIds(ctx context.Context, in *PropertyListByIdsReq, opts ...grpc.CallOption) (*PropertyListResp, error)
	// PropertyValue management
	// group: propertyvalue
	CreatePropertyValue(ctx context.Context, in *PropertyValueCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: propertyvalue
	DeletePropertyValue(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: propertyvalue
	GetPropertyValueById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*PropertyValueInfo, error)
	// group: propertyvalue
	GetPropertyValueDetailList(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*PropertyValueDetailResp, error)
	// group: propertyvalue
	GetPropertyValueListByPropertyId(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*PropertyValueListResp, error)
	// group: propertyvalue
	GetPropertyValuePage(ctx context.Context, in *PropertyValuePageReq, opts ...grpc.CallOption) (*PropertyValueListResp, error)
	// group: propertyvalue
	UpdatePropertyValue(ctx context.Context, in *PropertyValueUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Sku management
	// group: sku
	DeleteSku(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: sku
	GetSkuList(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*SkuListResp, error)
	// group: sku
	GetSkuById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SkuInfo, error)
	// group: sku
	GetSkuListBySpuId(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SkuListResp, error)
	// Spu management
	// group: spu
	CreateSpu(ctx context.Context, in *SpuCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: spu
	UpdateSpu(ctx context.Context, in *SpuUpdateReqVO, opts ...grpc.CallOption) (*BaseResp, error)
	// group: spu
	UpdateStatus(ctx context.Context, in *SpuUpdateStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: spu
	GetSpuList(ctx context.Context, in *SpuListReq, opts ...grpc.CallOption) (*SpuListResp, error)
	// group: spu
	GetSpuById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SpuInfo, error)
	// group: spu
	DeleteSpu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: spu
	ValidateSpuList(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*SpuListResp, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_InitDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateBrand(ctx context.Context, in *BrandCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Product_CreateBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateBrand(ctx context.Context, in *BrandUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_UpdateBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetBrandList(ctx context.Context, in *BrandListReq, opts ...grpc.CallOption) (*BrandListResp, error) {
	out := new(BrandListResp)
	err := c.cc.Invoke(ctx, Product_GetBrandList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetBrandById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BrandInfo, error) {
	out := new(BrandInfo)
	err := c.cc.Invoke(ctx, Product_GetBrandById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteBrand(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_DeleteBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetBrandPage(ctx context.Context, in *BrandPageReq, opts ...grpc.CallOption) (*BrandListResp, error) {
	out := new(BrandListResp)
	err := c.cc.Invoke(ctx, Product_GetBrandPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateCategory(ctx context.Context, in *CategoryCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Product_CreateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateCategory(ctx context.Context, in *CategoryUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_UpdateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteCategory(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_DeleteCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetCategoryById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CategoryInfo, error) {
	out := new(CategoryInfo)
	err := c.cc.Invoke(ctx, Product_GetCategoryById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetCategoryLevel(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CategoryLevelResp, error) {
	out := new(CategoryLevelResp)
	err := c.cc.Invoke(ctx, Product_GetCategoryLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetEnableCategoryList(ctx context.Context, in *CategoryListReq, opts ...grpc.CallOption) (*CategoryListResp, error) {
	out := new(CategoryListResp)
	err := c.cc.Invoke(ctx, Product_GetEnableCategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateComment(ctx context.Context, in *CommentInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Product_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateComment(ctx context.Context, in *CommentInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetCommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	out := new(CommentListResp)
	err := c.cc.Invoke(ctx, Product_GetCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetCommentById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CommentInfo, error) {
	out := new(CommentInfo)
	err := c.cc.Invoke(ctx, Product_GetCommentById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteComment(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateProperty(ctx context.Context, in *PropertyCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Product_CreateProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateProperty(ctx context.Context, in *PropertyUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_UpdateProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteProperty(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_DeleteProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetPropertyListByName(ctx context.Context, in *PropertyListByNameReq, opts ...grpc.CallOption) (*PropertyListResp, error) {
	out := new(PropertyListResp)
	err := c.cc.Invoke(ctx, Product_GetPropertyListByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetPropertyPage(ctx context.Context, in *PropertyPageReq, opts ...grpc.CallOption) (*PropertyListResp, error) {
	out := new(PropertyListResp)
	err := c.cc.Invoke(ctx, Product_GetPropertyPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetPropertyById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*PropertyInfo, error) {
	out := new(PropertyInfo)
	err := c.cc.Invoke(ctx, Product_GetPropertyById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetPropertyListByIds(ctx context.Context, in *PropertyListByIdsReq, opts ...grpc.CallOption) (*PropertyListResp, error) {
	out := new(PropertyListResp)
	err := c.cc.Invoke(ctx, Product_GetPropertyListByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreatePropertyValue(ctx context.Context, in *PropertyValueCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Product_CreatePropertyValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeletePropertyValue(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_DeletePropertyValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetPropertyValueById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*PropertyValueInfo, error) {
	out := new(PropertyValueInfo)
	err := c.cc.Invoke(ctx, Product_GetPropertyValueById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetPropertyValueDetailList(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*PropertyValueDetailResp, error) {
	out := new(PropertyValueDetailResp)
	err := c.cc.Invoke(ctx, Product_GetPropertyValueDetailList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetPropertyValueListByPropertyId(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*PropertyValueListResp, error) {
	out := new(PropertyValueListResp)
	err := c.cc.Invoke(ctx, Product_GetPropertyValueListByPropertyId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetPropertyValuePage(ctx context.Context, in *PropertyValuePageReq, opts ...grpc.CallOption) (*PropertyValueListResp, error) {
	out := new(PropertyValueListResp)
	err := c.cc.Invoke(ctx, Product_GetPropertyValuePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdatePropertyValue(ctx context.Context, in *PropertyValueUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_UpdatePropertyValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteSku(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_DeleteSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSkuList(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*SkuListResp, error) {
	out := new(SkuListResp)
	err := c.cc.Invoke(ctx, Product_GetSkuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSkuById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SkuInfo, error) {
	out := new(SkuInfo)
	err := c.cc.Invoke(ctx, Product_GetSkuById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSkuListBySpuId(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SkuListResp, error) {
	out := new(SkuListResp)
	err := c.cc.Invoke(ctx, Product_GetSkuListBySpuId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateSpu(ctx context.Context, in *SpuCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Product_CreateSpu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateSpu(ctx context.Context, in *SpuUpdateReqVO, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_UpdateSpu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateStatus(ctx context.Context, in *SpuUpdateStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_UpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSpuList(ctx context.Context, in *SpuListReq, opts ...grpc.CallOption) (*SpuListResp, error) {
	out := new(SpuListResp)
	err := c.cc.Invoke(ctx, Product_GetSpuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSpuById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SpuInfo, error) {
	out := new(SpuInfo)
	err := c.cc.Invoke(ctx, Product_GetSpuById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteSpu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Product_DeleteSpu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ValidateSpuList(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*SpuListResp, error) {
	out := new(SpuListResp)
	err := c.cc.Invoke(ctx, Product_ValidateSpuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility
type ProductServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// Brand management
	// group: brand
	CreateBrand(context.Context, *BrandCreateReq) (*BaseIDResp, error)
	// group: brand
	UpdateBrand(context.Context, *BrandUpdateReq) (*BaseResp, error)
	// group: brand
	GetBrandList(context.Context, *BrandListReq) (*BrandListResp, error)
	// group: brand
	GetBrandById(context.Context, *IDReq) (*BrandInfo, error)
	// group: brand
	DeleteBrand(context.Context, *IDReq) (*BaseResp, error)
	// group: brand
	GetBrandPage(context.Context, *BrandPageReq) (*BrandListResp, error)
	// Category management
	// group: category
	CreateCategory(context.Context, *CategoryCreateReq) (*BaseIDResp, error)
	// group: category
	UpdateCategory(context.Context, *CategoryUpdateReq) (*BaseResp, error)
	// group: category
	DeleteCategory(context.Context, *IDReq) (*BaseResp, error)
	// group: category
	GetCategoryById(context.Context, *IDReq) (*CategoryInfo, error)
	// group: category
	GetCategoryLevel(context.Context, *IDReq) (*CategoryLevelResp, error)
	// group: category
	GetEnableCategoryList(context.Context, *CategoryListReq) (*CategoryListResp, error)
	// Comment management
	// group: comment
	CreateComment(context.Context, *CommentInfo) (*BaseIDResp, error)
	// group: comment
	UpdateComment(context.Context, *CommentInfo) (*BaseResp, error)
	// group: comment
	GetCommentList(context.Context, *CommentListReq) (*CommentListResp, error)
	// group: comment
	GetCommentById(context.Context, *IDReq) (*CommentInfo, error)
	// group: comment
	DeleteComment(context.Context, *IDReq) (*BaseResp, error)
	// Property management
	// group: property
	CreateProperty(context.Context, *PropertyCreateReq) (*BaseIDResp, error)
	// group: property
	UpdateProperty(context.Context, *PropertyUpdateReq) (*BaseResp, error)
	// group: property
	DeleteProperty(context.Context, *IDReq) (*BaseResp, error)
	// group: property
	GetPropertyListByName(context.Context, *PropertyListByNameReq) (*PropertyListResp, error)
	// group: property
	GetPropertyPage(context.Context, *PropertyPageReq) (*PropertyListResp, error)
	// group: property
	GetPropertyById(context.Context, *IDReq) (*PropertyInfo, error)
	// group: property
	GetPropertyListByIds(context.Context, *PropertyListByIdsReq) (*PropertyListResp, error)
	// PropertyValue management
	// group: propertyvalue
	CreatePropertyValue(context.Context, *PropertyValueCreateReq) (*BaseIDResp, error)
	// group: propertyvalue
	DeletePropertyValue(context.Context, *IDReq) (*BaseResp, error)
	// group: propertyvalue
	GetPropertyValueById(context.Context, *IDReq) (*PropertyValueInfo, error)
	// group: propertyvalue
	GetPropertyValueDetailList(context.Context, *IDsReq) (*PropertyValueDetailResp, error)
	// group: propertyvalue
	GetPropertyValueListByPropertyId(context.Context, *IDsReq) (*PropertyValueListResp, error)
	// group: propertyvalue
	GetPropertyValuePage(context.Context, *PropertyValuePageReq) (*PropertyValueListResp, error)
	// group: propertyvalue
	UpdatePropertyValue(context.Context, *PropertyValueUpdateReq) (*BaseResp, error)
	// Sku management
	// group: sku
	DeleteSku(context.Context, *IDReq) (*BaseResp, error)
	// group: sku
	GetSkuList(context.Context, *IDsReq) (*SkuListResp, error)
	// group: sku
	GetSkuById(context.Context, *IDReq) (*SkuInfo, error)
	// group: sku
	GetSkuListBySpuId(context.Context, *IDReq) (*SkuListResp, error)
	// Spu management
	// group: spu
	CreateSpu(context.Context, *SpuCreateReq) (*BaseIDResp, error)
	// group: spu
	UpdateSpu(context.Context, *SpuUpdateReqVO) (*BaseResp, error)
	// group: spu
	UpdateStatus(context.Context, *SpuUpdateStatusReq) (*BaseResp, error)
	// group: spu
	GetSpuList(context.Context, *SpuListReq) (*SpuListResp, error)
	// group: spu
	GetSpuById(context.Context, *IDReq) (*SpuInfo, error)
	// group: spu
	DeleteSpu(context.Context, *IDReq) (*BaseResp, error)
	// group: spu
	ValidateSpuList(context.Context, *IDsReq) (*SpuListResp, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have forward compatible implementations.
type UnimplementedProductServer struct {
}

func (UnimplementedProductServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedProductServer) CreateBrand(context.Context, *BrandCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedProductServer) UpdateBrand(context.Context, *BrandUpdateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedProductServer) GetBrandList(context.Context, *BrandListReq) (*BrandListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandList not implemented")
}
func (UnimplementedProductServer) GetBrandById(context.Context, *IDReq) (*BrandInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandById not implemented")
}
func (UnimplementedProductServer) DeleteBrand(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedProductServer) GetBrandPage(context.Context, *BrandPageReq) (*BrandListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandPage not implemented")
}
func (UnimplementedProductServer) CreateCategory(context.Context, *CategoryCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedProductServer) UpdateCategory(context.Context, *CategoryUpdateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedProductServer) DeleteCategory(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedProductServer) GetCategoryById(context.Context, *IDReq) (*CategoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedProductServer) GetCategoryLevel(context.Context, *IDReq) (*CategoryLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryLevel not implemented")
}
func (UnimplementedProductServer) GetEnableCategoryList(context.Context, *CategoryListReq) (*CategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnableCategoryList not implemented")
}
func (UnimplementedProductServer) CreateComment(context.Context, *CommentInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedProductServer) UpdateComment(context.Context, *CommentInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedProductServer) GetCommentList(context.Context, *CommentListReq) (*CommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedProductServer) GetCommentById(context.Context, *IDReq) (*CommentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentById not implemented")
}
func (UnimplementedProductServer) DeleteComment(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedProductServer) CreateProperty(context.Context, *PropertyCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProperty not implemented")
}
func (UnimplementedProductServer) UpdateProperty(context.Context, *PropertyUpdateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProperty not implemented")
}
func (UnimplementedProductServer) DeleteProperty(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProperty not implemented")
}
func (UnimplementedProductServer) GetPropertyListByName(context.Context, *PropertyListByNameReq) (*PropertyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyListByName not implemented")
}
func (UnimplementedProductServer) GetPropertyPage(context.Context, *PropertyPageReq) (*PropertyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyPage not implemented")
}
func (UnimplementedProductServer) GetPropertyById(context.Context, *IDReq) (*PropertyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyById not implemented")
}
func (UnimplementedProductServer) GetPropertyListByIds(context.Context, *PropertyListByIdsReq) (*PropertyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyListByIds not implemented")
}
func (UnimplementedProductServer) CreatePropertyValue(context.Context, *PropertyValueCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePropertyValue not implemented")
}
func (UnimplementedProductServer) DeletePropertyValue(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePropertyValue not implemented")
}
func (UnimplementedProductServer) GetPropertyValueById(context.Context, *IDReq) (*PropertyValueInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyValueById not implemented")
}
func (UnimplementedProductServer) GetPropertyValueDetailList(context.Context, *IDsReq) (*PropertyValueDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyValueDetailList not implemented")
}
func (UnimplementedProductServer) GetPropertyValueListByPropertyId(context.Context, *IDsReq) (*PropertyValueListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyValueListByPropertyId not implemented")
}
func (UnimplementedProductServer) GetPropertyValuePage(context.Context, *PropertyValuePageReq) (*PropertyValueListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyValuePage not implemented")
}
func (UnimplementedProductServer) UpdatePropertyValue(context.Context, *PropertyValueUpdateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePropertyValue not implemented")
}
func (UnimplementedProductServer) DeleteSku(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSku not implemented")
}
func (UnimplementedProductServer) GetSkuList(context.Context, *IDsReq) (*SkuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkuList not implemented")
}
func (UnimplementedProductServer) GetSkuById(context.Context, *IDReq) (*SkuInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkuById not implemented")
}
func (UnimplementedProductServer) GetSkuListBySpuId(context.Context, *IDReq) (*SkuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkuListBySpuId not implemented")
}
func (UnimplementedProductServer) CreateSpu(context.Context, *SpuCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpu not implemented")
}
func (UnimplementedProductServer) UpdateSpu(context.Context, *SpuUpdateReqVO) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpu not implemented")
}
func (UnimplementedProductServer) UpdateStatus(context.Context, *SpuUpdateStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedProductServer) GetSpuList(context.Context, *SpuListReq) (*SpuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpuList not implemented")
}
func (UnimplementedProductServer) GetSpuById(context.Context, *IDReq) (*SpuInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpuById not implemented")
}
func (UnimplementedProductServer) DeleteSpu(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpu not implemented")
}
func (UnimplementedProductServer) ValidateSpuList(context.Context, *IDsReq) (*SpuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSpuList not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateBrand(ctx, req.(*BrandCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateBrand(ctx, req.(*BrandUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetBrandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetBrandList(ctx, req.(*BrandListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetBrandById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetBrandById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetBrandById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetBrandById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DeleteBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteBrand(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetBrandPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetBrandPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetBrandPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetBrandPage(ctx, req.(*BrandPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateCategory(ctx, req.(*CategoryCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateCategory(ctx, req.(*CategoryUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteCategory(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetCategoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetCategoryById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetCategoryLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetCategoryLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetCategoryLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetCategoryLevel(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetEnableCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetEnableCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetEnableCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetEnableCategoryList(ctx, req.(*CategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateComment(ctx, req.(*CommentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateComment(ctx, req.(*CommentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetCommentList(ctx, req.(*CommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetCommentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetCommentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetCommentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetCommentById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteComment(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateProperty(ctx, req.(*PropertyCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateProperty(ctx, req.(*PropertyUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DeleteProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteProperty(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetPropertyListByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyListByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetPropertyListByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetPropertyListByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetPropertyListByName(ctx, req.(*PropertyListByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetPropertyPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetPropertyPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetPropertyPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetPropertyPage(ctx, req.(*PropertyPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetPropertyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetPropertyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetPropertyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetPropertyById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetPropertyListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyListByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetPropertyListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetPropertyListByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetPropertyListByIds(ctx, req.(*PropertyListByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreatePropertyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyValueCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreatePropertyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreatePropertyValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreatePropertyValue(ctx, req.(*PropertyValueCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeletePropertyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeletePropertyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DeletePropertyValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeletePropertyValue(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetPropertyValueById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetPropertyValueById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetPropertyValueById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetPropertyValueById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetPropertyValueDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetPropertyValueDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetPropertyValueDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetPropertyValueDetailList(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetPropertyValueListByPropertyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetPropertyValueListByPropertyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetPropertyValueListByPropertyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetPropertyValueListByPropertyId(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetPropertyValuePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyValuePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetPropertyValuePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetPropertyValuePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetPropertyValuePage(ctx, req.(*PropertyValuePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdatePropertyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyValueUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdatePropertyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdatePropertyValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdatePropertyValue(ctx, req.(*PropertyValueUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DeleteSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteSku(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSkuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSkuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetSkuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSkuList(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSkuById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSkuById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetSkuById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSkuById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSkuListBySpuId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSkuListBySpuId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetSkuListBySpuId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSkuListBySpuId(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateSpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpuCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateSpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateSpu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateSpu(ctx, req.(*SpuCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateSpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpuUpdateReqVO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateSpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateSpu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateSpu(ctx, req.(*SpuUpdateReqVO))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpuUpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateStatus(ctx, req.(*SpuUpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSpuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSpuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetSpuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSpuList(ctx, req.(*SpuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSpuById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSpuById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetSpuById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSpuById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteSpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteSpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DeleteSpu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteSpu(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ValidateSpuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ValidateSpuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ValidateSpuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ValidateSpuList(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _Product_InitDatabase_Handler,
		},
		{
			MethodName: "createBrand",
			Handler:    _Product_CreateBrand_Handler,
		},
		{
			MethodName: "updateBrand",
			Handler:    _Product_UpdateBrand_Handler,
		},
		{
			MethodName: "getBrandList",
			Handler:    _Product_GetBrandList_Handler,
		},
		{
			MethodName: "getBrandById",
			Handler:    _Product_GetBrandById_Handler,
		},
		{
			MethodName: "deleteBrand",
			Handler:    _Product_DeleteBrand_Handler,
		},
		{
			MethodName: "getBrandPage",
			Handler:    _Product_GetBrandPage_Handler,
		},
		{
			MethodName: "createCategory",
			Handler:    _Product_CreateCategory_Handler,
		},
		{
			MethodName: "updateCategory",
			Handler:    _Product_UpdateCategory_Handler,
		},
		{
			MethodName: "deleteCategory",
			Handler:    _Product_DeleteCategory_Handler,
		},
		{
			MethodName: "getCategoryById",
			Handler:    _Product_GetCategoryById_Handler,
		},
		{
			MethodName: "getCategoryLevel",
			Handler:    _Product_GetCategoryLevel_Handler,
		},
		{
			MethodName: "getEnableCategoryList",
			Handler:    _Product_GetEnableCategoryList_Handler,
		},
		{
			MethodName: "createComment",
			Handler:    _Product_CreateComment_Handler,
		},
		{
			MethodName: "updateComment",
			Handler:    _Product_UpdateComment_Handler,
		},
		{
			MethodName: "getCommentList",
			Handler:    _Product_GetCommentList_Handler,
		},
		{
			MethodName: "getCommentById",
			Handler:    _Product_GetCommentById_Handler,
		},
		{
			MethodName: "deleteComment",
			Handler:    _Product_DeleteComment_Handler,
		},
		{
			MethodName: "createProperty",
			Handler:    _Product_CreateProperty_Handler,
		},
		{
			MethodName: "updateProperty",
			Handler:    _Product_UpdateProperty_Handler,
		},
		{
			MethodName: "deleteProperty",
			Handler:    _Product_DeleteProperty_Handler,
		},
		{
			MethodName: "getPropertyListByName",
			Handler:    _Product_GetPropertyListByName_Handler,
		},
		{
			MethodName: "getPropertyPage",
			Handler:    _Product_GetPropertyPage_Handler,
		},
		{
			MethodName: "getPropertyById",
			Handler:    _Product_GetPropertyById_Handler,
		},
		{
			MethodName: "getPropertyListByIds",
			Handler:    _Product_GetPropertyListByIds_Handler,
		},
		{
			MethodName: "createPropertyValue",
			Handler:    _Product_CreatePropertyValue_Handler,
		},
		{
			MethodName: "deletePropertyValue",
			Handler:    _Product_DeletePropertyValue_Handler,
		},
		{
			MethodName: "getPropertyValueById",
			Handler:    _Product_GetPropertyValueById_Handler,
		},
		{
			MethodName: "getPropertyValueDetailList",
			Handler:    _Product_GetPropertyValueDetailList_Handler,
		},
		{
			MethodName: "getPropertyValueListByPropertyId",
			Handler:    _Product_GetPropertyValueListByPropertyId_Handler,
		},
		{
			MethodName: "getPropertyValuePage",
			Handler:    _Product_GetPropertyValuePage_Handler,
		},
		{
			MethodName: "updatePropertyValue",
			Handler:    _Product_UpdatePropertyValue_Handler,
		},
		{
			MethodName: "deleteSku",
			Handler:    _Product_DeleteSku_Handler,
		},
		{
			MethodName: "getSkuList",
			Handler:    _Product_GetSkuList_Handler,
		},
		{
			MethodName: "getSkuById",
			Handler:    _Product_GetSkuById_Handler,
		},
		{
			MethodName: "getSkuListBySpuId",
			Handler:    _Product_GetSkuListBySpuId_Handler,
		},
		{
			MethodName: "createSpu",
			Handler:    _Product_CreateSpu_Handler,
		},
		{
			MethodName: "updateSpu",
			Handler:    _Product_UpdateSpu_Handler,
		},
		{
			MethodName: "updateStatus",
			Handler:    _Product_UpdateStatus_Handler,
		},
		{
			MethodName: "getSpuList",
			Handler:    _Product_GetSpuList_Handler,
		},
		{
			MethodName: "getSpuById",
			Handler:    _Product_GetSpuById_Handler,
		},
		{
			MethodName: "deleteSpu",
			Handler:    _Product_DeleteSpu_Handler,
		},
		{
			MethodName: "validateSpuList",
			Handler:    _Product_ValidateSpuList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
